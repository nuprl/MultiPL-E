{
  "name": "HumanEval_100_make_a_pile",
  "language": "rs",
  "prompt": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n + 1);\n  for i in 0..n {\n    result[i + 1] = odd ? i + 2 : i + 1;\n    odd = !odd;\n    if !even {\n      even = true;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `i`\n  --> /tmp/tmpzzgy2tac.rs:16:27\n   |\n16 |     result[i + 1] = odd ? i + 2 : i + 1;\n   |                           ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpzzgy2tac.rs:14:16\n    |\n14  |   let result = Vec::new(n + 1);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let stones = Vec::new(n);\n  let level = 0;\n  for i in 0..n {\n    if i % 2 == 0 {\n      stones[level] = stones[level] + i;\n    } else {\n      stones[level] = stones[level] + i + 1;\n      level = level + 1;\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp05_c13st.rs:12:16\n    |\n12  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    if odd {\n      stones[i] = stones[i] + 1\n    } else if even {\n      stones[i] = stones[i] + 2\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpr62byjcz.rs:18:23\n   |\n18 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n19 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpr62byjcz.rs:19:24\n   |\n19 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n20 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpr62byjcz.rs:20:27\n   |\n20 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n21 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr62byjcz.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr62byjcz.rs:16:12\n    |\n16  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr62byjcz.rs:20:16\n    |\n20  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpr62byjcz.rs:23:7\n   |\n23 |       stones[i] = stones[i] + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones = stones.concat(odd ? i + 1 : i);\n    odd = !odd;\n    if even {\n      stones = stones.concat(i);\n      even = false;\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `i`\n  --> /tmp/tmpiix686iq.rs:19:34\n   |\n19 |     stones = stones.concat(odd ? i + 1 : i);\n   |                                 -^ expected one of `)`, `,`, `.`, `?`, or an operator\n   |                                 |\n   |                                 help: missing `,`\n\nerror[E0573]: expected type, found local variable `i`\n  --> /tmp/tmpiix686iq.rs:19:42\n   |\n19 |     stones = stones.concat(odd ? i + 1 : i);\n   |                                          ^ expecting a type here because of type ascription\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpiix686iq.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpiix686iq.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmpiix686iq.rs:19:28\n   |\n19 |     stones = stones.concat(odd ? i + 1 : i);\n   |                            ^^^^^ the `?` operator cannot be applied to type `isize`\n   |\n   = help: the trait `Try` is not implemented for `isize`\n\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n  --> /tmp/tmpiix686iq.rs:19:32\n   |\n11 | / fn make_a_pile(n: isize) -> Vec<isize> {\n12 | |   if n == 0 {\n13 | |     return Vec::new(0);\n14 | |   }\n...  |\n19 | |     stones = stones.concat(odd ? i + 1 : i);\n   | |                                ^ cannot use the `?` operator in a function that returns `Vec<isize>`\n...  |\n26 | |   return stones;\n27 | | }\n   | |_- this function should return `Res",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones = stones.push_back(odd + stones.pop_back());\n    stones = stones.push_back(even + stones.pop_back());\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp04zj7uu6.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp04zj7uu6.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp04zj7uu6.rs:19:21\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back());\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp04zj7uu6.rs:19:44\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back());\n   |                                            ^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp04zj7uu6.rs:20:21\n   |\n20 |     stones = stones.push_back(even + stones.pop_back());\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp04zj7uu6.rs:20:45\n   |\n20 |     stones = stones.push_back(even + stones.pop_back());\n   |                                             ^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  let level = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      level = level.push(i + 1)\n    } else {\n      level = level.push(i)\n    }\n    stones = stones.push(level.pop())\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_1aeft1h.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_1aeft1h.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_1aeft1h.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let level = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_1aeft1h.rs:18:26\n   |\n18 |   let level = Vec::new(n)\n   |                          ^ help: add `;` here\n19 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_1aeft1h.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_1aeft1h.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_1aeft1h.rs:18:15\n    |\n18  |   let level = Vec::new(n)\n    |               ^^^^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1aeft1h.rs:21:15\n   |\n18 |   let level = Vec::new(n)\n   |               ----------- expected due to this value\n...\n21 |       level = level.push(i + 1)\n   |               ^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: exp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if odd {\n      result[i] = i + 1\n    } else if even {\n      result[i] = i + 2\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpb_oa5xib.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpb_oa5xib.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpb_oa5xib.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpb_oa5xib.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpb_oa5xib.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb_oa5xib.rs:19:8\n   |\n19 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpb_oa5xib.rs:20:7\n   |\n20 |       result[i] = i + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpb_oa5xib.rs:22:7\n   |\n22 |       result[i] = i + 2\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is no",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `even`\n  --> /tmp/tmp_1ho5w2r.rs:16:47\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                                              -^^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n   |                                              |\n   |                                              help: missing `,`\n\nerror[E0573]: expected type, found local variable `odd`\n  --> /tmp/tmp_1ho5w2r.rs:16:54\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                                                      ^^^ expecting a type here because of type ascription\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_1ho5w2r.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp_1ho5w2r.rs:16:5\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp_1ho5w2r.rs:16:17\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                 ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmp_1ho5w2r.rs:16:43\n   |\n16",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let next_odd = n % 2 + 1\n  let next_even = n % 2\n  let result = Vec::new(n)\n  for i in 0..n {\n    result[i] = next_odd if i % 2 == 0 else next_even\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5llcjpuh.rs:15:27\n   |\n15 |   let next_odd = n % 2 + 1\n   |                           ^ help: add `;` here\n16 |   let next_even = n % 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5llcjpuh.rs:16:24\n   |\n16 |   let next_even = n % 2\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5llcjpuh.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmp5llcjpuh.rs:19:26\n   |\n19 |     result[i] = next_odd if i % 2 == 0 else next_even\n   |                          ^^ expected one of 8 possible tokens\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5llcjpuh.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5llcjpuh.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let level = n;\n  let stones = Vec::new(level);\n  let odd = level % 2;\n  let even = level - odd;\n  for i in 0..level {\n    if i % 2 == odd {\n      stones = stones.concat(Vec::new(i + 1));\n    } else {\n      stones = stones.concat(Vec::new(i));\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgcqctzsh.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgcqctzsh.rs:16:16\n    |\n16  |   let stones = Vec::new(level);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgcqctzsh.rs:21:30\n    |\n21  |       stones = stones.concat(Vec::new(i + 1));\n    |                              ^^^^^^^^ ----- supplied 1 argument\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgcqctzsh.rs:21:23\n    |\n21  |       stones = stones.concat(Vec::new(i + 1));\n    |                       ^^^^^^ --------------- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgcqctzsh.rs:23:30\n    |\n23  |       stones = stones.concat(Vec::new(i));\n    |                              ^^^^^^^^ - supplied 1 argument\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgcqctzsh.rs:23:23\n    |\n23  |       stones = stones.concat(Vec::new(i));\n    |                       ^^^^^^ ----------- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    if odd {\n      stones = stones.push(i + 1);\n    } else {\n      stones = stones.push(i);\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmplf0ty2n3.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmplf0ty2n3.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplf0ty2n3.rs:19:8\n   |\n19 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplf0ty2n3.rs:20:16\n   |\n17 |   let stones = Vec::new(n);\n   |                ----------- expected due to this value\n...\n20 |       stones = stones.push(i + 1);\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplf0ty2n3.rs:22:16\n   |\n17 |   let stones = Vec::new(n);\n   |                ----------- expected due to this value\n...\n22 |       stones = stones.push(i);\n   |                ^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmplf0ty2n3.rs:22:23\n   |\n22 |       stones = stones.push(i);\n   |                ------ ^^^^ this call modifies `stones` in-place\n   |                |\n   |                you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `push`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + Vec::new(1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:19:33\n    |\n19  |     return make_a_pile(n / 2) + Vec::new(1)\n    |                                 ^^^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<isize>`\n  --> /tmp/tmpz8uqbvv3.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + Vec::new(1)\n   |            ------------------ ^ ----------- Vec<_>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    if odd {\n      stones = stones.push(i + 1)\n    } else if even {\n      stones = stones.push(i + 2)\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd5v33z86.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpd5v33z86.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpd5v33z86.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpd5v33z86.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpd5v33z86.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5v33z86.rs:20:16\n   |\n17 |   let stones = Vec::new(n)\n   |                ----------- expected due to this value\n...\n20 |       stones = stones.push(i + 1)\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5v33z86.rs:22:16\n   |\n17 |   let stones = Vec::new(n)\n   |                ----------- expected due to this value\n...\n22 |       stones = stones.push(i + 2)\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmpd5v33z86.rs:22:23\n   |\n22 |      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  let i = 0\n  let j = 0\n  while i < n {\n    if odd {\n      result[i] = n\n      i += 1\n    } else if even {\n      result[i] = n + 1\n      i += 2\n    } else {\n      result[i] = n + 2\n      i += 2\n    }\n    j += 1\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9gys2kkj.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp9gys2kkj.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp9gys2kkj.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp9gys2kkj.rs:18:12\n   |\n18 |   let i = 0\n   |            ^ help: add `;` here\n19 |   let j = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp9gys2kkj.rs:19:12\n   |\n19 |   let j = 0\n   |            ^ help: add `;` here\n20 |   while i < n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp9gys2kkj.rs:22:20\n   |\n22 |       result[i] = n\n   |                    ^ help: add `;` here\n23 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp9gys2kkj.rs:25:24\n   |\n25 |       result[i] = n + 1\n   |                        ^ help: add `;` here\n26 |       i += 2\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp9gys2kkj.rs:28:24\n   |\n28 |       result[i] = n + 2\n   |                        ^ help: add `;` here\n29 |       i += 2\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9gys2kkj.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9gys2kkj.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let result = Vec::new();\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let level = 0;\n  let stones = 0;\n  while (true) {\n    if (odd) {\n      stones += 1;\n    } else if (even) {\n      stones += 2;\n    }\n    if (stones == n) {\n      result.push_back(level);\n      break;\n    }\n    level += 1;\n    odd = !odd;\n    even = !even;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp2l6byp1h.rs:17:9\n   |\n17 |   while (true) {\n   |         ^    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -   while (true) {\n17 +   while true {\n   | \n\nwarning: denote infinite loops with `loop { ... }`\n  --> /tmp/tmp2l6byp1h.rs:17:3\n   |\n17 |   while (true) {\n   |   ^^^^^^^^^^^^ help: use `loop`\n   |\n   = note: `#[warn(while_true)]` on by default\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2l6byp1h.rs:18:8\n   |\n18 |     if (odd) {\n   |        ^   ^\n   |\nhelp: remove these parentheses\n   |\n18 -     if (odd) {\n18 +     if odd {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2l6byp1h.rs:20:15\n   |\n20 |     } else if (even) {\n   |               ^    ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (even) {\n20 +     } else if even {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2l6byp1h.rs:23:8\n   |\n23 |     if (stones == n) {\n   |        ^           ^\n   |\nhelp: remove these parentheses\n   |\n23 -     if (stones == n) {\n23 +     if stones == n {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2l6byp1h.rs:18:8\n   |\n18 |     if (odd) {\n   |        ^^^^^ expected `bool`, found `isize`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp2l6byp1h.rs:24:14\n   |\n24 |       result.push_back(level);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors; 5 warnings emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n % 2 == 1 {\n    return Vec::new(n, n + 1)\n  }\n  return Vec::new(n, n + 2)\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5_hz4ugj.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 2 arguments were supplied\n   --> /tmp/tmp5_hz4ugj.rs:16:12\n    |\n16  |     return Vec::new(n, n + 1)\n    |            ^^^^^^^^ -  ----- supplied 2 arguments\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 2 arguments were supplied\n   --> /tmp/tmp5_hz4ugj.rs:18:10\n    |\n18  |   return Vec::new(n, n + 2)\n    |          ^^^^^^^^ -  ----- supplied 2 arguments\n    |          |\n    |          expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones = stones.push_back(odd + stones.pop_back());\n    stones = stones.push_back(even + stones.pop_back());\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqjd3e71o.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqjd3e71o.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpqjd3e71o.rs:19:21\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back());\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpqjd3e71o.rs:19:44\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back());\n   |                                            ^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpqjd3e71o.rs:20:21\n   |\n20 |     stones = stones.push_back(even + stones.pop_back());\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpqjd3e71o.rs:20:45\n   |\n20 |     stones = stones.push_back(even + stones.pop_back());\n   |                                             ^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n);\n  for i in 0..n {\n    result[i] = (odd && i + 1) + (even && i + 2);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxpm5ebj0.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxpm5ebj0.rs:17:16\n    |\n17  |   let result = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpm5ebj0.rs:19:18\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2);\n   |                  ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpxpm5ebj0.rs:19:5\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2);\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpm5ebj0.rs:19:25\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2);\n   |                         ^^^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpm5ebj0.rs:19:43\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2);\n   |                                           ^^^^^ expected `bool`, found `isize`\n\nerror[E0369]: cannot add `bool` to `bool`\n  --> /tmp/tmpxpm5ebj0.rs:19:32\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2);\n   |                 -------------- ^ --------------- bool\n   |                 |\n   |                 bool\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0061, E0277, E0308, E0369.\nFor more information about an error, try `rustc --explai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if odd {\n      result[i] = n + 1\n    } else if even {\n      result[i] = n\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph8rb22mk.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph8rb22mk.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph8rb22mk.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph8rb22mk.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph8rb22mk.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmph8rb22mk.rs:20:7\n   |\n20 |       result[i] = n + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmph8rb22mk.rs:22:7\n   |\n22 |       result[i] = n\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let levels = Vec::new(n);\n  let stones = Vec::new(n);\n  let level = 0;\n  let stones_left = n;\n  for i in 0..n {\n    if stones_left == 0 {\n      level += 1;\n      stones_left = stones_left + 1;\n    } else {\n      stones_left -= 1;\n      stones[level] += 1;\n    }\n  }\n  levels[0] = stones[0];\n  for i in 1..n {\n    levels[i] = stones[i] + levels[i - 1];\n  }\n  return levels;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8q21_a9p.rs:12:16\n    |\n12  |   let levels = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp8q21_a9p.rs:13:16\n    |\n13  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp8q21_a9p.rs:27:5\n   |\n27 |     levels[i] = stones[i] + levels[i - 1];\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp8q21_a9p.rs:27:17\n   |\n27 |     levels[i] = stones[i] + levels[i - 1];\n   |                 ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp8q21_a9p.rs:27:29\n   |\n27 |     levels[i] = stones[i] + levels[i - 1];\n   |                             ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let level_counts = Vec::new(n + 1);\n  let level = 1;\n  for level in 1 .. n {\n    let stones = level;\n    if level % 2 == 0 {\n      stones = stones + 1;\n    }\n    level_counts[level] = stones;\n  }\n  level_counts\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3x70g5pm.rs:12:22\n    |\n12  |   let level_counts = Vec::new(n + 1);\n    |                      ^^^^^^^^ ----- supplied 1 argument\n    |                      |\n    |                      expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp3x70g5pm.rs:19:5\n   |\n19 |     level_counts[level] = stones;\n   |     ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let result = Vec::new();\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let level = 1;\n  let stones = odd ? n : n / 2;\n  while (level < n) {\n    result.push_back(stones);\n    stones = stones + odd ? stones + 1 : stones + 2;\n    level += 1;\n  }\n  result.push_back(stones);\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `n`\n  --> /tmp/tmp9d_es8g1.rs:16:22\n   |\n16 |   let stones = odd ? n : n / 2;\n   |                      ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  let i = 0\n  while i < n {\n    if odd {\n      result[i] = n + 1\n      i += 1\n    } else if even {\n      result[i] = n\n      i += 2\n    } else {\n      result[i] = n\n      i += 1\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprs312wgi.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprs312wgi.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprs312wgi.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmprs312wgi.rs:18:12\n   |\n18 |   let i = 0\n   |            ^ help: add `;` here\n19 |   while i < n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmprs312wgi.rs:21:24\n   |\n21 |       result[i] = n + 1\n   |                        ^ help: add `;` here\n22 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmprs312wgi.rs:24:20\n   |\n24 |       result[i] = n\n   |                    ^ help: add `;` here\n25 |       i += 2\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmprs312wgi.rs:27:20\n   |\n27 |       result[i] = n\n   |                    ^ help: add `;` here\n28 |       i += 1\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprs312wgi.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprs312wgi.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprs312wgi.rs:20:8\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `even`\n  --> /tmp/tmp_1ho5w2r.rs:16:47\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                                              -^^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n   |                                              |\n   |                                              help: missing `,`\n\nerror[E0573]: expected type, found local variable `odd`\n  --> /tmp/tmp_1ho5w2r.rs:16:54\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                                                      ^^^ expecting a type here because of type ascription\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_1ho5w2r.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp_1ho5w2r.rs:16:5\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp_1ho5w2r.rs:16:17\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                 ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmp_1ho5w2r.rs:16:43\n   |\n16",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = odd ? n + 1 : n\n  let result = Vec::new(n)\n  for i in 0..n {\n    result[i] = stones\n    stones = stones - 1\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprycniqzu.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprycniqzu.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = odd ? n + 1 : n\n   |   --- unexpected token\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found `n`\n  --> /tmp/tmprycniqzu.rs:17:22\n   |\n17 |   let stones = odd ? n + 1 : n\n   |                      ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprycniqzu.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpns9rnxap.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpns9rnxap.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpns9rnxap.rs:17:31\n   |\n17 |     return make_a_pile(n / 2) + make_a_pile(n / 2)\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpns9rnxap.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + make_a_pile(n / 2 + 1)\n   |            ------------------ ^ ---------------------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    let stones = i + 1\n    if odd {\n      stones = stones + 1\n    }\n    if even {\n      stones = stones + 1\n    }\n    result = result.push(stones)\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsh4vf6z3.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsh4vf6z3.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpsh4vf6z3.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpsh4vf6z3.rs:19:23\n   |\n19 |     let stones = i + 1\n   |                       ^ help: add `;` here\n20 |     if odd {\n   |     -- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsh4vf6z3.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsh4vf6z3.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsh4vf6z3.rs:20:8\n   |\n20 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsh4vf6z3.rs:26:14\n   |\n17 |   let result = Vec::new(n)\n   |                ----------- expected due to this value\n...\n26 |     result = result.push(stones)\n   |              ^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an er",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      result[i] = i + 1\n    } else if i % 2 == even {\n      result[i] = i + 2\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_32yzl3n.rs:18:18\n   |\n18 |   let odd = n % 2\n   |                  ^ help: add `;` here\n19 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_32yzl3n.rs:19:24\n   |\n19 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n20 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_32yzl3n.rs:20:27\n   |\n20 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n21 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_32yzl3n.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_32yzl3n.rs:16:12\n    |\n16  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_32yzl3n.rs:20:16\n    |\n20  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp_32yzl3n.rs:23:7\n   |\n23 |       result[i] = i + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_32yzl3n.rs:24:24\n   |\n24 |     } else if i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones = stones.push_back(odd + i);\n    stones = stones.push_back(even + i);\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cksrlow.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cksrlow.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp9cksrlow.rs:19:21\n   |\n19 |     stones = stones.push_back(odd + i);\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp9cksrlow.rs:20:21\n   |\n20 |     stones = stones.push_back(even + i);\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0369]: cannot add `isize` to `bool`\n  --> /tmp/tmp9cksrlow.rs:20:36\n   |\n20 |     stones = stones.push_back(even + i);\n   |                               ---- ^ - isize\n   |                               |\n   |                               bool\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = odd ? n + 1 : n;\n  let levels = Vec::new(n);\n  for i in 0..n {\n    levels[i] = stones;\n    stones = stones + (i + 1) * (odd ? 1 : 2);\n  }\n  return levels;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `n`\n  --> /tmp/tmpt4wz5msa.rs:17:22\n   |\n17 |   let stones = odd ? n + 1 : n;\n   |                      ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpt4wz5msa.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let stones = Vec::new(n);\n  let odd = n % 2;\n  let even = n - odd;\n  let level = 0;\n  for i in 0..n {\n    if i % 2 == odd {\n      stones[level] += 1;\n    } else {\n      stones[level] += 2;\n    }\n    level += 1;\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsq2qndkp.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsq2qndkp.rs:15:16\n    |\n15  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n - odd;\n  let result = Vec::new(n);\n  for i in 0..n {\n    result[i] = odd + i;\n  }\n  for i in 0..n - 1 {\n    result[i] += 2 * (i + 1);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqivb_1f0.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqivb_1f0.rs:17:16\n    |\n17  |   let result = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpqivb_1f0.rs:19:5\n   |\n19 |     result[i] = odd + i;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpqivb_1f0.rs:22:5\n   |\n22 |     result[i] += 2 * (i + 1);\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    result[i] = (odd and i + 1) or (even and i + 2)\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4vqbyw1r.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4vqbyw1r.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp4vqbyw1r.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmp4vqbyw1r.rs:19:22\n   |\n19 |     result[i] = (odd and i + 1) or (even and i + 2)\n   |                      ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror: `or` is not a logical operator\n  --> /tmp/tmp4vqbyw1r.rs:19:33\n   |\n19 |     result[i] = (odd and i + 1) or (even and i + 2)\n   |                                 ^^ help: use `||` to perform logical disjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror: `and` is not a logical operator\n  --> /tmp/tmp4vqbyw1r.rs:19:42\n   |\n19 |     result[i] = (odd and i + 1) or (even and i + 2)\n   |                                          ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp4vqbyw1r.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp4vqbyw1r.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - suppli",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones = stones.push_back(odd + i);\n    stones = stones.push_back(even + i);\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpi7i_h7_g.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpi7i_h7_g.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpi7i_h7_g.rs:19:21\n   |\n19 |     stones = stones.push_back(odd + i);\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpi7i_h7_g.rs:20:21\n   |\n20 |     stones = stones.push_back(even + i);\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0369]: cannot add `isize` to `bool`\n  --> /tmp/tmpi7i_h7_g.rs:20:36\n   |\n20 |     stones = stones.push_back(even + i);\n   |                               ---- ^ - isize\n   |                               |\n   |                               bool\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0369, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n / 2;\n  let result = Vec::new(n + 1);\n  for i in 0..n {\n    if i % 2 == n_odd {\n      result[i + 1] = i + 1;\n    } else if i % 2 == n_even {\n      result[i + 1] = i + 2;\n    } else {\n      result[i + 1] = i + 1;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpspked57l.rs:14:16\n    |\n14  |   let result = Vec::new(n + 1);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpspked57l.rs:17:7\n   |\n17 |       result[i + 1] = i + 1;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpspked57l.rs:19:7\n   |\n19 |       result[i + 1] = i + 2;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpspked57l.rs:21:7\n   |\n21 |       result[i + 1] = i + 1;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n);\n  for i in 0..n {\n    if odd {\n      result[i] = n + 1;\n    } else {\n      result[i] = n;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj85pk2rk.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj85pk2rk.rs:17:16\n    |\n17  |   let result = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj85pk2rk.rs:19:8\n   |\n19 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpj85pk2rk.rs:20:7\n   |\n20 |       result[i] = n + 1;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpj85pk2rk.rs:22:7\n   |\n22 |       result[i] = n;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0277, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  let i = 0\n  while i < n {\n    result[i] = odd\n    i += 1\n    if i % 2 == 0 {\n      i += 1\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpuiei7rn4.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuiei7rn4.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuiei7rn4.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpuiei7rn4.rs:18:12\n   |\n18 |   let i = 0\n   |            ^ help: add `;` here\n19 |   while i < n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpuiei7rn4.rs:20:20\n   |\n20 |     result[i] = odd\n   |                    ^ help: add `;` here\n21 |     i += 1\n   |     - unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpuiei7rn4.rs:21:11\n   |\n21 |     i += 1\n   |           ^ help: add `;` here\n22 |     if i % 2 == 0 {\n   |     -- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpuiei7rn4.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpuiei7rn4.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpuiei7rn4.rs:20:5\n   |\n20 |     result[i] = odd\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let result = Vec::new();\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let level = 0;\n  let stones = 0;\n  for i in 0..n {\n    if odd {\n      stones = stones + 1;\n      result = result.push_back(stones);\n    } else {\n      stones = stones + 2;\n      result = result.push_back(stones);\n    }\n    if even {\n      level = level + 1;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp06yebkl8.rs:18:8\n   |\n18 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp06yebkl8.rs:20:23\n   |\n20 |       result = result.push_back(stones);\n   |                       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp06yebkl8.rs:23:23\n   |\n23 |       result = result.push_back(stones);\n   |                       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if odd {\n      result[i] = i + 1\n    } else if even {\n      result[i] = i + 2\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpm0yvr71a.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpm0yvr71a.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpm0yvr71a.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm0yvr71a.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm0yvr71a.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpm0yvr71a.rs:20:7\n   |\n20 |       result[i] = i + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpm0yvr71a.rs:22:7\n   |\n22 |       result[i] = i + 2\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n / 2;\n  let result = Vec::new(n + 1);\n  for i in 0..n {\n    if i % 2 == n_odd {\n      result[i + 1] = i + 1;\n    } else {\n      result[i + 1] = i + 2;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpy6hbmnvd.rs:14:16\n    |\n14  |   let result = Vec::new(n + 1);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpy6hbmnvd.rs:17:7\n   |\n17 |       result[i + 1] = i + 1;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpy6hbmnvd.rs:19:7\n   |\n19 |       result[i + 1] = i + 2;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n - odd;\n  let result = Vec::new(odd + even);\n  for i in 0..odd {\n    result[i] = n;\n  }\n  for i in odd..even {\n    result[i] = n + 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu5nyzmfg.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu5nyzmfg.rs:17:16\n    |\n17  |   let result = Vec::new(odd + even);\n    |                ^^^^^^^^ ---------- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpu5nyzmfg.rs:19:5\n   |\n19 |     result[i] = n;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpu5nyzmfg.rs:22:5\n   |\n22 |     result[i] = n + 1;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + Vec::new(1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:19:33\n    |\n19  |     return make_a_pile(n / 2) + Vec::new(1)\n    |                                 ^^^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<isize>`\n  --> /tmp/tmpz8uqbvv3.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + Vec::new(1)\n   |            ------------------ ^ ----------- Vec<_>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let result = Vec::new(n);\n  let i = 1;\n  let odd = 1;\n  let even = 1;\n  let sum = 0;\n  while (i <= n) {\n    if (i % 2 == 0) {\n      sum += even;\n      even += 2;\n    } else {\n      sum += odd;\n      odd += 2;\n    }\n    i += 1;\n  }\n  result.store(sum);\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpdjiaqkcr.rs:17:9\n   |\n17 |   while (i <= n) {\n   |         ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -   while (i <= n) {\n17 +   while i <= n {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdjiaqkcr.rs:18:8\n   |\n18 |     if (i % 2 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n18 -     if (i % 2 == 0) {\n18 +     if i % 2 == 0 {\n   | \n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpdjiaqkcr.rs:12:16\n    |\n12  |   let result = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `store` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpdjiaqkcr.rs:27:10\n   |\n27 |   result.store(sum);\n   |          ^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  let level = Vec::new(n);\n  for i in 0..n {\n    if i % 2 == odd {\n      stones = stones.push(i + 1);\n    } else if i % 2 == even {\n      stones = stones.push(i + 2);\n    } else {\n      level = level.push(i + 1);\n    }\n  }\n  return stones.concat(level);\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpv_plwhwz.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpv_plwhwz.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpv_plwhwz.rs:18:15\n    |\n18  |   let level = Vec::new(n);\n    |               ^^^^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv_plwhwz.rs:21:16\n   |\n17 |   let stones = Vec::new(n);\n   |                ----------- expected due to this value\n...\n21 |       stones = stones.push(i + 1);\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv_plwhwz.rs:22:24\n   |\n22 |     } else if i % 2 == even {\n   |                        ^^^^ expected `isize`, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv_plwhwz.rs:23:16\n   |\n17 |   let stones = Vec::new(n);\n   |                ----------- expected due to this value\n...\n23 |       stones = stones.push(i + 2);\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmpv_plwhwz.rs:23:23\n   |\n23 |       stones = stones.push(i + 2);\n   |                ------ ^^^^ this call modifies `stones` in-place\n   |                |\n   |                you probably want to u",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n - odd;\n  let result = Vec::new(odd + even);\n  for i in 0..odd {\n    result[i] = n;\n  }\n  for i in odd..even {\n    result[i] = n + 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpes6jeahj.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpes6jeahj.rs:17:16\n    |\n17  |   let result = Vec::new(odd + even);\n    |                ^^^^^^^^ ---------- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpes6jeahj.rs:19:5\n   |\n19 |     result[i] = n;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpes6jeahj.rs:22:5\n   |\n22 |     result[i] = n + 1;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    stones = stones.push_back(odd + stones.pop_back())\n    stones = stones.push_back(even + stones.pop_back())\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6kizmkj9.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6kizmkj9.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp6kizmkj9.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `stones`\n  --> /tmp/tmp6kizmkj9.rs:19:55\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back())\n   |                                                       ^ help: add `;` here\n20 |     stones = stones.push_back(even + stones.pop_back())\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6kizmkj9.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6kizmkj9.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp6kizmkj9.rs:19:21\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back())\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp6kizmkj9.rs:19:44\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back())\n   |                                            ^^^^^^^^ method not f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let result = Vec::new(n);\n  for i in 0..n {\n    result[i] = i + 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvg9k8xa0.rs:12:16\n    |\n12  |   let result = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpvg9k8xa0.rs:14:5\n   |\n14 |     result[i] = i + 1;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let result = Vec::new();\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  for i in 0..n {\n    if odd {\n      result.push_back(i + 1);\n      odd = false;\n    } else if even {\n      result.push_back(i + 2);\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpogql58k1.rs:16:8\n   |\n16 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpogql58k1.rs:17:14\n   |\n17 |       result.push_back(i + 1);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpogql58k1.rs:18:13\n   |\n13 |   let odd = n % 2;\n   |             ----- expected due to this value\n...\n18 |       odd = false;\n   |             ^^^^^ expected `isize`, found `bool`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpogql58k1.rs:20:14\n   |\n20 |       result.push_back(i + 2);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2;\n  let even_n = n / 2;\n  let result = Vec::new(odd_n + even_n);\n  for i in 0..odd_n {\n    result[i] = odd_n + even_n;\n  }\n  for i in odd_n..even_n {\n    result[i] = even_n + odd_n;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp104ebenb.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp104ebenb.rs:17:16\n    |\n17  |   let result = Vec::new(odd_n + even_n);\n    |                ^^^^^^^^ -------------- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp104ebenb.rs:19:5\n   |\n19 |     result[i] = odd_n + even_n;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp104ebenb.rs:22:5\n   |\n22 |     result[i] = even_n + odd_n;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  let i = 0\n  let j = 0\n  while i < n {\n    if j == 0 {\n      result[i] = odd\n      i += 1\n      j += 1\n    } else if j == 1 {\n      result[i] = even\n      i += 1\n      j += 1\n    } else {\n      result[i] = odd\n      i += 1\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp24mq7soq.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp24mq7soq.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp24mq7soq.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp24mq7soq.rs:18:12\n   |\n18 |   let i = 0\n   |            ^ help: add `;` here\n19 |   let j = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp24mq7soq.rs:19:12\n   |\n19 |   let j = 0\n   |            ^ help: add `;` here\n20 |   while i < n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp24mq7soq.rs:22:22\n   |\n22 |       result[i] = odd\n   |                      ^ help: add `;` here\n23 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmp24mq7soq.rs:23:13\n   |\n23 |       i += 1\n   |             ^ help: add `;` here\n24 |       j += 1\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp24mq7soq.rs:26:23\n   |\n26 |       result[i] = even\n   |                       ^ help: add `;` here\n27 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmp24mq7soq.rs:27:13\n   |\n27 |       i += 1\n   |             ^ help: add `;` here\n28 |       j += 1\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp24mq7soq.rs:30:22\n   |\n30 |       result[i] = odd\n   |                      ^ help: add `;` here\n31 |       i += 1\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp24mq7soq.rs:13:12\n    |\n13  |     return Vec::n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let n_odd = n % 2\n  let n_even = n_odd + n\n  let n_odd_stones = make_a_pile(n_odd)\n  let n_even_stones = make_a_pile(n_even)\n  let n_stones = Vec::new(n_odd_stones.len + n_even_stones.len)\n  n_stones.copy_from_slice(n_odd_stones)\n  n_stones.copy_from_slice(n_even_stones)\n  return n_stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqqbyk924.rs:15:20\n   |\n15 |   let n_odd = n % 2\n   |                    ^ help: add `;` here\n16 |   let n_even = n_odd + n\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqqbyk924.rs:16:25\n   |\n16 |   let n_even = n_odd + n\n   |                         ^ help: add `;` here\n17 |   let n_odd_stones = make_a_pile(n_odd)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqqbyk924.rs:17:40\n   |\n17 |   let n_odd_stones = make_a_pile(n_odd)\n   |                                        ^ help: add `;` here\n18 |   let n_even_stones = make_a_pile(n_even)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqqbyk924.rs:18:42\n   |\n18 |   let n_even_stones = make_a_pile(n_even)\n   |                                          ^ help: add `;` here\n19 |   let n_stones = Vec::new(n_odd_stones.len + n_even_stones.len)\n   |   --- unexpected token\n\nerror: expected `;`, found `n_stones`\n  --> /tmp/tmpqqbyk924.rs:19:64\n   |\n19 |   let n_stones = Vec::new(n_odd_stones.len + n_even_stones.len)\n   |                                                                ^ help: add `;` here\n20 |   n_stones.copy_from_slice(n_odd_stones)\n   |   -------- unexpected token\n\nerror: expected `;`, found `n_stones`\n  --> /tmp/tmpqqbyk924.rs:20:41\n   |\n20 |   n_stones.copy_from_slice(n_odd_stones)\n   |                                         ^ help: add `;` here\n21 |   n_stones.copy_from_slice(n_even_stones)\n   |   -------- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpqqbyk924.rs:21:42\n   |\n21 |   n_stones.copy_from_slice(n_even_stones)\n   |                                          ^ help: add `;` here\n22 |   return n_stones\n   |   ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqqbyk924.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let levels = Vec::new(n);\n  let stones = Vec::new(n);\n  let i = 0;\n  for level in levels {\n    let stones_in_level = stones.len();\n    if stones_in_level == 0 {\n      stones_in_level = stones.len() + 1;\n    }\n    stones = stones.concat(stones_in_level);\n    i += 1;\n  }\n  return levels;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpl2_lvfg9.rs:12:16\n    |\n12  |   let levels = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpl2_lvfg9.rs:13:16\n    |\n13  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpl2_lvfg9.rs:20:21\n    |\n20  |     stones = stones.concat(stones_in_level);\n    |                     ^^^^^^ --------------- supplied 1 argument\n    |                     |\n    |                     expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2 == 1\n  let even_n = n % 2 == 0\n  let odd_n_stones = n\n  let even_n_stones = n\n  let stones_per_level = Vec::new(n)\n  for i in 0..n {\n    if odd_n {\n      stones_per_level[i] = odd_n_stones\n      odd_n_stones = odd_n_stones + odd_n_stones + 1\n    } else {\n      stones_per_level[i] = even_n_stones\n      even_n_stones = even_n_stones + even_n_stones + 1\n    }\n  }\n  return stones_per_level\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpritfid1o.rs:15:25\n   |\n15 |   let odd_n = n % 2 == 1\n   |                         ^ help: add `;` here\n16 |   let even_n = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpritfid1o.rs:16:26\n   |\n16 |   let even_n = n % 2 == 0\n   |                          ^ help: add `;` here\n17 |   let odd_n_stones = n\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpritfid1o.rs:17:23\n   |\n17 |   let odd_n_stones = n\n   |                       ^ help: add `;` here\n18 |   let even_n_stones = n\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpritfid1o.rs:18:24\n   |\n18 |   let even_n_stones = n\n   |                        ^ help: add `;` here\n19 |   let stones_per_level = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpritfid1o.rs:19:37\n   |\n19 |   let stones_per_level = Vec::new(n)\n   |                                     ^ help: add `;` here\n20 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `odd_n_stones`\n  --> /tmp/tmpritfid1o.rs:22:41\n   |\n22 |       stones_per_level[i] = odd_n_stones\n   |                                         ^ help: add `;` here\n23 |       odd_n_stones = odd_n_stones + odd_n_stones + 1\n   |       ------------ unexpected token\n\nerror: expected `;`, found `even_n_stones`\n  --> /tmp/tmpritfid1o.rs:25:42\n   |\n25 |       stones_per_level[i] = even_n_stones\n   |                                          ^ help: add `;` here\n26 |       even_n_stones = even_n_stones + even_n_stones + 1\n   |       ------------- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpritfid1o.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argume",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let level = Vec::new(n);\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  for i in 0..n {\n    level[i] = odd ? i + 1 : i;\n    odd = !odd;\n    if (even) {\n      even = false;\n    } else {\n      even = true;\n    }\n  }\n  return level;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `i`\n  --> /tmp/tmpf9p0amin.rs:16:22\n   |\n16 |     level[i] = odd ? i + 1 : i;\n   |                      ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpf9p0amin.rs:12:15\n    |\n12  |   let level = Vec::new(n);\n    |               ^^^^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  let i = 0\n  let j = 0\n  let k = 0\n  while i < n {\n    if i % 2 == odd {\n      result[i] = k\n      k += 1\n    } else {\n      result[i] = j\n      j += 2\n    }\n    i += 1\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbhljtaoj.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbhljtaoj.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbhljtaoj.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbhljtaoj.rs:18:12\n   |\n18 |   let i = 0\n   |            ^ help: add `;` here\n19 |   let j = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbhljtaoj.rs:19:12\n   |\n19 |   let j = 0\n   |            ^ help: add `;` here\n20 |   let k = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpbhljtaoj.rs:20:12\n   |\n20 |   let k = 0\n   |            ^ help: add `;` here\n21 |   while i < n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `k`\n  --> /tmp/tmpbhljtaoj.rs:23:20\n   |\n23 |       result[i] = k\n   |                    ^ help: add `;` here\n24 |       k += 1\n   |       - unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpbhljtaoj.rs:26:20\n   |\n26 |       result[i] = j\n   |                    ^ help: add `;` here\n27 |       j += 2\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbhljtaoj.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbhljtaoj.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + 1\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj_ci6hbf.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpj_ci6hbf.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `{integer}` to `Vec<isize>`\n  --> /tmp/tmpj_ci6hbf.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + 1\n   |            ------------------ ^ - {integer}\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  let i = 0\n  while i < n {\n    if odd {\n      result[i] = n + 1\n      i += 2\n    } else if even {\n      result[i] = n\n      i += 2\n    } else {\n      result[i] = n\n      i += 1\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy1hviyor.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy1hviyor.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy1hviyor.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpy1hviyor.rs:18:12\n   |\n18 |   let i = 0\n   |            ^ help: add `;` here\n19 |   while i < n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpy1hviyor.rs:21:24\n   |\n21 |       result[i] = n + 1\n   |                        ^ help: add `;` here\n22 |       i += 2\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpy1hviyor.rs:24:20\n   |\n24 |       result[i] = n\n   |                    ^ help: add `;` here\n25 |       i += 2\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpy1hviyor.rs:27:20\n   |\n27 |       result[i] = n\n   |                    ^ help: add `;` here\n28 |       i += 1\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpy1hviyor.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpy1hviyor.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy1hviyor.rs:20:8\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let result = Vec::new();\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  for i in 0..n {\n    if odd {\n      result.push_back(i + 1);\n    } else if even {\n      result.push_back(i + 2);\n    } else {\n      result.push_back(i + 3);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpb1kivzrl.rs:16:8\n   |\n16 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpb1kivzrl.rs:17:14\n   |\n17 |       result.push_back(i + 1);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpb1kivzrl.rs:19:14\n   |\n19 |       result.push_back(i + 2);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpb1kivzrl.rs:21:14\n   |\n21 |       result.push_back(i + 3);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let next_odd = n % 2 + 1\n  let next_even = n % 2\n  let result = Vec::new(n)\n  for i in 0..n {\n    result[i] = next_odd if i % 2 == 1 else next_even\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph3vb5o7o.rs:15:27\n   |\n15 |   let next_odd = n % 2 + 1\n   |                           ^ help: add `;` here\n16 |   let next_even = n % 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph3vb5o7o.rs:16:24\n   |\n16 |   let next_even = n % 2\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph3vb5o7o.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmph3vb5o7o.rs:19:26\n   |\n19 |     result[i] = next_odd if i % 2 == 1 else next_even\n   |                          ^^ expected one of 8 possible tokens\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph3vb5o7o.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph3vb5o7o.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let level = n\n  let stones = Vec::new(level)\n  for i in 0..level {\n    if i % 2 == 0 {\n      stones = stones.concat(Vec::new(level - i))\n    } else {\n      stones = stones.concat(Vec::new(i))\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3ovzm3dm.rs:15:16\n   |\n15 |   let level = n\n   |                ^ help: add `;` here\n16 |   let stones = Vec::new(level)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp3ovzm3dm.rs:16:31\n   |\n16 |   let stones = Vec::new(level)\n   |                               ^ help: add `;` here\n17 |   for i in 0..level {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3ovzm3dm.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3ovzm3dm.rs:16:16\n    |\n16  |   let stones = Vec::new(level)\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3ovzm3dm.rs:19:30\n    |\n19  |       stones = stones.concat(Vec::new(level - i))\n    |                              ^^^^^^^^ --------- supplied 1 argument\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3ovzm3dm.rs:19:23\n    |\n19  |       stones = stones.concat(Vec::new(level - i))\n    |                       ^^^^^^ ------------------- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3ovzm3dm.rs:21:30\n    |\n21  |       stones = stones.concat(Vec::new(i))\n    |                              ^^^^^^^^ - supplied 1 argument\n    |                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n / 2;\n  let result = [n_odd, n_even];\n  for i in 0..n_odd {\n    result = [result[0] + 1, result[1] + 1];\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpl1bt4tjr.rs:18:10\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                             ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_vec()`\n   |          |\n   |          expected struct `Vec`, found array `[isize; 2]`\n   |\n   = note: expected struct `Vec<isize>`\n               found array `[isize; 2]`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 1 {\n    return Vec::new(n + 1)\n  } else {\n    return Vec::new(n)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:17:12\n    |\n17  |     return Vec::new(n + 1)\n    |            ^^^^^^^^ ----- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:19:12\n    |\n19  |     return Vec::new(n)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else {\n    let odd = n % 2\n    let even = n - odd\n    let result = Vec::new(odd + even)\n    for i in 0..odd {\n      result[i] = odd + i\n    }\n    for i in odd..even {\n      result[i] = even + i\n    }\n    return result\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpg7c4aqgs.rs:17:20\n   |\n17 |     let odd = n % 2\n   |                    ^ help: add `;` here\n18 |     let even = n - odd\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpg7c4aqgs.rs:18:23\n   |\n18 |     let even = n - odd\n   |                       ^ help: add `;` here\n19 |     let result = Vec::new(odd + even)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpg7c4aqgs.rs:19:38\n   |\n19 |     let result = Vec::new(odd + even)\n   |                                      ^ help: add `;` here\n20 |     for i in 0..odd {\n   |     --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpg7c4aqgs.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpg7c4aqgs.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpg7c4aqgs.rs:19:18\n    |\n19  |     let result = Vec::new(odd + even)\n    |                  ^^^^^^^^ ---------- supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpg7c4aqgs.rs:21:7\n   |\n21 |       result[i] = odd + i\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: th",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 1 {\n    return Vec::new(n + 1)\n  } else {\n    return Vec::new(n)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:17:12\n    |\n17  |     return Vec::new(n + 1)\n    |            ^^^^^^^^ ----- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:19:12\n    |\n19  |     return Vec::new(n)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let levels = Vec::new();\n  let stones = Vec::new();\n  for i in 0..n {\n    if i % 2 == 0 {\n      stones = stones.push(i * 2);\n    } else {\n      stones = stones.push(i * 2 + 1);\n    }\n    levels = levels.push(stones);\n  }\n  levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp3ne2ey3y.rs:16:16\n   |\n13 |   let stones = Vec::new();\n   |                ---------- expected due to this value\n...\n16 |       stones = stones.push(i * 2);\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ne2ey3y.rs:18:16\n   |\n13 |   let stones = Vec::new();\n   |                ---------- expected due to this value\n...\n18 |       stones = stones.push(i * 2 + 1);\n   |                ^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmp3ne2ey3y.rs:18:23\n   |\n18 |       stones = stones.push(i * 2 + 1);\n   |                ------ ^^^^ this call modifies `stones` in-place\n   |                |\n   |                you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `push`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ne2ey3y.rs:20:14\n   |\n12 |   let levels = Vec::new();\n   |                ---------- expected due to this value\n...\n20 |     levels = levels.push(stones);\n   |              ^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<Vec<isize>>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ne2ey3y.rs:22:3\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                             ---------- expected `Vec<isize>` because of return type\n...\n22 |   levels\n   |   ^^^^^^ expected `isize`, found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Vec<isize>>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1;\n  let even = n % 2 == 0;\n  let result = Vec::new(n);\n  for i in 0..n {\n    result[i] = odd ? (i + 1) : (i + 2);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `2`\n  --> /tmp/tmpkvje4kju.rs:19:38\n   |\n19 |     result[i] = odd ? (i + 1) : (i + 2);\n   |                               -      ^ expected one of 9 possible tokens\n   |                               |\n   |                               tried to parse a type due to this\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n % 2;\n  let result = Vec::new(n + 1);\n  for i in 0..n {\n    result[i + 1] = (i + 1) * (i + 1);\n  }\n  if n_odd {\n    result[n] = (n + 1) * (n + 1);\n  } else {\n    result[n] = (n + 1) * (n + 2);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpye00pd3p.rs:14:16\n    |\n14  |   let result = Vec::new(n + 1);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpye00pd3p.rs:16:5\n   |\n16 |     result[i + 1] = (i + 1) * (i + 1);\n   |     ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpye00pd3p.rs:18:6\n   |\n18 |   if n_odd {\n   |      ^^^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpye00pd3p.rs:19:5\n   |\n19 |     result[n] = (n + 1) * (n + 1);\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpye00pd3p.rs:21:5\n   |\n21 |     result[n] = (n + 1) * (n + 2);\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0277, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let level = n\n  let stones = Vec::new(level)\n  let odd = level % 2\n  let even = level % 2 == 0\n  for i in 0..level {\n    if odd {\n      stones = stones.concat(Vec::new(level + 1))\n    } else if even {\n      stones = stones.concat(Vec::new(level))\n    }\n    odd = !odd\n    even = !even\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpp9mm6o3e.rs:15:16\n   |\n15 |   let level = n\n   |                ^ help: add `;` here\n16 |   let stones = Vec::new(level)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp9mm6o3e.rs:16:31\n   |\n16 |   let stones = Vec::new(level)\n   |                               ^ help: add `;` here\n17 |   let odd = level % 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp9mm6o3e.rs:17:22\n   |\n17 |   let odd = level % 2\n   |                      ^ help: add `;` here\n18 |   let even = level % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpp9mm6o3e.rs:18:28\n   |\n18 |   let even = level % 2 == 0\n   |                            ^ help: add `;` here\n19 |   for i in 0..level {\n   |   --- unexpected token\n\nerror: expected `;`, found `even`\n  --> /tmp/tmpp9mm6o3e.rs:25:15\n   |\n25 |     odd = !odd\n   |               ^ help: add `;` here\n26 |     even = !even\n   |     ---- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpp9mm6o3e.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpp9mm6o3e.rs:16:16\n    |\n16  |   let stones = Vec::new(level)\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp9mm6o3e.rs:20:8\n   |\n20 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpp9mm6o3e.rs:21:30\n    |\n21  |       stones = stones.concat(Vec::new(level + 1))\n    |                              ^^^^^^^^ --------- supplied 1 argument\n    |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 1 {\n    return Vec::new(n + 1)\n  } else {\n    return Vec::new(n)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:17:12\n    |\n17  |     return Vec::new(n + 1)\n    |            ^^^^^^^^ ----- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:19:12\n    |\n19  |     return Vec::new(n)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    if (i % 2) {\n      stones[i] = stones[i - 1] + 1;\n    } else {\n      stones[i] = stones[i - 1];\n    }\n  }\n  if (odd) {\n    stones[n] = stones[n - 1] + 1;\n  } else {\n    stones[n] = stones[n - 1];\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpis8_ffez.rs:16:8\n   |\n16 |     if (i % 2) {\n   |        ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i % 2) {\n16 +     if i % 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpis8_ffez.rs:22:6\n   |\n22 |   if (odd) {\n   |      ^   ^\n   |\nhelp: remove these parentheses\n   |\n22 -   if (odd) {\n22 +   if odd {\n   | \n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpis8_ffez.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpis8_ffez.rs:16:8\n   |\n16 |     if (i % 2) {\n   |        ^^^^^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpis8_ffez.rs:17:7\n   |\n17 |       stones[i] = stones[i - 1] + 1;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpis8_ffez.rs:17:19\n   |\n17 |       stones[i] = stones[i - 1] + 1;\n   |                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpis8_ffez.rs:19:7\n   |\n19 |       stones[i] = stones[i - 1];\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n + 1);\n  for i in 0..n {\n    if odd {\n      result[i + 1] = i + 2;\n    } else if even {\n      result[i + 1] = i + 1;\n    } else {\n      result[i + 1] = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpae6_ikl9.rs:14:16\n    |\n14  |   let result = Vec::new(n + 1);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpae6_ikl9.rs:16:8\n   |\n16 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpae6_ikl9.rs:17:7\n   |\n17 |       result[i + 1] = i + 2;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpae6_ikl9.rs:19:7\n   |\n19 |       result[i + 1] = i + 1;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpae6_ikl9.rs:21:7\n   |\n21 |       result[i + 1] = i;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0277, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = odd ? n + 1 : n\n  let levels = Vec::new(n)\n  for i in 0..n {\n    levels[i] = stones\n    stones = stones + odd\n    stones = stones + even\n  }\n  return levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvn0vucac.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpvn0vucac.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = odd ? n + 1 : n\n   |   --- unexpected token\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found `n`\n  --> /tmp/tmpvn0vucac.rs:17:22\n   |\n17 |   let stones = odd ? n + 1 : n\n   |                      ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvn0vucac.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    let stones = i + 1\n    if stones % 2 == odd {\n      stones += 1\n    }\n    result[i] = stones\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyca4gu7r.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpyca4gu7r.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyca4gu7r.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyca4gu7r.rs:19:23\n   |\n19 |     let stones = i + 1\n   |                       ^ help: add `;` here\n20 |     if stones % 2 == odd {\n   |     -- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpyca4gu7r.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpyca4gu7r.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpyca4gu7r.rs:23:5\n   |\n23 |     result[i] = stones\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let level_counts = Vec::new(n);\n  let level_counts_iter = level_counts.iter();\n  let level_counts_next = level_counts_iter.next();\n  let level_counts_next_next = level_counts_iter.next();\n  let level_counts_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next_next_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next_next_next_next = level_counts_iter.next();\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next_next_next_\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp0zxkfyr3.rs:28:85\n   |\n28 |   let level_counts_next_next_next_next_next_next_next_next_next_next_next_next_next_\n   |                                                                                     ^ help: add `;` here\n29 | }\n   | - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp0zxkfyr3.rs:12:22\n    |\n12  |   let level_counts = Vec::new(n);\n    |                      ^^^^^^^^ - supplied 1 argument\n    |                      |\n    |                      expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0zxkfyr3.rs:11:29\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |    -----------              ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  let level = Vec::new(n)\n  let level_size = Vec::new(n)\n  let level_index = 0\n  let level_size_index = 0\n  let level_size_next = 0\n  let level_size_next_index = 0\n  let level_size_next_next = 0\n  let level_size_next_next_index = 0\n  let level_size_next_next_next = 0\n  let level_size_next_next_next_index = 0\n  let level_size_next_next_next_next = 0\n  let level_size_next_next_next_next_index = 0\n  let level_size_next_next_next_next_next = 0\n  let level_size_next_next_next_next_next_index = 0\n  let level_size_next_next_next_next_next_next = 0\n  let level_size_next_next_next_next_next_next_index = 0\n  let level_size_next_next_next_next_next_next_next = 0\n  let level_size_next_next_next_next_next_next_next_index = 0\n  let level_size_next_next_next_next_next_next_next_next = 0\n  let level_size_next_next_next_next_next_next_next_next_index = 0\n  let level_size_next_next_next_next_next_next_next_next_next = 0\n  let level_size_next_next_next_next_next_next_next_next_next_index = 0\n  let level_size_next_next_next_next_next_next_next_next_next_next = 0\n  let level_size_next_next_next_next_next_next_next_next_next_next_index = 0\n  let level_size_next_next_next_next_next_next_next_\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu4z49abe.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu4z49abe.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu4z49abe.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let level = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu4z49abe.rs:18:26\n   |\n18 |   let level = Vec::new(n)\n   |                          ^ help: add `;` here\n19 |   let level_size = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu4z49abe.rs:19:31\n   |\n19 |   let level_size = Vec::new(n)\n   |                               ^ help: add `;` here\n20 |   let level_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu4z49abe.rs:20:22\n   |\n20 |   let level_index = 0\n   |                      ^ help: add `;` here\n21 |   let level_size_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu4z49abe.rs:21:27\n   |\n21 |   let level_size_index = 0\n   |                           ^ help: add `;` here\n22 |   let level_size_next = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu4z49abe.rs:22:26\n   |\n22 |   let level_size_next = 0\n   |                          ^ help: add `;` here\n23 |   let level_size_next_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu4z49abe.rs:23:32\n   |\n23 |   let level_size_next_index = 0\n   |                                ^ help: add `;` here\n24 |   let level_size_next_next = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    result[i] = (odd && i + 1) + (even && i + 2)\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx3w5a23j.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx3w5a23j.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpx3w5a23j.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx3w5a23j.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx3w5a23j.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx3w5a23j.rs:19:18\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2)\n   |                  ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpx3w5a23j.rs:19:5\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2)\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx3w5a23j.rs:19:25\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2)\n   |                         ^^^^^ expected `bool`, foun",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new();\n  for i in 0..n {\n    if odd {\n      result = result.push(i + 1);\n    } else if even {\n      result = result.push(i + 2);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphk7169ab.rs:16:8\n   |\n16 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphk7169ab.rs:17:16\n   |\n14 |   let result = Vec::new();\n   |                ---------- expected due to this value\n...\n17 |       result = result.push(i + 1);\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphk7169ab.rs:19:16\n   |\n14 |   let result = Vec::new();\n   |                ---------- expected due to this value\n...\n19 |       result = result.push(i + 2);\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmphk7169ab.rs:19:23\n   |\n19 |       result = result.push(i + 2);\n   |                ------ ^^^^ this call modifies `result` in-place\n   |                |\n   |                you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `push`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n % 2;\n  let result = Vec::new(n + 1);\n  for i in 0..n {\n    if i % 2 == n_odd {\n      result[i + 1] = i + 1;\n    } else if i % 2 == n_even {\n      result[i + 1] = i + 2;\n    } else {\n      result[i + 1] = i + 1;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5k7j2b8e.rs:14:16\n    |\n14  |   let result = Vec::new(n + 1);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp5k7j2b8e.rs:17:7\n   |\n17 |       result[i + 1] = i + 1;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp5k7j2b8e.rs:19:7\n   |\n19 |       result[i + 1] = i + 2;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp5k7j2b8e.rs:21:7\n   |\n21 |       result[i + 1] = i + 1;\n   |       ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2;\n  let even_n = n - odd_n;\n  let stones = Vec::new(odd_n + 1);\n  for i in 0..odd_n {\n    stones = stones.push_back(i + 1);\n  }\n  for i in 0..even_n {\n    stones = stones.push_back(i + 1);\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmplfxdp8zt.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmplfxdp8zt.rs:17:16\n    |\n17  |   let stones = Vec::new(odd_n + 1);\n    |                ^^^^^^^^ --------- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmplfxdp8zt.rs:19:21\n   |\n19 |     stones = stones.push_back(i + 1);\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmplfxdp8zt.rs:22:21\n   |\n22 |     stones = stones.push_back(i + 1);\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n - odd;\n  let result = Vec::new(n);\n  for i in 0..n {\n    result[i] = odd + i * 2;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp0bes3_5q.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp0bes3_5q.rs:17:16\n    |\n17  |   let result = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp0bes3_5q.rs:19:5\n   |\n19 |     result[i] = odd + i * 2;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let level = n\n  let stones = Vec::new(level)\n  let next_level = n\n  if n % 2 == 1 {\n    next_level = n + 1\n  } else {\n    next_level = n\n  }\n  for i in 0..level {\n    stones = stones.concat(next_level)\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpecv1iuzw.rs:15:16\n   |\n15 |   let level = n\n   |                ^ help: add `;` here\n16 |   let stones = Vec::new(level)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpecv1iuzw.rs:16:31\n   |\n16 |   let stones = Vec::new(level)\n   |                               ^ help: add `;` here\n17 |   let next_level = n\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpecv1iuzw.rs:17:21\n   |\n17 |   let next_level = n\n   |                     ^ help: add `;` here\n18 |   if n % 2 == 1 {\n   |   -- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpecv1iuzw.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpecv1iuzw.rs:16:16\n    |\n16  |   let stones = Vec::new(level)\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpecv1iuzw.rs:24:21\n    |\n24  |     stones = stones.concat(next_level)\n    |                     ^^^^^^ ---------- supplied 1 argument\n    |                     |\n    |                     expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpecv1iuzw.rs:24:21\n    |\n24  |     stones = stones.concat(next_level)\n    |                     ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `even`\n  --> /tmp/tmp_1ho5w2r.rs:16:47\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                                              -^^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n   |                                              |\n   |                                              help: missing `,`\n\nerror[E0573]: expected type, found local variable `odd`\n  --> /tmp/tmp_1ho5w2r.rs:16:54\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                                                      ^^^ expecting a type here because of type ascription\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_1ho5w2r.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp_1ho5w2r.rs:16:5\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp_1ho5w2r.rs:16:17\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                 ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmp_1ho5w2r.rs:16:43\n   |\n16",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      stones = stones.concat(Vec::new(i + 1))\n    } else if i % 2 == even {\n      stones = stones.concat(Vec::new(i + 2))\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq5u809tz.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq5u809tz.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq5u809tz.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:20:30\n    |\n20  |       stones = stones.concat(Vec::new(i + 1))\n    |                              ^^^^^^^^ ----- supplied 1 argument\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:20:23\n    |\n20  |       stones = stones.concat(Vec::new(i + 1))\n    |                       ^^^^^^ --------------- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq5u809tz.rs:21:24\n   |\n21 |     }",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else {\n    let odd = n % 2\n    let even = n % 2 == 0\n    let stones = make_a_pile(odd)\n    stones.push_back(n)\n    stones.push_back(n)\n    return stones\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqz11rb5f.rs:17:20\n   |\n17 |     let odd = n % 2\n   |                    ^ help: add `;` here\n18 |     let even = n % 2 == 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqz11rb5f.rs:18:26\n   |\n18 |     let even = n % 2 == 0\n   |                          ^ help: add `;` here\n19 |     let stones = make_a_pile(odd)\n   |     --- unexpected token\n\nerror: expected `;`, found `stones`\n  --> /tmp/tmpqz11rb5f.rs:19:34\n   |\n19 |     let stones = make_a_pile(odd)\n   |                                  ^ help: add `;` here\n20 |     stones.push_back(n)\n   |     ------ unexpected token\n\nerror: expected `;`, found `stones`\n  --> /tmp/tmpqz11rb5f.rs:20:24\n   |\n20 |     stones.push_back(n)\n   |                        ^ help: add `;` here\n21 |     stones.push_back(n)\n   |     ------ unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpqz11rb5f.rs:21:24\n   |\n21 |     stones.push_back(n)\n   |                        ^ help: add `;` here\n22 |     return stones\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqz11rb5f.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqz11rb5f.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpqz11rb5f.rs:20:12\n   |\n20 |     stones.push_back(n)\n   |            ^^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpqz11rb5f.rs:21:12\n   |\n21 |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    let stones = i + 1\n    if stones % 2 == odd {\n      stones += 1\n    }\n    result[i] = stones\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyca4gu7r.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpyca4gu7r.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyca4gu7r.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpyca4gu7r.rs:19:23\n   |\n19 |     let stones = i + 1\n   |                       ^ help: add `;` here\n20 |     if stones % 2 == odd {\n   |     -- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpyca4gu7r.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpyca4gu7r.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpyca4gu7r.rs:23:5\n   |\n23 |     result[i] = stones\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let level = Vec::new(n);\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  for i in 0..n {\n    let stones = i + 1;\n    if odd {\n      stones = stones + 1;\n    }\n    if even {\n      stones = stones + 1;\n    }\n    level = level.push(stones);\n  }\n  level\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5uph6svi.rs:12:15\n    |\n12  |   let level = Vec::new(n);\n    |               ^^^^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5uph6svi.rs:17:8\n   |\n17 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5uph6svi.rs:23:13\n   |\n12 |   let level = Vec::new(n);\n   |               ----------- expected due to this value\n...\n23 |     level = level.push(stones);\n   |             ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n + 1);\n  for i in 0..n {\n    result[i + 1] = odd ? (n + 1) : (n + 2);\n    odd = !odd;\n    even = !even;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `2`\n  --> /tmp/tmpvf5i8hic.rs:16:42\n   |\n16 |     result[i + 1] = odd ? (n + 1) : (n + 2);\n   |                                   -      ^ expected one of 9 possible tokens\n   |                                   |\n   |                                   tried to parse a type due to this\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n % 2;\n  let levels = Vec::new(n + 1);\n  for i in 0..n {\n    levels[i] = (i + 1) * (i + 2) / 2;\n  }\n  levels[n] = levels[n_odd] + levels[n_even];\n  return levels;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpk9bx_ggp.rs:14:16\n    |\n14  |   let levels = Vec::new(n + 1);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpk9bx_ggp.rs:16:5\n   |\n16 |     levels[i] = (i + 1) * (i + 2) / 2;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpk9bx_ggp.rs:18:3\n   |\n18 |   levels[n] = levels[n_odd] + levels[n_even];\n   |   ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpk9bx_ggp.rs:18:15\n   |\n18 |   levels[n] = levels[n_odd] + levels[n_even];\n   |               ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpk9bx_ggp.rs:18:31\n   |\n18 |   levels[n] = levels[n_odd] + levels[n_even];\n   |                               ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    if odd {\n      stones = stones.concat(odd)\n    } else {\n      stones = stones.concat(even)\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpr6dbztzp.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpr6dbztzp.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpr6dbztzp.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr6dbztzp.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr6dbztzp.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr6dbztzp.rs:20:23\n    |\n20  |       stones = stones.concat(odd)\n    |                       ^^^^^^ --- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr6dbztzp.rs:22:23\n    |\n22  |       stones = stones.concat(even)\n    |                       ^^^^^^ ---- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpr6dbztzp.rs:20:23\n    |\n20  |       stones =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  let level = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      level[i] = stones[i] + stones[i + 1]\n    } else {\n      level[i] = stones[i]\n    }\n  }\n  for i in 0..n {\n    if i % 2 == odd {\n      stones[i] = stones[i] + stones[i + 1]\n    } else {\n      stones[i] = stones[i]\n    }\n  }\n  return level\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvm3ikld0.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpvm3ikld0.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpvm3ikld0.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let level = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvm3ikld0.rs:18:26\n   |\n18 |   let level = Vec::new(n)\n   |                          ^ help: add `;` here\n19 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvm3ikld0.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvm3ikld0.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvm3ikld0.rs:18:15\n    |\n18  |   let level = Vec::new(n)\n    |               ^^^^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpvm3ikld0.rs:21:7\n   |\n21 |       level[i] = stones[i] + stones[i + 1]\n   |       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 1 {\n    return Vec::new(n + 1)\n  } else {\n    return Vec::new(n)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:17:12\n    |\n17  |     return Vec::new(n + 1)\n    |            ^^^^^^^^ ----- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:19:12\n    |\n19  |     return Vec::new(n)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  let level = Vec::new(n)\n  for i in 0..n {\n    level[i] = stones[i]\n    if i % 2 == odd {\n      stones[i] += 1\n    } else if i % 2 == even {\n      stones[i] += 2\n    }\n  }\n  for i in 0..n {\n    stones[i] = stones[i] + level[i]\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx3w3reos.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx3w3reos.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpx3w3reos.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let level = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpx3w3reos.rs:18:26\n   |\n18 |   let level = Vec::new(n)\n   |                          ^ help: add `;` here\n19 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpx3w3reos.rs:20:25\n   |\n20 |     level[i] = stones[i]\n   |                         ^ help: add `;` here\n21 |     if i % 2 == odd {\n   |     -- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx3w3reos.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx3w3reos.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpx3w3reos.rs:18:15\n    |\n18  |   let level = Vec::new(n)\n    |               ^^^^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpx3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 1 {\n    return Vec::new(n + 1)\n  } else {\n    return Vec::new(n)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:17:12\n    |\n17  |     return Vec::new(n + 1)\n    |            ^^^^^^^^ ----- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:19:12\n    |\n19  |     return Vec::new(n)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      stones = stones.concat(Vec::new(i + 1))\n    } else if i % 2 == even {\n      stones = stones.concat(Vec::new(i + 2))\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq5u809tz.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq5u809tz.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq5u809tz.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:20:30\n    |\n20  |       stones = stones.concat(Vec::new(i + 1))\n    |                              ^^^^^^^^ ----- supplied 1 argument\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:20:23\n    |\n20  |       stones = stones.concat(Vec::new(i + 1))\n    |                       ^^^^^^ --------------- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq5u809tz.rs:21:24\n   |\n21 |     }",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    stones[i] = stones[i + 1] + odd\n    stones[i] = stones[i + 1] + even\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnnj71h3a.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnnj71h3a.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnnj71h3a.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `stones`\n  --> /tmp/tmpnnj71h3a.rs:19:36\n   |\n19 |     stones[i] = stones[i + 1] + odd\n   |                                    ^ help: add `;` here\n20 |     stones[i] = stones[i + 1] + even\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpnnj71h3a.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpnnj71h3a.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpnnj71h3a.rs:19:5\n   |\n19 |     stones[i] = stones[i + 1] + odd\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpnnj71h3a.rs:19:17\n   |\n19 |     stones[i] = ston",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  let i = 0\n  let j = 0\n  while i < n {\n    if j == 0 {\n      result[i] = n\n      i += 1\n    } else if j == 1 {\n      result[i] = odd\n      i += 1\n    } else {\n      result[i] = even\n      i += 1\n    }\n    j += 1\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjagk5l7z.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjagk5l7z.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjagk5l7z.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjagk5l7z.rs:18:12\n   |\n18 |   let i = 0\n   |            ^ help: add `;` here\n19 |   let j = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpjagk5l7z.rs:19:12\n   |\n19 |   let j = 0\n   |            ^ help: add `;` here\n20 |   while i < n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpjagk5l7z.rs:22:20\n   |\n22 |       result[i] = n\n   |                    ^ help: add `;` here\n23 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpjagk5l7z.rs:25:22\n   |\n25 |       result[i] = odd\n   |                      ^ help: add `;` here\n26 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpjagk5l7z.rs:28:23\n   |\n28 |       result[i] = even\n   |                       ^ help: add `;` here\n29 |       i += 1\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpjagk5l7z.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpjagk5l7z.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let level = n\n  let stones = Vec::new(level)\n  for i in 0..level {\n    stones = stones.push(i + 1)\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsds84ei_.rs:15:16\n   |\n15 |   let level = n\n   |                ^ help: add `;` here\n16 |   let stones = Vec::new(level)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpsds84ei_.rs:16:31\n   |\n16 |   let stones = Vec::new(level)\n   |                               ^ help: add `;` here\n17 |   for i in 0..level {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsds84ei_.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsds84ei_.rs:16:16\n    |\n16  |   let stones = Vec::new(level)\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsds84ei_.rs:18:14\n   |\n16 |   let stones = Vec::new(level)\n   |                --------------- expected due to this value\n17 |   for i in 0..level {\n18 |     stones = stones.push(i + 1)\n   |              ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    if odd {\n      stones[i] = stones[i] + 1;\n    } else if even {\n      stones[i] = stones[i] + 2;\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpden3kr6v.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpden3kr6v.rs:16:8\n   |\n16 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpden3kr6v.rs:17:7\n   |\n17 |       stones[i] = stones[i] + 1;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpden3kr6v.rs:17:19\n   |\n17 |       stones[i] = stones[i] + 1;\n   |                   ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpden3kr6v.rs:19:7\n   |\n19 |       stones[i] = stones[i] + 2;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpden3kr6v.rs:19:19\n   |\n19 |       stones[i] = stones[i] + 2;\n   |                   ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    stones = stones.push_back(odd + stones.pop_back())\n    stones = stones.push_back(even + stones.pop_back())\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6kizmkj9.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6kizmkj9.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp6kizmkj9.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found `stones`\n  --> /tmp/tmp6kizmkj9.rs:19:55\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back())\n   |                                                       ^ help: add `;` here\n20 |     stones = stones.push_back(even + stones.pop_back())\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6kizmkj9.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp6kizmkj9.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp6kizmkj9.rs:19:21\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back())\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp6kizmkj9.rs:19:44\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back())\n   |                                            ^^^^^^^^ method not f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else {\n    let odd = n % 2;\n    let even = n / 2;\n    let stones = Vec::new(odd + even);\n    for i in 0..odd {\n      stones = stones.push(stones.pop() + 1);\n    }\n    for i in 0..even {\n      stones = stones.push(stones.pop() + 2);\n    }\n    return stones\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpga3ox_gu.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpga3ox_gu.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpga3ox_gu.rs:19:18\n    |\n19  |     let stones = Vec::new(odd + even);\n    |                  ^^^^^^^^ ---------- supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `{integer}` to `Option<_>`\n  --> /tmp/tmpga3ox_gu.rs:21:41\n   |\n21 |       stones = stones.push(stones.pop() + 1);\n   |                            ------------ ^ - {integer}\n   |                            |\n   |                            Option<_>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpga3ox_gu.rs:21:16\n   |\n19 |     let stones = Vec::new(odd + even);\n   |                  -------------------- expected due to this value\n20 |     for i in 0..odd {\n21 |       stones = stones.push(stones.pop() + 1);\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmpga3ox_gu.rs:21:23\n   |\n21 |       stones = stones.push(stones.pop() + 1);\n   |                ------ ^^^^ this call modifies `stones` in-place\n   |                |\n   |                you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `push`\n\nerror[E0369]: cannot add `{integer}` to `Option<_>`\n  --> /t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = odd ? n : n + 1\n  let levels = Vec::new(n)\n  for i in 0..n {\n    levels[i] = stones\n    stones = stones + odd\n    stones = stones + even\n  }\n  return levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmi1qm8to.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmi1qm8to.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = odd ? n : n + 1\n   |   --- unexpected token\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found `n`\n  --> /tmp/tmpmi1qm8to.rs:17:22\n   |\n17 |   let stones = odd ? n : n + 1\n   |                      ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpmi1qm8to.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `even`\n  --> /tmp/tmp_1ho5w2r.rs:16:47\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                                              -^^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n   |                                              |\n   |                                              help: missing `,`\n\nerror[E0573]: expected type, found local variable `odd`\n  --> /tmp/tmp_1ho5w2r.rs:16:54\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                                                      ^^^ expecting a type here because of type ascription\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_1ho5w2r.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp_1ho5w2r.rs:16:5\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp_1ho5w2r.rs:16:17\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == 0 ? even : odd);\n   |                 ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmp_1ho5w2r.rs:16:43\n   |\n16",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n - odd;\n  let result = Vec::new(odd + even);\n  for i in 0..odd {\n    result[i] = n;\n  }\n  for i in odd..even {\n    result[i] = n + 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpes6jeahj.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpes6jeahj.rs:17:16\n    |\n17  |   let result = Vec::new(odd + even);\n    |                ^^^^^^^^ ---------- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpes6jeahj.rs:19:5\n   |\n19 |     result[i] = n;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpes6jeahj.rs:22:5\n   |\n22 |     result[i] = n + 1;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      result[i] = i + 1\n    } else if i % 2 == even {\n      result[i] = i + 2\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkhvv4pyu.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkhvv4pyu.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkhvv4pyu.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkhvv4pyu.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkhvv4pyu.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkhvv4pyu.rs:20:7\n   |\n20 |       result[i] = i + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhvv4pyu.rs:21:24\n   |\n21 |     } else if i % 2 == even {\n   |                        ^^^^ expected `isize`, found `bool`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkhvv4pyu.rs:22:7\n   |\n22 |       result[i] = i + 2\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let level = n;\n  let stones = Vec::new(level);\n  for i in 0..level {\n    if i % 2 == 0 {\n      stones = stones.concat(i + 1);\n    } else {\n      stones = stones.concat(i);\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgjm3oygz.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgjm3oygz.rs:16:16\n    |\n16  |   let stones = Vec::new(level);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgjm3oygz.rs:19:23\n    |\n19  |       stones = stones.concat(i + 1);\n    |                       ^^^^^^ ----- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgjm3oygz.rs:21:23\n    |\n21  |       stones = stones.concat(i);\n    |                       ^^^^^^ - supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgjm3oygz.rs:19:23\n    |\n19  |       stones = stones.concat(i + 1);\n    |                       ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgjm3oygz.rs:21:23\n    |\n21  |       stones = stones.concat(i);\n    |                       ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81f78czl.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81f78czl.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp81f78czl.rs:17:31\n   |\n17 |     return make_a_pile(n / 2) + make_a_pile(n / 2)\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp81f78czl.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let level_count = (n % 2) + 1;\n  let level_size = n / 2;\n  let level_stones = Vec::new(level_count);\n  for i in 0..level_count {\n    level_stones[i] = level_size;\n    level_size = level_size + level_stones[i];\n  }\n  return level_stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkcp8fd_j.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkcp8fd_j.rs:17:22\n    |\n17  |   let level_stones = Vec::new(level_count);\n    |                      ^^^^^^^^ ----------- supplied 1 argument\n    |                      |\n    |                      expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkcp8fd_j.rs:19:5\n   |\n19 |     level_stones[i] = level_size;\n   |     ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkcp8fd_j.rs:20:31\n   |\n20 |     level_size = level_size + level_stones[i];\n   |                               ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 1 {\n    return Vec::new(n + 1)\n  } else {\n    return Vec::new(n)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:17:12\n    |\n17  |     return Vec::new(n + 1)\n    |            ^^^^^^^^ ----- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:19:12\n    |\n19  |     return Vec::new(n)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      result[i] = i + 1\n    } else if i % 2 == even {\n      result[i] = i + 2\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkhvv4pyu.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkhvv4pyu.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkhvv4pyu.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkhvv4pyu.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkhvv4pyu.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkhvv4pyu.rs:20:7\n   |\n20 |       result[i] = i + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhvv4pyu.rs:21:24\n   |\n21 |     } else if i % 2 == even {\n   |                        ^^^^ expected `isize`, found `bool`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkhvv4pyu.rs:22:7\n   |\n22 |       result[i] = i + 2\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    if odd {\n      stones[i] = stones[i] + 1;\n    } else if even {\n      stones[i] = stones[i] + 2;\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpden3kr6v.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpden3kr6v.rs:16:8\n   |\n16 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpden3kr6v.rs:17:7\n   |\n17 |       stones[i] = stones[i] + 1;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpden3kr6v.rs:17:19\n   |\n17 |       stones[i] = stones[i] + 1;\n   |                   ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpden3kr6v.rs:19:7\n   |\n19 |       stones[i] = stones[i] + 2;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpden3kr6v.rs:19:19\n   |\n19 |       stones[i] = stones[i] + 2;\n   |                   ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n / 2;\n  let n_odd_pile = make_a_pile(n_odd);\n  let n_even_pile = make_a_pile(n_even);\n  let n_piles = [n_odd_pile, n_even_pile];\n  let n_piles_vec = vec!(n_piles);\n  return n_piles_vec;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmppzx0r1y1.rs:18:10\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                             ---------- expected `Vec<isize>` because of return type\n...\n18 |   return n_piles_vec;\n   |          ^^^^^^^^^^^ expected `isize`, found array of 2 elements\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<[Vec<isize>; 2]>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  let odd_n = n % 2\n  let even_n = n / 2\n  let odd_n_stones = make_a_pile(odd_n)\n  let even_n_stones = make_a_pile(even_n)\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  even_n_stones.push_back(even_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  even_n_stones.push_back(even_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  even_n_stones.push_back(even_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  even_n_stones.push_back(even_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  even_n_stones.push_back(even_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  even_n_stones.push_back(even_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  even_n_stones.push_back(even_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  even_n_stones.push_back(even_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  even_n_stones.push_back(even_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc3nvmnhc.rs:18:20\n   |\n18 |   let odd_n = n % 2\n   |                    ^ help: add `;` here\n19 |   let even_n = n / 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc3nvmnhc.rs:19:21\n   |\n19 |   let even_n = n / 2\n   |                     ^ help: add `;` here\n20 |   let odd_n_stones = make_a_pile(odd_n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc3nvmnhc.rs:20:40\n   |\n20 |   let odd_n_stones = make_a_pile(odd_n)\n   |                                        ^ help: add `;` here\n21 |   let even_n_stones = make_a_pile(even_n)\n   |   --- unexpected token\n\nerror: expected `;`, found `odd_n_stones`\n  --> /tmp/tmpc3nvmnhc.rs:21:42\n   |\n21 |   let even_n_stones = make_a_pile(even_n)\n   |                                          ^ help: add `;` here\n22 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |   ------------ unexpected token\n\nerror: expected `;`, found `even_n_stones`\n  --> /tmp/tmpc3nvmnhc.rs:22:50\n   |\n22 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |                                                  ^ help: add `;` here\n23 |   even_n_stones.push_back(even_n_stones.pop_back())\n   |   ------------- unexpected token\n\nerror: expected `;`, found `odd_n_stones`\n  --> /tmp/tmpc3nvmnhc.rs:23:52\n   |\n23 |   even_n_stones.push_back(even_n_stones.pop_back())\n   |                                                    ^ help: add `;` here\n24 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |   ------------ unexpected token\n\nerror: expected `;`, found `even_n_stones`\n  --> /tmp/tmpc3nvmnhc.rs:24:50\n   |\n24 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |                                                  ^ help: add `;` here\n25 |   even_n_stones.push_back(even_n_stones.pop_back())\n   |   ------------- unexpected token\n\nerror: expected `;`, found `odd_n_stones`\n  --> /tmp/tmpc3nvmnhc.rs:25:52\n   |\n25 |   even_n_stones.push_back(even_n_stones.pop_back())\n   |             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    if odd {\n      stones = stones.concat(odd)\n    } else {\n      stones = stones.concat(even)\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpr6dbztzp.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpr6dbztzp.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpr6dbztzp.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr6dbztzp.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr6dbztzp.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr6dbztzp.rs:20:23\n    |\n20  |       stones = stones.concat(odd)\n    |                       ^^^^^^ --- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpr6dbztzp.rs:22:23\n    |\n22  |       stones = stones.concat(even)\n    |                       ^^^^^^ ---- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpr6dbztzp.rs:20:23\n    |\n20  |       stones =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n % 2;\n  let result = Vec::new(n + 1);\n  let i = 1;\n  while i <= n {\n    if i % 2 == n_odd {\n      result[i] = i + 1;\n    } else if i % 2 == n_even {\n      result[i] = i + 2;\n    } else {\n      result[i] = i;\n    }\n    i = i + 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp47ycxeg_.rs:14:16\n    |\n14  |   let result = Vec::new(n + 1);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp47ycxeg_.rs:18:7\n   |\n18 |       result[i] = i + 1;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp47ycxeg_.rs:20:7\n   |\n20 |       result[i] = i + 2;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp47ycxeg_.rs:22:7\n   |\n22 |       result[i] = i;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n - odd;\n  let stones = Vec::new(odd + even);\n  for i in 0..odd {\n    stones = stones.push(i + 1);\n  }\n  for i in 0..even {\n    stones = stones.push(i + 2);\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5aglabxz.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5aglabxz.rs:17:16\n    |\n17  |   let stones = Vec::new(odd + even);\n    |                ^^^^^^^^ ---------- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5aglabxz.rs:19:14\n   |\n17 |   let stones = Vec::new(odd + even);\n   |                -------------------- expected due to this value\n18 |   for i in 0..odd {\n19 |     stones = stones.push(i + 1);\n   |              ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5aglabxz.rs:22:14\n   |\n17 |   let stones = Vec::new(odd + even);\n   |                -------------------- expected due to this value\n...\n22 |     stones = stones.push(i + 2);\n   |              ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmp5aglabxz.rs:22:21\n   |\n22 |     stones = stones.push(i + 2);\n   |              ------ ^^^^ this call modifies `stones` in-place\n   |              |\n   |              you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `push`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones = stones.push_back(odd + stones.pop_back());\n    stones = stones.push_back(even + stones.pop_back());\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqjd3e71o.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqjd3e71o.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpqjd3e71o.rs:19:21\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back());\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpqjd3e71o.rs:19:44\n   |\n19 |     stones = stones.push_back(odd + stones.pop_back());\n   |                                            ^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpqjd3e71o.rs:20:21\n   |\n20 |     stones = stones.push_back(even + stones.pop_back());\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpqjd3e71o.rs:20:45\n   |\n20 |     stones = stones.push_back(even + stones.pop_back());\n   |                                             ^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let level_counts = Vec::new(n);\n  let level_counts_next = Vec::new(n);\n  let level_counts_next_next = Vec::new(n);\n  let level_counts_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = Vec::new(n);\n  let level_counts_next_next_next_next_next_next_next_next_next_next_next_\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpysa7quoi.rs:31:75\n   |\n31 |   let level_counts_next_next_next_next_next_next_next_next_next_next_next_\n   |                                                                           ^ help: add `;` here\n32 | }\n   | - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpysa7quoi.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpysa7quoi.rs:15:22\n    |\n15  |   let level_counts = Vec::new(n);\n    |                      ^^^^^^^^ - supplied 1 argument\n    |                      |\n    |                      expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpysa7quoi.rs:16:27\n    |\n16  |   let level_counts_next = Vec::new(n);\n    |                           ^^^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpysa7quoi.rs:17:32\n    |\n17  |   let level_counts_next_next = Vec::new(n);\n    |                                ^^^^^^^^ - supplied 1 argument\n    |                                |\n    |                                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpysa7quoi.rs:18:37\n    |\n18  |   let level_counts_next_next_next = Vec::new(n);\n    |                                     ^^^^^^^^ - supplied 1 argument\n    |                                     |\n    |                                     expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 1 {\n    return Vec::new(n + 1)\n  } else {\n    return Vec::new(n)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:17:12\n    |\n17  |     return Vec::new(n + 1)\n    |            ^^^^^^^^ ----- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:19:12\n    |\n19  |     return Vec::new(n)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n);\n  for i in 0..n {\n    result[i] = (odd && i + 1) + (even && i + 2);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxpm5ebj0.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpxpm5ebj0.rs:17:16\n    |\n17  |   let result = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpm5ebj0.rs:19:18\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2);\n   |                  ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpxpm5ebj0.rs:19:5\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2);\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpm5ebj0.rs:19:25\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2);\n   |                         ^^^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpm5ebj0.rs:19:43\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2);\n   |                                           ^^^^^ expected `bool`, found `isize`\n\nerror[E0369]: cannot add `bool` to `bool`\n  --> /tmp/tmpxpm5ebj0.rs:19:32\n   |\n19 |     result[i] = (odd && i + 1) + (even && i + 2);\n   |                 -------------- ^ --------------- bool\n   |                 |\n   |                 bool\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0061, E0277, E0308, E0369.\nFor more information about an error, try `rustc --explai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      stones = stones.push(i + 1)\n    } else if i % 2 == even {\n      stones = stones.push(i + 2)\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0exsw0sh.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp0exsw0sh.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0exsw0sh.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp0exsw0sh.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp0exsw0sh.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0exsw0sh.rs:20:16\n   |\n17 |   let stones = Vec::new(n)\n   |                ----------- expected due to this value\n...\n20 |       stones = stones.push(i + 1)\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0exsw0sh.rs:21:24\n   |\n21 |     } else if i % 2 == even {\n   |                        ^^^^ expected `isize`, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0exsw0sh.rs:22:16\n   |\n17 |   let stones = Vec::new(n)\n   |                ----------- expected due to this value\n...\n22 |       stones = stones.push(i + 2)\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let stones = Vec::new(n);\n  let level = 1;\n  let stones_in_level = stones.len();\n  while (stones_in_level < n) {\n    let stones_in_next_level = stones_in_level + stones_in_level;\n    if (stones_in_next_level % 2 == 0) {\n      stones_in_level = stones_in_next_level;\n    } else {\n      stones_in_level = stones_in_next_level + 1;\n    }\n    level += 1;\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpebgmv9cb.rs:18:9\n   |\n18 |   while (stones_in_level < n) {\n   |         ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   while (stones_in_level < n) {\n18 +   while stones_in_level < n {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpebgmv9cb.rs:20:8\n   |\n20 |     if (stones_in_next_level % 2 == 0) {\n   |        ^                             ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (stones_in_next_level % 2 == 0) {\n20 +     if stones_in_next_level % 2 == 0 {\n   | \n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpebgmv9cb.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpebgmv9cb.rs:15:16\n    |\n15  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpebgmv9cb.rs:18:28\n   |\n18 |   while (stones_in_level < n) {\n   |                            ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n18 |   while (stones_in_level < n.try_into().unwrap()) {\n   |                             ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let result = Vec::new();\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  for i in 0..n {\n    let stones = i + 1;\n    if odd {\n      stones = stones + 1;\n    }\n    if even {\n      stones = stones + 2;\n    }\n    result.push_back(stones);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpr7l8e4oo.rs:17:8\n   |\n17 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpr7l8e4oo.rs:23:12\n   |\n23 |     result.push_back(stones);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let stones = Vec::new(n);\n  let level = 1;\n  let odd = n % 2;\n  for i in 0..n {\n    if i % 2 == odd {\n      stones = stones.concat(Vec::new(level));\n      level += 1;\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsk6mpbsk.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsk6mpbsk.rs:15:16\n    |\n15  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsk6mpbsk.rs:20:30\n    |\n20  |       stones = stones.concat(Vec::new(level));\n    |                              ^^^^^^^^ ----- supplied 1 argument\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpsk6mpbsk.rs:20:23\n    |\n20  |       stones = stones.concat(Vec::new(level));\n    |                       ^^^^^^ --------------- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpsk6mpbsk.rs:20:23\n    |\n20  |       stones = stones.concat(Vec::new(level));\n    |                       ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3bq6xols.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n - odd;\n  let result = Vec::new(odd + even);\n  for i in 0..odd {\n    result[i] = n;\n  }\n  for i in odd..even {\n    result[i] = n + 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpes6jeahj.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpes6jeahj.rs:17:16\n    |\n17  |   let result = Vec::new(odd + even);\n    |                ^^^^^^^^ ---------- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpes6jeahj.rs:19:5\n   |\n19 |     result[i] = n;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpes6jeahj.rs:22:5\n   |\n22 |     result[i] = n + 1;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let next_odd = n % 2 + 1\n  let next_even = n % 2\n  let result = Vec::new(n)\n  for i in 0..n {\n    result[i] = next_odd if i % 2 == 1 else next_even\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph3vb5o7o.rs:15:27\n   |\n15 |   let next_odd = n % 2 + 1\n   |                           ^ help: add `;` here\n16 |   let next_even = n % 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph3vb5o7o.rs:16:24\n   |\n16 |   let next_even = n % 2\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph3vb5o7o.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmph3vb5o7o.rs:19:26\n   |\n19 |     result[i] = next_odd if i % 2 == 1 else next_even\n   |                          ^^ expected one of 8 possible tokens\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph3vb5o7o.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph3vb5o7o.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let level = n\n  let stones = Vec::new(level)\n  let odd = level % 2\n  for i in 0..level {\n    if odd {\n      stones = stones.push(i + 1)\n    } else {\n      stones = stones.push(i)\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3jtgvmzj.rs:15:16\n   |\n15 |   let level = n\n   |                ^ help: add `;` here\n16 |   let stones = Vec::new(level)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3jtgvmzj.rs:16:31\n   |\n16 |   let stones = Vec::new(level)\n   |                               ^ help: add `;` here\n17 |   let odd = level % 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp3jtgvmzj.rs:17:22\n   |\n17 |   let odd = level % 2\n   |                      ^ help: add `;` here\n18 |   for i in 0..level {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3jtgvmzj.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3jtgvmzj.rs:16:16\n    |\n16  |   let stones = Vec::new(level)\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3jtgvmzj.rs:19:8\n   |\n19 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3jtgvmzj.rs:20:16\n   |\n16 |   let stones = Vec::new(level)\n   |                --------------- expected due to this value\n...\n20 |       stones = stones.push(i + 1)\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3jtgvmzj.rs:22:16\n   |\n16 |   let stones = Vec::new(level)\n   |                --------------- expected due to this value\n...\n22 |       stones = stones.push(i)\n   |                ^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones[i] = stones[i] + 1;\n    if i % 2 == odd {\n      stones[i] = stones[i] + 1;\n    }\n  }\n  stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp4uaykfms.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp4uaykfms.rs:16:5\n   |\n16 |     stones[i] = stones[i] + 1;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp4uaykfms.rs:16:17\n   |\n16 |     stones[i] = stones[i] + 1;\n   |                 ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp4uaykfms.rs:18:7\n   |\n18 |       stones[i] = stones[i] + 1;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp4uaykfms.rs:18:19\n   |\n18 |       stones[i] = stones[i] + 1;\n   |                   ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let level = n\n  let stones = Vec::new(level)\n  for i in 0..level {\n    let next_level = stones.pop()\n    if i % 2 == 0 {\n      next_level += 2\n    } else {\n      next_level += 1\n    }\n    stones.push(next_level)\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp1j9kt5p_.rs:15:16\n   |\n15 |   let level = n\n   |                ^ help: add `;` here\n16 |   let stones = Vec::new(level)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1j9kt5p_.rs:16:31\n   |\n16 |   let stones = Vec::new(level)\n   |                               ^ help: add `;` here\n17 |   for i in 0..level {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1j9kt5p_.rs:18:34\n   |\n18 |     let next_level = stones.pop()\n   |                                  ^ help: add `;` here\n19 |     if i % 2 == 0 {\n   |     -- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1j9kt5p_.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1j9kt5p_.rs:16:16\n    |\n16  |   let stones = Vec::new(level)\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Option<_>`\n  --> /tmp/tmp1j9kt5p_.rs:20:7\n   |\n20 |       next_level += 2\n   |       ----------^^^^^\n   |       |\n   |       cannot use `+=` on type `Option<_>`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Option<_>`\n  --> /tmp/tmp1j9kt5p_.rs:22:7\n   |\n22 |       next_level += 1\n   |       ----------^^^^^\n   |       |\n   |       cannot use `+=` on type `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1j9kt5p_.rs:24:17\n   |\n24 |     stones.push(next_level)\n   |                 ^^^^^^^^^^ cyclic type of infinite size\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0308, E0368.\nFor more information about an error, tr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let level_count = Vec::new(n);\n  let level = 1;\n  for (; level < n; level += 1) {\n    let stones = level;\n    if (level % 2 == 0) {\n      stones = stones + 1;\n    }\n    level_count[level] = stones;\n  }\n  return level_count;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected pattern, found `;`\n  --> /tmp/tmp0pepjmn5.rs:14:8\n   |\n14 |   for (; level < n; level += 1) {\n   |        ^ expected pattern\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp0pepjmn5.rs:12:21\n    |\n12  |   let level_count = Vec::new(n);\n    |                     ^^^^^^^^ - supplied 1 argument\n    |                     |\n    |                     expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81f78czl.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81f78czl.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp81f78czl.rs:17:31\n   |\n17 |     return make_a_pile(n / 2) + make_a_pile(n / 2)\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp81f78czl.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n % 2;\n  let n_odd_pile = n_odd * n;\n  let n_even_pile = n_even * (n / 2);\n  let n_piles = [n_odd_pile, n_even_pile];\n  let n_piles_vec = Vec::from(n_piles);\n  return n_piles_vec;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[3, 1]`,\n right: `[3, 5, 7]`', /tmp/tmp7qu6c5r8.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpns9rnxap.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpns9rnxap.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpns9rnxap.rs:17:31\n   |\n17 |     return make_a_pile(n / 2) + make_a_pile(n / 2)\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpns9rnxap.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + make_a_pile(n / 2 + 1)\n   |            ------------------ ^ ---------------------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    if i % 2 == odd {\n      stones = stones.push(i + 1);\n    } else if i % 2 == even {\n      stones = stones.push(i + 2);\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpuw89tsdd.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuw89tsdd.rs:17:16\n   |\n14 |   let stones = Vec::new(n);\n   |                ----------- expected due to this value\n...\n17 |       stones = stones.push(i + 1);\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuw89tsdd.rs:18:24\n   |\n18 |     } else if i % 2 == even {\n   |                        ^^^^ expected `isize`, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuw89tsdd.rs:19:16\n   |\n14 |   let stones = Vec::new(n);\n   |                ----------- expected due to this value\n...\n19 |       stones = stones.push(i + 2);\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmpuw89tsdd.rs:19:23\n   |\n19 |       stones = stones.push(i + 2);\n   |                ------ ^^^^ this call modifies `stones` in-place\n   |                |\n   |                you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `push`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2 == 1;\n  let even_n = n % 2 == 0;\n  let level_n = odd_n ? n + 1 : n;\n  let level_n_stones = level_n * level_n;\n  let level_n_stones_vec = Vec::new(level_n);\n  for i in 0..level_n {\n    level_n_stones_vec[i] = level_n_stones;\n    level_n_stones = level_n_stones - 1;\n  }\n  level_n_stones_vec[level_n - 1] = level_n_stones;\n  return level_n_stones_vec;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `n`\n  --> /tmp/tmppgda9t39.rs:17:25\n   |\n17 |   let level_n = odd_n ? n + 1 : n;\n   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmppgda9t39.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n);\n  for i in 0..n {\n    result[i] = (odd && i == n - 1) ? odd : even;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `odd`\n  --> /tmp/tmphvyzapp8.rs:19:39\n   |\n19 |     result[i] = (odd && i == n - 1) ? odd : even;\n   |                                       ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmphvyzapp8.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmphvyzapp8.rs:17:16\n    |\n17  |   let result = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      stones = stones.concat(Vec::new(i + 1))\n    } else if i % 2 == even {\n      stones = stones.concat(Vec::new(i + 2))\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq5u809tz.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq5u809tz.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq5u809tz.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:20:30\n    |\n20  |       stones = stones.concat(Vec::new(i + 1))\n    |                              ^^^^^^^^ ----- supplied 1 argument\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpq5u809tz.rs:20:23\n    |\n20  |       stones = stones.concat(Vec::new(i + 1))\n    |                       ^^^^^^ --------------- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq5u809tz.rs:21:24\n   |\n21 |     }",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + Vec::new(1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:19:33\n    |\n19  |     return make_a_pile(n / 2) + Vec::new(1)\n    |                                 ^^^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<isize>`\n  --> /tmp/tmpz8uqbvv3.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + Vec::new(1)\n   |            ------------------ ^ ----------- Vec<_>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n + 1);\n  for i in 0..n {\n    result[i + 1] = odd ? (n + 1) : (n + 2);\n    odd = !odd;\n    even = !even;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `2`\n  --> /tmp/tmp846vb_h2.rs:19:42\n   |\n19 |     result[i + 1] = odd ? (n + 1) : (n + 2);\n   |                                   -      ^ expected one of 9 possible tokens\n   |                                   |\n   |                                   tried to parse a type due to this\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else {\n    let odd = n % 2\n    let even = n % 2 == 0\n    let stones = make_a_pile(odd)\n    stones.push_back(n)\n    stones.push_back(n)\n    return stones\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqz11rb5f.rs:17:20\n   |\n17 |     let odd = n % 2\n   |                    ^ help: add `;` here\n18 |     let even = n % 2 == 0\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqz11rb5f.rs:18:26\n   |\n18 |     let even = n % 2 == 0\n   |                          ^ help: add `;` here\n19 |     let stones = make_a_pile(odd)\n   |     --- unexpected token\n\nerror: expected `;`, found `stones`\n  --> /tmp/tmpqz11rb5f.rs:19:34\n   |\n19 |     let stones = make_a_pile(odd)\n   |                                  ^ help: add `;` here\n20 |     stones.push_back(n)\n   |     ------ unexpected token\n\nerror: expected `;`, found `stones`\n  --> /tmp/tmpqz11rb5f.rs:20:24\n   |\n20 |     stones.push_back(n)\n   |                        ^ help: add `;` here\n21 |     stones.push_back(n)\n   |     ------ unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpqz11rb5f.rs:21:24\n   |\n21 |     stones.push_back(n)\n   |                        ^ help: add `;` here\n22 |     return stones\n   |     ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqz11rb5f.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpqz11rb5f.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpqz11rb5f.rs:20:12\n   |\n20 |     stones.push_back(n)\n   |            ^^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpqz11rb5f.rs:21:12\n   |\n21 |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let levels = Vec::new();\n  let stones = Vec::new();\n  for i in 0..n {\n    if i % 2 == 0 {\n      levels = levels.concat(Vec::new(i + 1, i + 2, i + 3));\n    } else {\n      levels = levels.concat(Vec::new(i + 1, i + 2));\n    }\n    stones = stones.concat(Vec::new(i, i + 1));\n  }\n  levels = levels.map(|x| x + stones.length);\n  return levels;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 3 arguments were supplied\n   --> /tmp/tmpvpi_nz16.rs:16:30\n    |\n16  |       levels = levels.concat(Vec::new(i + 1, i + 2, i + 3));\n    |                              ^^^^^^^^ -----  -----  ----- supplied 3 arguments\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvpi_nz16.rs:16:23\n    |\n16  |       levels = levels.concat(Vec::new(i + 1, i + 2, i + 3));\n    |                       ^^^^^^ ----------------------------- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 2 arguments were supplied\n   --> /tmp/tmpvpi_nz16.rs:18:30\n    |\n18  |       levels = levels.concat(Vec::new(i + 1, i + 2));\n    |                              ^^^^^^^^ -----  ----- supplied 2 arguments\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvpi_nz16.rs:18:23\n    |\n18  |       levels = levels.concat(Vec::new(i + 1, i + 2));\n    |                       ^^^^^^ ---------------------- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 2 arguments were supplied\n   --> /tmp/tmpvpi_nz16.rs:20:28\n    |\n20  |     stones = stones.concat(Vec::new(i, i + 1));\n    |                            ^^^^^^^^ -  ----- supplied 2 arguments\n    |                            |\n    |                            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvpi_nz16.rs:20:21\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let level_counts = Vec::new(n + 1);\n  for i in 0..n {\n    level_counts[i + 1] = i + 1;\n  }\n  for i in 0..n {\n    level_counts[i + 1] = i + 1;\n  }\n  return level_counts;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpiopkzqwn.rs:12:22\n    |\n12  |   let level_counts = Vec::new(n + 1);\n    |                      ^^^^^^^^ ----- supplied 1 argument\n    |                      |\n    |                      expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpiopkzqwn.rs:14:5\n   |\n14 |     level_counts[i + 1] = i + 1;\n   |     ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpiopkzqwn.rs:17:5\n   |\n17 |     level_counts[i + 1] = i + 1;\n   |     ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 1 {\n    return Vec::new(n + 1)\n  } else {\n    return Vec::new(n)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:17:12\n    |\n17  |     return Vec::new(n + 1)\n    |            ^^^^^^^^ ----- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9cnnerw4.rs:19:12\n    |\n19  |     return Vec::new(n)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81f78czl.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81f78czl.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp81f78czl.rs:17:31\n   |\n17 |     return make_a_pile(n / 2) + make_a_pile(n / 2)\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp81f78czl.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let stones = Vec::new(n)\n  for i in 0..n {\n    stones[i] = stones[i + 1] + 1\n    if stones[i] % 2 == odd {\n      stones[i] += 1\n    }\n    if stones[i] % 2 == even {\n      stones[i] += 2\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp1jgbjkz9.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp1jgbjkz9.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1jgbjkz9.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1jgbjkz9.rs:19:34\n   |\n19 |     stones[i] = stones[i + 1] + 1\n   |                                  ^ help: add `;` here\n20 |     if stones[i] % 2 == odd {\n   |     -- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1jgbjkz9.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1jgbjkz9.rs:17:16\n    |\n17  |   let stones = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp1jgbjkz9.rs:19:5\n   |\n19 |     stones[i] = stones[i + 1] + 1\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp1jgbjkz9.rs:19:17\n   |\n19 |     stones[i] = stones[i + 1] + 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n % 2;\n  let levels = Vec::new(n);\n  let level = Vec::new(n);\n  let level_odd = Vec::new(n_odd);\n  let level_even = Vec::new(n_even);\n  for i in 0..n {\n    level[i] = i;\n  }\n  for i in 0..n {\n    levels[i] = level[i];\n    if i % 2 == 0 {\n      level_even[i] = level[i];\n    } else {\n      level_odd[i] = level[i];\n    }\n  }\n  for i in 0..n {\n    if i % 2 == 0 {\n      levels[i] = level_even[i];\n    } else {\n      levels[i] = level_odd[i];\n    }\n  }\n  return levels;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvqam4j8x.rs:14:16\n    |\n14  |   let levels = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvqam4j8x.rs:15:15\n    |\n15  |   let level = Vec::new(n);\n    |               ^^^^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvqam4j8x.rs:16:19\n    |\n16  |   let level_odd = Vec::new(n_odd);\n    |                   ^^^^^^^^ ----- supplied 1 argument\n    |                   |\n    |                   expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpvqam4j8x.rs:17:20\n    |\n17  |   let level_even = Vec::new(n_even);\n    |                    ^^^^^^^^ ------ supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpvqam4j8x.rs:19:5\n   |\n19 |     level[i] = i;\n   |     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpvqam4j8x.rs:22:5\n   |\n22 |     levels[i] = level[i];\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let level = n\n  let stones = Vec::new(level)\n  while level > 0 {\n    if level % 2 == 1 {\n      stones = stones.push(level)\n    } else {\n      stones = stones.push(level - 1)\n    }\n    level = level / 2\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpm1f30wxe.rs:15:16\n   |\n15 |   let level = n\n   |                ^ help: add `;` here\n16 |   let stones = Vec::new(level)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpm1f30wxe.rs:16:31\n   |\n16 |   let stones = Vec::new(level)\n   |                               ^ help: add `;` here\n17 |   while level > 0 {\n   |   ----- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm1f30wxe.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpm1f30wxe.rs:16:16\n    |\n16  |   let stones = Vec::new(level)\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm1f30wxe.rs:19:16\n   |\n16 |   let stones = Vec::new(level)\n   |                --------------- expected due to this value\n...\n19 |       stones = stones.push(level)\n   |                ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm1f30wxe.rs:21:16\n   |\n16 |   let stones = Vec::new(level)\n   |                --------------- expected due to this value\n...\n21 |       stones = stones.push(level - 1)\n   |                ^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmpm1f30wxe.rs:21:23\n   |\n21 |       stones = stones.push(level - 1)\n   |                ------ ^^^^ this call modifies `stones` in-place\n   |                |\n   |                you probably want to use this valu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if odd {\n      result[i] = n + 1\n    } else if even {\n      result[i] = n\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph8rb22mk.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph8rb22mk.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph8rb22mk.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph8rb22mk.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph8rb22mk.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmph8rb22mk.rs:20:7\n   |\n20 |       result[i] = n + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmph8rb22mk.rs:22:7\n   |\n22 |       result[i] = n\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81f78czl.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp81f78czl.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp81f78czl.rs:17:31\n   |\n17 |     return make_a_pile(n / 2) + make_a_pile(n / 2)\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp81f78czl.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + Vec::new(1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpz8uqbvv3.rs:19:33\n    |\n19  |     return make_a_pile(n / 2) + Vec::new(1)\n    |                                 ^^^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<_>` to `Vec<isize>`\n  --> /tmp/tmpz8uqbvv3.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + Vec::new(1)\n   |            ------------------ ^ ----------- Vec<_>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd_n = n % 2;\n  let even_n = n / 2;\n  let levels = [odd_n, even_n];\n  let result = Vec::new();\n  for i in 0..levels.len() {\n    result.push_back(levels[i]);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpf93d_tf7.rs:17:12\n   |\n17 |     result.push_back(levels[i]);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let stones = Vec::new(n);\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  for i in 0..n {\n    if i % 2 == odd {\n      stones = stones.concat(Vec::new(i + 1));\n    } else if i % 2 == even {\n      stones = stones.concat(Vec::new(i + 2));\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3oou4r81.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3oou4r81.rs:15:16\n    |\n15  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3oou4r81.rs:20:30\n    |\n20  |       stones = stones.concat(Vec::new(i + 1));\n    |                              ^^^^^^^^ ----- supplied 1 argument\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3oou4r81.rs:20:23\n    |\n20  |       stones = stones.concat(Vec::new(i + 1));\n    |                       ^^^^^^ --------------- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3oou4r81.rs:21:24\n   |\n21 |     } else if i % 2 == even {\n   |                        ^^^^ expected `isize`, found `bool`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3oou4r81.rs:22:30\n    |\n22  |       stones = stones.concat(Vec::new(i + 2));\n    |                              ^^^^^^^^ ----- supplied 1 argument\n    |                              |\n    |                              expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp3oou4r81.rs:22:23\n    |\n22  |       stones = stones.concat(Vec::new(i + 2));",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n + 1);\n  for i in 0..n {\n    result[i + 1] = odd ? i + 2 : i + 1;\n    odd = !odd;\n    even = !even;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `i`\n  --> /tmp/tmpnr4j7k2s.rs:16:27\n   |\n16 |     result[i + 1] = odd ? i + 2 : i + 1;\n   |                           ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpnr4j7k2s.rs:14:16\n    |\n14  |   let result = Vec::new(n + 1);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let level = n\n  let stones = Vec::new(level)\n  let odd = n % 2\n  let even = n % 2 == 0\n  for i in 0..level {\n    if odd {\n      stones = stones.push(i + 1)\n    } else {\n      stones = stones.push(i)\n    }\n    if even {\n      level = level + 1\n      stones = stones.push(level)\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpk_wao49g.rs:15:16\n   |\n15 |   let level = n\n   |                ^ help: add `;` here\n16 |   let stones = Vec::new(level)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk_wao49g.rs:16:31\n   |\n16 |   let stones = Vec::new(level)\n   |                               ^ help: add `;` here\n17 |   let odd = n % 2\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk_wao49g.rs:17:18\n   |\n17 |   let odd = n % 2\n   |                  ^ help: add `;` here\n18 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpk_wao49g.rs:18:24\n   |\n18 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n19 |   for i in 0..level {\n   |   --- unexpected token\n\nerror: expected `;`, found `stones`\n  --> /tmp/tmpk_wao49g.rs:26:24\n   |\n26 |       level = level + 1\n   |                        ^ help: add `;` here\n27 |       stones = stones.push(level)\n   |       ------ unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpk_wao49g.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpk_wao49g.rs:16:16\n    |\n16  |   let stones = Vec::new(level)\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_wao49g.rs:20:8\n   |\n20 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_wao49g.rs:21:16\n   |\n16 |   let stones = Vec::new(level)\n   |                --------------- expected due to this value\n...\n21 |       stones = stones.push(i + 1)\n   |                ^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  let level = Vec::new(n);\n  let level_size = Vec::new(n);\n  for i in 0..n {\n    if i % 2 == odd {\n      stones[i] = stones[i - 1] + 1;\n    } else {\n      stones[i] = stones[i - 1];\n    }\n    level_size[i] = stones[i];\n  }\n  for i in 0..n - 1 {\n    if i % 2 == odd {\n      level[i] = stones[i] + stones[i + 1];\n    } else {\n      level[i] = stones[i];\n    }\n  }\n  level_size[n - 1] = stones[n - 1];\n  level[n - 1] = stones[n - 1];\n  return level;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoujdmqw9.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoujdmqw9.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoujdmqw9.rs:18:15\n    |\n18  |   let level = Vec::new(n);\n    |               ^^^^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoujdmqw9.rs:19:20\n    |\n19  |   let level_size = Vec::new(n);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpoujdmqw9.rs:22:7\n   |\n22 |       stones[i] = stones[i - 1] + 1;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpoujdmqw9.rs:22:19\n   |\n22 |       stones[i] = stones[i - 1] + 1;\n   |                   ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n - odd;\n  let result = Vec::new(odd + even);\n  for i in 0..odd {\n    result[i] = n;\n  }\n  for i in odd..even {\n    result[i] = n + 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu5nyzmfg.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpu5nyzmfg.rs:17:16\n    |\n17  |   let result = Vec::new(odd + even);\n    |                ^^^^^^^^ ---------- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpu5nyzmfg.rs:19:5\n   |\n19 |     result[i] = n;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpu5nyzmfg.rs:22:5\n   |\n22 |     result[i] = n + 1;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      result[i] = i + 1\n    } else if i % 2 == even {\n      result[i] = i + 2\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkhvv4pyu.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkhvv4pyu.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkhvv4pyu.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkhvv4pyu.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkhvv4pyu.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkhvv4pyu.rs:20:7\n   |\n20 |       result[i] = i + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhvv4pyu.rs:21:24\n   |\n21 |     } else if i % 2 == even {\n   |                        ^^^^ expected `isize`, found `bool`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkhvv4pyu.rs:22:7\n   |\n22 |       result[i] = i + 2\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones = stones.push_back(i + 1);\n    if i % 2 == odd {\n      stones = stones.push_back(i + 2);\n    }\n    if i % 2 == even {\n      stones = stones.push_back(i + 1);\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp64pefozy.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp64pefozy.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp64pefozy.rs:19:21\n   |\n19 |     stones = stones.push_back(i + 1);\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp64pefozy.rs:21:23\n   |\n21 |       stones = stones.push_back(i + 2);\n   |                       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64pefozy.rs:23:17\n   |\n23 |     if i % 2 == even {\n   |                 ^^^^ expected `isize`, found `bool`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp64pefozy.rs:24:23\n   |\n24 |       stones = stones.push_back(i + 1);\n   |                       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0061, E0308, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2 == 1\n  let even_n = n % 2 == 0\n  let stones = Vec::new(n)\n  let level = Vec::new(n)\n  let level_n = Vec::new(n)\n  let level_n_next = Vec::new(n)\n  let level_n_next_odd = Vec::new(n)\n  let level_n_next_even = Vec::new(n)\n  let level_n_next_odd_next = Vec::new(n)\n  let level_n_next_even_next = Vec::new(n)\n  let level_n_next_odd_next_next = Vec::new(n)\n  let level_n_next_even_next_next = Vec::new(n)\n  let level_n_next_odd_next_next_next = Vec::new(n)\n  let level_n_next_even_next_next_next = Vec::new(n)\n  let level_n_next_odd_next_next_next_next = Vec::new(n)\n  let level_n_next_even_next_next_next_next_next = Vec::new(n)\n  let level_n_next_odd_next_next_next_next_next_next = Vec::new(n)\n  let level_n_next_even_next_next_next_next_next_next_next = Vec::new(n)\n  let level_n_next_odd_next_next_next_next_next_next_next_next = Vec::new(n)\n  let level_n_next_even_next_next_next_next_next_next_next_next_next = Vec::new(n)\n  let level_n_next_odd_next_next_next_next_next_next_next_next_next_next = Vec::new(n)\n  let level_n_next_even_next_next_next_next_next_next_next_next_next_next_next = Vec::new(n)\n  let level\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8blxrhh_.rs:15:25\n   |\n15 |   let odd_n = n % 2 == 1\n   |                         ^ help: add `;` here\n16 |   let even_n = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8blxrhh_.rs:16:26\n   |\n16 |   let even_n = n % 2 == 0\n   |                          ^ help: add `;` here\n17 |   let stones = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8blxrhh_.rs:17:27\n   |\n17 |   let stones = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let level = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8blxrhh_.rs:18:26\n   |\n18 |   let level = Vec::new(n)\n   |                          ^ help: add `;` here\n19 |   let level_n = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8blxrhh_.rs:19:28\n   |\n19 |   let level_n = Vec::new(n)\n   |                            ^ help: add `;` here\n20 |   let level_n_next = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8blxrhh_.rs:20:33\n   |\n20 |   let level_n_next = Vec::new(n)\n   |                                 ^ help: add `;` here\n21 |   let level_n_next_odd = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8blxrhh_.rs:21:37\n   |\n21 |   let level_n_next_odd = Vec::new(n)\n   |                                     ^ help: add `;` here\n22 |   let level_n_next_even = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8blxrhh_.rs:22:38\n   |\n22 |   let level_n_next_even = Vec::new(n)\n   |                                      ^ help: add `;` here\n23 |   let level_n_next_odd_next = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8blxrhh_.rs:23:42\n   |\n23 |   let level_n_next_odd_next = Vec::new(n)\n   |                                          ^ he",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let result = Vec::new();\n  let odd_n = n % 2;\n  let even_n = n % 2;\n  let level = Vec::new();\n  let level_count = Vec::new();\n  let level_count_next = Vec::new();\n  let level_count_next_odd = Vec::new();\n  let level_count_next_even = Vec::new();\n  let level_count_next_odd_next = Vec::new();\n  let level_count_next_even_next = Vec::new();\n  let level_count_next_odd_next_odd = Vec::new();\n  let level_count_next_even_next_even = Vec::new();\n  let level_count_next_odd_next_odd_next = Vec::new();\n  let level_count_next_even_next_even_next = Vec::new();\n  let level_count_next_odd_next_odd_next_odd = Vec::new();\n  let level_count_next_even_next_odd_next_even = Vec::new();\n  let level_count_next_odd_next_odd_next_odd_next = Vec::new();\n  let level_count_next_even_next_odd_next_even_next = Vec::new();\n  let level_count_next_odd_next_odd_next_odd_next_odd = Vec::new();\n  let level_count_next_even_next_odd_next_even_next_even = Vec::new();\n  let level_count_next_odd_next_odd_next_odd_next_odd_next = Vec::new();\n  let level_count_next_even_next_odd_next_even_next_odd_next_even = Vec::new();\n  let level_count_next_odd_next_odd_next_odd_next_odd_next_odd = Vec::new();\n  let level_count_next_even_next_odd_next_even_next_odd_next_even_next = Vec::new();\n  let level_count_next_odd_next_odd_next_odd_next_odd_next_odd_next_odd =\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmp3jojulgo.rs:37:1\n   |\n37 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2 == 1;\n  let even_n = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones = stones.concat(odd_n ? i + 1 : i);\n    stones = stones.concat(even_n ? i + 2 : i + 1);\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `i`\n  --> /tmp/tmpc28pqlge.rs:19:36\n   |\n19 |     stones = stones.concat(odd_n ? i + 1 : i);\n   |                                   -^ expected one of `)`, `,`, `.`, `?`, or an operator\n   |                                   |\n   |                                   help: missing `,`\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `i`\n  --> /tmp/tmpc28pqlge.rs:20:37\n   |\n20 |     stones = stones.concat(even_n ? i + 2 : i + 1);\n   |                                    -^ expected one of `)`, `,`, `.`, `?`, or an operator\n   |                                    |\n   |                                    help: missing `,`\n\nerror[E0573]: expected type, found local variable `i`\n  --> /tmp/tmpc28pqlge.rs:19:44\n   |\n19 |     stones = stones.concat(odd_n ? i + 1 : i);\n   |                                            ^ expecting a type here because of type ascription\n\nerror[E0573]: expected type, found local variable `i`\n  --> /tmp/tmpc28pqlge.rs:20:45\n   |\n20 |     stones = stones.concat(even_n ? i + 2 : i + 1);\n   |                                             ^ expecting a type here because of type ascription\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpc28pqlge.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpc28pqlge.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmpc28pqlge.rs:19:28\n   |\n19 |     stones = stones.concat(odd_n ? i + 1 : i);\n   |                            ^^^^^^^ the `?` operator cannot be applied",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      result[i] = i + 1\n    } else if i % 2 == even {\n      result[i] = i + 2\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkhvv4pyu.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkhvv4pyu.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkhvv4pyu.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkhvv4pyu.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkhvv4pyu.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkhvv4pyu.rs:20:7\n   |\n20 |       result[i] = i + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhvv4pyu.rs:21:24\n   |\n21 |     } else if i % 2 == even {\n   |                        ^^^^ expected `isize`, found `bool`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkhvv4pyu.rs:22:7\n   |\n22 |       result[i] = i + 2\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2 == 1\n  let even_n = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if odd_n {\n      result[i] = i + 1\n    } else if even_n {\n      result[i] = i + 2\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwnibvl0r.rs:15:25\n   |\n15 |   let odd_n = n % 2 == 1\n   |                         ^ help: add `;` here\n16 |   let even_n = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwnibvl0r.rs:16:26\n   |\n16 |   let even_n = n % 2 == 0\n   |                          ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwnibvl0r.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwnibvl0r.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwnibvl0r.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpwnibvl0r.rs:20:7\n   |\n20 |       result[i] = i + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpwnibvl0r.rs:22:7\n   |\n22 |       result[i] = i + 2\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let stones = Vec::new(n);\n  let level = 1;\n  let odd = n % 2;\n  for i in 0..n {\n    if level == 1 {\n      stones[i] = n;\n    } else if odd {\n      stones[i] = level * 2;\n    } else {\n      stones[i] = level * 2 + 1;\n    }\n    level += 1;\n    odd = !odd;\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpkcw1v3d2.rs:12:16\n    |\n12  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkcw1v3d2.rs:17:7\n   |\n17 |       stones[i] = n;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkcw1v3d2.rs:18:15\n   |\n18 |     } else if odd {\n   |               ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkcw1v3d2.rs:19:7\n   |\n19 |       stones[i] = level * 2;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpkcw1v3d2.rs:21:7\n   |\n21 |       stones[i] = level * 2 + 1;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0277, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let level = Vec::new(n);\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  for i in 0..n {\n    let stones = i + 1;\n    if odd {\n      stones = stones + 1;\n    }\n    if even {\n      stones = stones + 2;\n    }\n    level = level.push(stones);\n  }\n  level\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmphd1u90yq.rs:12:15\n    |\n12  |   let level = Vec::new(n);\n    |               ^^^^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphd1u90yq.rs:17:8\n   |\n17 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphd1u90yq.rs:23:13\n   |\n12 |   let level = Vec::new(n);\n   |               ----------- expected due to this value\n...\n23 |     level = level.push(stones);\n   |             ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n + 1);\n  for i in 0..n {\n    stones[i] = stones[i + 1] + (i % 2 == odd ? 1 : 0);\n  }\n  stones[n] = stones[n - 1] + (even ? 1 : 0);\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `1`\n  --> /tmp/tmphgh5dhfr.rs:16:49\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == odd ? 1 : 0);\n   |                                                 ^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `...`, `.`, `;`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, `~`, an operator, lifetime, or path, found `0`\n  --> /tmp/tmphgh5dhfr.rs:16:53\n   |\n16 |     stones[i] = stones[i + 1] + (i % 2 == odd ? 1 : 0);\n   |                                                     ^ expected one of 26 possible tokens\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `1`\n  --> /tmp/tmphgh5dhfr.rs:18:39\n   |\n18 |   stones[n] = stones[n - 1] + (even ? 1 : 0);\n   |                                       ^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `...`, `.`, `;`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, `~`, an operator, lifetime, or path, found `0`\n  --> /tmp/tmphgh5dhfr.rs:18:43\n   |\n18 |   stones[n] = stones[n - 1] + (even ? 1 : 0);\n   |                                           ^ expected one of 26 possible tokens\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmphgh5dhfr.rs:14:16\n    |\n14  |   let stones = Vec::new(n + 1);\n    |                ^^^^^^^^ ----- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let level = Vec::new(n);\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  for i in 0..n {\n    if odd {\n      level[i] = i + 1;\n    } else if even {\n      level[i] = i + 2;\n    } else {\n      level[i] = i + 3;\n    }\n  }\n  level\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp7q781sta.rs:12:15\n    |\n12  |   let level = Vec::new(n);\n    |               ^^^^^^^^ - supplied 1 argument\n    |               |\n    |               expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7q781sta.rs:16:8\n   |\n16 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp7q781sta.rs:17:7\n   |\n17 |       level[i] = i + 1;\n   |       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp7q781sta.rs:19:7\n   |\n19 |       level[i] = i + 2;\n   |       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp7q781sta.rs:21:7\n   |\n21 |       level[i] = i + 3;\n   |       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0277, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones[i] = stones[i] + odd;\n    stones[i] = stones[i] + even;\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp1datoptf.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp1datoptf.rs:16:5\n   |\n16 |     stones[i] = stones[i] + odd;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp1datoptf.rs:16:17\n   |\n16 |     stones[i] = stones[i] + odd;\n   |                 ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp1datoptf.rs:17:5\n   |\n17 |     stones[i] = stones[i] + even;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp1datoptf.rs:17:17\n   |\n17 |     stones[i] = stones[i] + even;\n   |                 ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirement",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  let odd = n % 2\n  let even = n - odd\n  let odd_stones = make_a_pile(odd)\n  let even_stones = make_a_pile(even)\n  odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n  even_stones.push_back(even_stones.pop_back() + even_stones.pop_back())\n  odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n  even_stones.push_back(even_stones.pop_back() + even_stones.pop_back())\n  odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n  even_stones.push_back(even_stones.pop_back() + even_stones.pop_back())\n  odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n  even_stones.push_back(even_stones.pop_back() + even_stones.pop_back())\n  odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n  even_stones.push_back(even_stones.pop_back() + even_stones.pop_back())\n  odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n  even_stones.push_back(even_stones.pop_back() + even_stones.pop_back())\n  odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n  even_stones.push_back(even_stones.pop_back() + even_stones.pop_back())\n  odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n  even_stones.push_back(even_stones.pop_back() + even_stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjz4gcfoq.rs:18:18\n   |\n18 |   let odd = n % 2\n   |                  ^ help: add `;` here\n19 |   let even = n - odd\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjz4gcfoq.rs:19:21\n   |\n19 |   let even = n - odd\n   |                     ^ help: add `;` here\n20 |   let odd_stones = make_a_pile(odd)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjz4gcfoq.rs:20:36\n   |\n20 |   let odd_stones = make_a_pile(odd)\n   |                                    ^ help: add `;` here\n21 |   let even_stones = make_a_pile(even)\n   |   --- unexpected token\n\nerror: expected `;`, found `odd_stones`\n  --> /tmp/tmpjz4gcfoq.rs:21:38\n   |\n21 |   let even_stones = make_a_pile(even)\n   |                                      ^ help: add `;` here\n22 |   odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n   |   ---------- unexpected token\n\nerror: expected `;`, found `even_stones`\n  --> /tmp/tmpjz4gcfoq.rs:22:70\n   |\n22 |   odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n   |                                                                      ^ help: add `;` here\n23 |   even_stones.push_back(even_stones.pop_back() + even_stones.pop_back())\n   |   ----------- unexpected token\n\nerror: expected `;`, found `odd_stones`\n  --> /tmp/tmpjz4gcfoq.rs:23:73\n   |\n23 |   even_stones.push_back(even_stones.pop_back() + even_stones.pop_back())\n   |                                                                         ^ help: add `;` here\n24 |   odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n   |   ---------- unexpected token\n\nerror: expected `;`, found `even_stones`\n  --> /tmp/tmpjz4gcfoq.rs:24:70\n   |\n24 |   odd_stones.push_back(odd_stones.pop_back() + odd_stones.pop_back())\n   |                                                                      ^ help: add `;` here\n25 |   even_stones.push_back(even_stones.pop_back() + even_stones.pop_back())\n   |   ----------- unexpected ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let n_odd = n % 2;\n  let n_even = n - n_odd;\n  let n_odd_stones = make_a_pile(n_odd);\n  let n_even_stones = make_a_pile(n_even);\n  let n_stones = n_odd_stones + n_even_stones;\n  return n_stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp41qhqavq.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp41qhqavq.rs:19:31\n   |\n19 |   let n_stones = n_odd_stones + n_even_stones;\n   |                  ------------ ^ ------------- Vec<isize>\n   |                  |\n   |                  Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpns9rnxap.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpns9rnxap.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpns9rnxap.rs:17:31\n   |\n17 |     return make_a_pile(n / 2) + make_a_pile(n / 2)\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpns9rnxap.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + make_a_pile(n / 2 + 1)\n   |            ------------------ ^ ---------------------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2\n  let even_n = n - odd_n\n  let odd_n_stones = make_a_pile(odd_n)\n  let even_n_stones = make_a_pile(even_n)\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_n_stones.pop_back())\n  odd_n_stones.push_back(odd_\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpp65txyu5.rs:15:20\n   |\n15 |   let odd_n = n % 2\n   |                    ^ help: add `;` here\n16 |   let even_n = n - odd_n\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp65txyu5.rs:16:25\n   |\n16 |   let even_n = n - odd_n\n   |                         ^ help: add `;` here\n17 |   let odd_n_stones = make_a_pile(odd_n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp65txyu5.rs:17:40\n   |\n17 |   let odd_n_stones = make_a_pile(odd_n)\n   |                                        ^ help: add `;` here\n18 |   let even_n_stones = make_a_pile(even_n)\n   |   --- unexpected token\n\nerror: expected `;`, found `odd_n_stones`\n  --> /tmp/tmpp65txyu5.rs:18:42\n   |\n18 |   let even_n_stones = make_a_pile(even_n)\n   |                                          ^ help: add `;` here\n19 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |   ------------ unexpected token\n\nerror: expected `;`, found `odd_n_stones`\n  --> /tmp/tmpp65txyu5.rs:19:50\n   |\n19 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |                                                  ^ help: add `;` here\n20 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |   ------------ unexpected token\n\nerror: expected `;`, found `odd_n_stones`\n  --> /tmp/tmpp65txyu5.rs:20:50\n   |\n20 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |                                                  ^ help: add `;` here\n21 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |   ------------ unexpected token\n\nerror: expected `;`, found `odd_n_stones`\n  --> /tmp/tmpp65txyu5.rs:21:50\n   |\n21 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |                                                  ^ help: add `;` here\n22 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |   ------------ unexpected token\n\nerror: expected `;`, found `odd_n_stones`\n  --> /tmp/tmpp65txyu5.rs:22:50\n   |\n22 |   odd_n_stones.push_back(odd_n_stones.pop_back())\n   |               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n);\n  for i in 0..n {\n    result[i] = odd ? i + 1 : i;\n  }\n  for i in 0..n - 1 {\n    result[i] += even ? i + 1 : i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `i`\n  --> /tmp/tmpmqfjym72.rs:19:23\n   |\n19 |     result[i] = odd ? i + 1 : i;\n   |                       ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found `i`\n  --> /tmp/tmpmqfjym72.rs:22:25\n   |\n22 |     result[i] += even ? i + 1 : i;\n   |                         ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpmqfjym72.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpmqfjym72.rs:17:16\n    |\n17  |   let result = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let level_size = n\n  if n % 2 == 0 {\n    level_size = n + 1\n  }\n  let level_count = Vec::new(level_size)\n  for i in 0..level_size - 1 {\n    level_count[i] = level_size\n  }\n  return level_count\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmp95rua249.rs:15:21\n   |\n15 |   let level_size = n\n   |                     ^ help: add `;` here\n16 |   if n % 2 == 0 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp95rua249.rs:19:41\n   |\n19 |   let level_count = Vec::new(level_size)\n   |                                         ^ help: add `;` here\n20 |   for i in 0..level_size - 1 {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp95rua249.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp95rua249.rs:19:21\n    |\n19  |   let level_count = Vec::new(level_size)\n    |                     ^^^^^^^^ ---------- supplied 1 argument\n    |                     |\n    |                     expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp95rua249.rs:21:5\n   |\n21 |     level_count[i] = level_size\n   |     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let levels = Vec::new();\n  let stones = Vec::new();\n  for i in 0..n {\n    if i % 2 == 0 {\n      levels = levels.push_back(i * 2);\n    } else {\n      levels = levels.push_back(i * 2 + 1);\n    }\n    stones = stones.push_back(i);\n  }\n  levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpfuabwbbp.rs:16:23\n   |\n16 |       levels = levels.push_back(i * 2);\n   |                       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpfuabwbbp.rs:18:23\n   |\n18 |       levels = levels.push_back(i * 2 + 1);\n   |                       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpfuabwbbp.rs:20:21\n   |\n20 |     stones = stones.push_back(i);\n   |                     ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let n_odd = n % 2 == 1;\n  let n_even = n % 2 == 0;\n  let n_odd_pile = make_a_pile(n_odd);\n  let n_even_pile = make_a_pile(n_even);\n  let n_odd_pile_len = n_odd_pile.len();\n  let n_even_pile_len = n_even_pile.len();\n  let n_pile_len = n_odd_pile_len + n_even_pile_len;\n  let n_pile = Vec::new(n_pile_len);\n  let i = 0;\n  for i in 0..n_odd_pile_len {\n    n_pile[i] = n_odd_pile[i];\n  }\n  for i in n_odd_pile_len..n_pile_len {\n    n_pile[i] = n_even_pile[i - n_odd_pile_len];\n  }\n  return n_pile;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpzgua03kx.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzgua03kx.rs:17:32\n   |\n17 |   let n_odd_pile = make_a_pile(n_odd);\n   |                                ^^^^^ expected `isize`, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzgua03kx.rs:18:33\n   |\n18 |   let n_even_pile = make_a_pile(n_even);\n   |                                 ^^^^^^ expected `isize`, found `bool`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpzgua03kx.rs:22:16\n    |\n22  |   let n_pile = Vec::new(n_pile_len);\n    |                ^^^^^^^^ ---------- supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = odd ? n + 1 : n;\n  let levels = Vec::new(n);\n  for i in 0..n {\n    levels[i] = stones;\n    stones = stones + (odd ? odd : even);\n  }\n  return levels;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `n`\n  --> /tmp/tmpzuumh5bf.rs:17:22\n   |\n17 |   let stones = odd ? n + 1 : n;\n   |                      ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpzuumh5bf.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  let i = 0\n  let j = 0\n  let k = 0\n  while i < n {\n    if odd {\n      result[i] = k\n      k += 2\n    } else {\n      result[i] = k\n      k += 1\n    }\n    i += 1\n  }\n  while j < n {\n    if even {\n      result[j] = k\n      k += 2\n    } else {\n      result[j] = k\n      k += 1\n    }\n    j += 1\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpljzhbxrd.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpljzhbxrd.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpljzhbxrd.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpljzhbxrd.rs:18:12\n   |\n18 |   let i = 0\n   |            ^ help: add `;` here\n19 |   let j = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpljzhbxrd.rs:19:12\n   |\n19 |   let j = 0\n   |            ^ help: add `;` here\n20 |   let k = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpljzhbxrd.rs:20:12\n   |\n20 |   let k = 0\n   |            ^ help: add `;` here\n21 |   while i < n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `k`\n  --> /tmp/tmpljzhbxrd.rs:23:20\n   |\n23 |       result[i] = k\n   |                    ^ help: add `;` here\n24 |       k += 2\n   |       - unexpected token\n\nerror: expected `;`, found `k`\n  --> /tmp/tmpljzhbxrd.rs:26:20\n   |\n26 |       result[i] = k\n   |                    ^ help: add `;` here\n27 |       k += 1\n   |       - unexpected token\n\nerror: expected `;`, found `k`\n  --> /tmp/tmpljzhbxrd.rs:33:20\n   |\n33 |       result[j] = k\n   |                    ^ help: add `;` here\n34 |       k += 2\n   |       - unexpected token\n\nerror: expected `;`, found `k`\n  --> /tmp/tmpljzhbxrd.rs:36:20\n   |\n36 |       result[j] = k\n   |                    ^ help: add `;` here\n37 |       k += 1\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpljzhbxrd.rs:13:12\n    |\n13  |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let result = Vec::new();\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let level = 0;\n  let stones = 0;\n  while (true) {\n    if (odd) {\n      stones += level + 1;\n    } else if (even) {\n      stones += level;\n    }\n    result.push_back(stones);\n    if (level == n - 1) {\n      break;\n    }\n    level += 1;\n    odd = !odd;\n    even = !even;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp5z2xt7i1.rs:17:9\n   |\n17 |   while (true) {\n   |         ^    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -   while (true) {\n17 +   while true {\n   | \n\nwarning: denote infinite loops with `loop { ... }`\n  --> /tmp/tmp5z2xt7i1.rs:17:3\n   |\n17 |   while (true) {\n   |   ^^^^^^^^^^^^ help: use `loop`\n   |\n   = note: `#[warn(while_true)]` on by default\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5z2xt7i1.rs:18:8\n   |\n18 |     if (odd) {\n   |        ^   ^\n   |\nhelp: remove these parentheses\n   |\n18 -     if (odd) {\n18 +     if odd {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5z2xt7i1.rs:20:15\n   |\n20 |     } else if (even) {\n   |               ^    ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (even) {\n20 +     } else if even {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5z2xt7i1.rs:24:8\n   |\n24 |     if (level == n - 1) {\n   |        ^              ^\n   |\nhelp: remove these parentheses\n   |\n24 -     if (level == n - 1) {\n24 +     if level == n - 1 {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5z2xt7i1.rs:18:8\n   |\n18 |     if (odd) {\n   |        ^^^^^ expected `bool`, found `isize`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp5z2xt7i1.rs:23:12\n   |\n23 |     result.push_back(stones);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors; 5 warnings emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpns9rnxap.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpns9rnxap.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpns9rnxap.rs:17:31\n   |\n17 |     return make_a_pile(n / 2) + make_a_pile(n / 2)\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpns9rnxap.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + make_a_pile(n / 2 + 1)\n   |            ------------------ ^ ---------------------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  let i = 0\n  let level = 1\n  while i < n {\n    if odd {\n      result[i] = level\n      i += 1\n      level += 1\n    } else if even {\n      result[i] = level\n      i += 1\n      level += 2\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_9l26gwr.rs:15:18\n   |\n15 |   let odd = n % 2\n   |                  ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_9l26gwr.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_9l26gwr.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_9l26gwr.rs:18:12\n   |\n18 |   let i = 0\n   |            ^ help: add `;` here\n19 |   let level = 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp_9l26gwr.rs:19:16\n   |\n19 |   let level = 1\n   |                ^ help: add `;` here\n20 |   while i < n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_9l26gwr.rs:22:24\n   |\n22 |       result[i] = level\n   |                        ^ help: add `;` here\n23 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found `level`\n  --> /tmp/tmp_9l26gwr.rs:23:13\n   |\n23 |       i += 1\n   |             ^ help: add `;` here\n24 |       level += 1\n   |       ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp_9l26gwr.rs:26:24\n   |\n26 |       result[i] = level\n   |                        ^ help: add `;` here\n27 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found `level`\n  --> /tmp/tmp_9l26gwr.rs:27:13\n   |\n27 |       i += 1\n   |             ^ help: add `;` here\n28 |       level += 2\n   |       ----- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_9l26gwr.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function define",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if odd {\n      result[i] = n + 1\n    } else if even {\n      result[i] = n\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph8rb22mk.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph8rb22mk.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph8rb22mk.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph8rb22mk.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmph8rb22mk.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmph8rb22mk.rs:20:7\n   |\n20 |       result[i] = n + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmph8rb22mk.rs:22:7\n   |\n22 |       result[i] = n\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2;\n  let even_n = n - odd_n;\n  let odd_n_stones = make_a_pile(odd_n);\n  let even_n_stones = make_a_pile(even_n);\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(odd_n_stones.pop_back());\n  odd_n_stones.push_back(\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp2_nxmqnu.rs:38:25\n   |\n11 | fn make_a_pile(n: isize) -> Vec<isize> {\n   |                                        - closing delimiter possibly meant for this\n...\n38 |   odd_n_stones.push_back(\n   |                         ^ unclosed delimiter\n39 | }\n   | ^ mismatched closing delimiter\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp2_nxmqnu.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp2_nxmqnu.rs:19:16\n   |\n19 |   odd_n_stones.push_back(odd_n_stones.pop_back());\n   |                ^^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp2_nxmqnu.rs:19:39\n   |\n19 |   odd_n_stones.push_back(odd_n_stones.pop_back());\n   |                                       ^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp2_nxmqnu.rs:20:16\n   |\n20 |   odd_n_stones.push_back(odd_n_stones.pop_back());\n   |                ^^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp2_nxmqnu.rs:20:39\n   |\n20 |   odd_n_stones.push_back(odd_n_stones.pop_back());\n   |                                       ^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp2_nxmqnu.rs:21:16\n   |\n21 |   odd_n_stones.push_back(odd_n_stones.pop_back());\n   |                ^^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `pop_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp2_nxmqnu.rs:21:3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let stones = odd ? n + 1 : n\n  let levels = Vec::new(n)\n  for i in 0..n {\n    levels[i] = stones\n    stones = stones + stones\n  }\n  return levels\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpno781gw9.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpno781gw9.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let stones = odd ? n + 1 : n\n   |   --- unexpected token\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found `n`\n  --> /tmp/tmpno781gw9.rs:17:22\n   |\n17 |   let stones = odd ? n + 1 : n\n   |                      ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpno781gw9.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  if n == 1 {\n    return Vec::new(1)\n  }\n  let odd = n % 2\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  for i in 0..n {\n    if i % 2 == odd {\n      result[i] = i + 1\n    } else if i % 2 == even {\n      result[i] = i + 2\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_32yzl3n.rs:18:18\n   |\n18 |   let odd = n % 2\n   |                  ^ help: add `;` here\n19 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_32yzl3n.rs:19:24\n   |\n19 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n20 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_32yzl3n.rs:20:27\n   |\n20 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n21 |   for i in 0..n {\n   |   --- unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_32yzl3n.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_32yzl3n.rs:16:12\n    |\n16  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_32yzl3n.rs:20:16\n    |\n20  |   let result = Vec::new(n)\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp_32yzl3n.rs:23:7\n   |\n23 |       result[i] = i + 1\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_32yzl3n.rs:24:24\n   |\n24 |     } else if i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2 == 1;\n  let even_n = n % 2 == 0;\n  let stones = Vec::new(n);\n  let level_size = odd_n ? n + 1 : n;\n  for i in 0..n {\n    stones = stones.concat(Vec::new(level_size));\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `n`\n  --> /tmp/tmpdwqrdacg.rs:18:28\n   |\n18 |   let level_size = odd_n ? n + 1 : n;\n   |                            ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpdwqrdacg.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpdwqrdacg.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0);\n  }\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let result = Vec::new(n);\n  for i in 0..n {\n    if odd {\n      result[i] = n + 1;\n    } else {\n      result[i] = n;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpmmi60on_.rs:13:12\n    |\n13  |     return Vec::new(0);\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpmmi60on_.rs:17:16\n    |\n17  |   let result = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmmi60on_.rs:19:8\n   |\n19 |     if odd {\n   |        ^^^ expected `bool`, found `isize`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpmmi60on_.rs:20:7\n   |\n20 |       result[i] = n + 1;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpmmi60on_.rs:22:7\n   |\n22 |       result[i] = n;\n   |       ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0277, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd_n = n % 2;\n  let even_n = n - odd_n;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    stones[i] = stones[i + 1] + odd_n;\n    stones[i] += stones[i + 2] + even_n;\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwwtr23tu.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwwtr23tu.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpwwtr23tu.rs:19:5\n   |\n19 |     stones[i] = stones[i + 1] + odd_n;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpwwtr23tu.rs:19:17\n   |\n19 |     stones[i] = stones[i + 1] + odd_n;\n   |                 ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpwwtr23tu.rs:20:5\n   |\n20 |     stones[i] += stones[i + 2] + even_n;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpwwtr23tu.rs:20:18\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let n_odd = n % 2;\n  let n_even = n % 2;\n  let result = Vec::new();\n  let i = 0;\n  while (i < n) {\n    if (i % 2 == n_odd) {\n      result.push_back(i + 1);\n    } else if (i % 2 == n_even) {\n      result.push_back(i + 2);\n    } else {\n      result.push_back(i + 1);\n    }\n    i += 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpj212cvcy.rs:16:9\n   |\n16 |   while (i < n) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -   while (i < n) {\n16 +   while i < n {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpj212cvcy.rs:17:8\n   |\n17 |     if (i % 2 == n_odd) {\n   |        ^              ^\n   |\nhelp: remove these parentheses\n   |\n17 -     if (i % 2 == n_odd) {\n17 +     if i % 2 == n_odd {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpj212cvcy.rs:19:15\n   |\n19 |     } else if (i % 2 == n_even) {\n   |               ^               ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (i % 2 == n_even) {\n19 +     } else if i % 2 == n_even {\n   | \n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpj212cvcy.rs:18:14\n   |\n18 |       result.push_back(i + 1);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpj212cvcy.rs:20:14\n   |\n20 |       result.push_back(i + 2);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpj212cvcy.rs:22:14\n   |\n22 |       result.push_back(i + 1);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 3 previous errors; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    if odd {\n      stones = stones.concat(odd);\n    } else {\n      stones = stones.concat(even);\n    }\n  }\n  return stones\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpv6rinvs2.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpv6rinvs2.rs:17:16\n    |\n17  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpv6rinvs2.rs:20:23\n    |\n20  |       stones = stones.concat(odd);\n    |                       ^^^^^^ --- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpv6rinvs2.rs:22:23\n    |\n22  |       stones = stones.concat(even);\n    |                       ^^^^^^ ---- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpv6rinvs2.rs:20:23\n    |\n20  |       stones = stones.concat(odd);\n    |                       ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpv6rinvs2.rs:22:23\n    |\n22  |       stones = stones.concat(even);\n    |                       ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let odd = n % 2;\n  let even = n % 2 == 0;\n  let stones = Vec::new(n);\n  for i in 0..n {\n    if i % 2 == odd {\n      stones = stones.concat(i + 1);\n    } else if i % 2 == even {\n      stones = stones.concat(i);\n    }\n  }\n  return stones;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpohusgatz.rs:14:16\n    |\n14  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpohusgatz.rs:17:23\n    |\n17  |       stones = stones.concat(i + 1);\n    |                       ^^^^^^ ----- supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpohusgatz.rs:18:24\n   |\n18 |     } else if i % 2 == even {\n   |                        ^^^^ expected `isize`, found `bool`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpohusgatz.rs:19:23\n    |\n19  |       stones = stones.concat(i);\n    |                       ^^^^^^ - supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpohusgatz.rs:17:23\n    |\n17  |       stones = stones.concat(i + 1);\n    |                       ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpohusgatz.rs:19:23\n    |\n19  |       stones = stones.concat(i);\n    |                       ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: abortin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  let levels = Vec::new(n);\n  let stones = Vec::new(n);\n  for i in 0..n {\n    levels[i] = stones.len;\n    stones.push(i);\n  }\n  return levels;\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbygm5tz5.rs:12:16\n    |\n12  |   let levels = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbygm5tz5.rs:13:16\n    |\n13  |   let stones = Vec::new(n);\n    |                ^^^^^^^^ - supplied 1 argument\n    |                |\n    |                expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpbygm5tz5.rs:15:5\n   |\n15 |     levels[i] = stones.len;\n   |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpbygm5tz5.rs:15:24\n   |\n15 |     levels[i] = stones.len;\n   |                        ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |     levels[i] = stones.len();\n   |                           ++\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277, E0616.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  } else if n == 1 {\n    return Vec::new(1)\n  } else if n % 2 == 0 {\n    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  } else {\n    return make_a_pile(n / 2) + make_a_pile(n / 2 + 1)\n  }\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpns9rnxap.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpns9rnxap.rs:15:12\n    |\n15  |     return Vec::new(1)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpns9rnxap.rs:17:31\n   |\n17 |     return make_a_pile(n / 2) + make_a_pile(n / 2)\n   |            ------------------ ^ ------------------ Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpns9rnxap.rs:19:31\n   |\n19 |     return make_a_pile(n / 2) + make_a_pile(n / 2 + 1)\n   |            ------------------ ^ ---------------------- Vec<isize>\n   |            |\n   |            Vec<isize>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0369.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in a vector, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(3)\n/// vec![3, 5, 7]\nfn make_a_pile(n: isize) -> Vec<isize> {\n  if n == 0 {\n    return Vec::new(0)\n  }\n  let odd = n % 2 == 1\n  let even = n % 2 == 0\n  let result = Vec::new(n)\n  let i = 0\n  let j = 0\n  while i < n {\n    if odd {\n      result[i] = n\n      i += 1\n    } else if even {\n      result[i] = n + 1\n      i += 2\n    } else {\n      result[i] = n + 2\n      i += 2\n    }\n    j += 1\n  }\n  return result\n}\n\nfn main() {\n    let candidate = make_a_pile;\n    assert_eq!(candidate(3), vec![3, 5, 7]);\n    assert_eq!(candidate(4), vec![4, 6, 8, 10]);\n    assert_eq!(candidate(5), vec![5, 7, 9, 11, 13]);\n    assert_eq!(candidate(6), vec![6, 8, 10, 12, 14, 16]);\n    assert_eq!(candidate(8), vec![8, 10, 12, 14, 16, 18, 20, 22]);\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyagq2cbe.rs:15:23\n   |\n15 |   let odd = n % 2 == 1\n   |                       ^ help: add `;` here\n16 |   let even = n % 2 == 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpyagq2cbe.rs:16:24\n   |\n16 |   let even = n % 2 == 0\n   |                        ^ help: add `;` here\n17 |   let result = Vec::new(n)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpyagq2cbe.rs:17:27\n   |\n17 |   let result = Vec::new(n)\n   |                           ^ help: add `;` here\n18 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpyagq2cbe.rs:18:12\n   |\n18 |   let i = 0\n   |            ^ help: add `;` here\n19 |   let j = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpyagq2cbe.rs:19:12\n   |\n19 |   let j = 0\n   |            ^ help: add `;` here\n20 |   while i < n {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpyagq2cbe.rs:22:20\n   |\n22 |       result[i] = n\n   |                    ^ help: add `;` here\n23 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpyagq2cbe.rs:25:24\n   |\n25 |       result[i] = n + 1\n   |                        ^ help: add `;` here\n26 |       i += 2\n   |       - unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpyagq2cbe.rs:28:24\n   |\n28 |       result[i] = n + 2\n   |                        ^ help: add `;` here\n29 |       i += 2\n   |       - unexpected token\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpyagq2cbe.rs:13:12\n    |\n13  |     return Vec::new(0)\n    |            ^^^^^^^^ - supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpyagq2cbe.rs:17:16\n    |\n17  |   let result = Vec::new(n)\n    |                ^^^^^^^^ -",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}