{
  "name": "HumanEval_83_starts_one_ends",
  "language": "rs",
  "prompt": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digit = i;\n    while digit > 0 {\n      digit /= 10;\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `digit`\n --> /tmp/tmpc8h2i52n.rs:8:7\n  |\n6 |     let digit = i;\n  |         -----\n  |         |\n  |         first assignment to `digit`\n  |         help: consider making this binding mutable: `mut digit`\n7 |     while digit > 0 {\n8 |       digit /= 10;\n  |       ^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpc8h2i52n.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let num = i\n    let digits = []\n    while num > 0 {\n      digits.push(num % 10)\n      num /= 10\n    }\n    if digits.length == 1 && digits[0] == 1 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpz1e2mdb8.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpz1e2mdb8.rs:6:16\n  |\n6 |     let num = i\n  |                ^ help: add `;` here\n7 |     let digits = []\n  |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpz1e2mdb8.rs:7:20\n  |\n7 |     let digits = []\n  |                    ^ help: add `;` here\n8 |     while num > 0 {\n  |     ----- unexpected token\n\nerror: expected `;`, found `num`\n  --> /tmp/tmpz1e2mdb8.rs:9:28\n   |\n9  |       digits.push(num % 10)\n   |                            ^ help: add `;` here\n10 |       num /= 10\n   |       --- unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n --> /tmp/tmpz1e2mdb8.rs:9:14\n  |\n9 |       digits.push(num % 10)\n  |              ^^^^ method not found in `[_; 0]`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tmp/tmpz1e2mdb8.rs:12:15\n   |\n12 |     if digits.length == 1 && digits[0] == 1 {\n   |               ^^^^^^\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i < n {\n    let j = i;\n    while j < n && j % i == 0 {\n      j += i;\n    }\n    count += j - i + 1;\n    i = j + 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `j`\n --> /tmp/tmp_59tubkt.rs:9:7\n  |\n7 |     let j = i;\n  |         -\n  |         |\n  |         first assignment to `j`\n  |         help: consider making this binding mutable: `mut j`\n8 |     while j < n && j % i == 0 {\n9 |       j += i;\n  |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp_59tubkt.rs:11:5\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |     count += j - i + 1;\n   |     ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp_59tubkt.rs:12:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n12 |     i = j + 1;\n   |     ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpszgb9o5u.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    let digits = [0..9].map(|x| x + i).collect();\n    if digits.contains(1) {\n      count += 1;\n    }\n    if digits.contains(0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0369]: cannot add `isize` to `std::ops::Range<{integer}>`\n --> /tmp/tmp3w0x_4db.rs:6:35\n  |\n6 |     let digits = [0..9].map(|x| x + i).collect();\n  |                                 - ^ - isize\n  |                                 |\n  |                                 std::ops::Range<{integer}>\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0369`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else if i % 2 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp2jkojj6c.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp2jkojj6c.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp2jkojj6c.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i == 0 || i == n - 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpqtu89pb1.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpqtu89pb1.rs:10:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n10 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else if i > 0 && i < n {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpf3l9ud1r.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    if i == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpq86tirrl.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpq86tirrl.rs:10:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n10 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let j = i\n    while j > 0 {\n      j -= 1\n      if j == 0 {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp4rjrflpp.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmp4rjrflpp.rs:6:14\n  |\n6 |     let j = i\n  |              ^ help: add `;` here\n7 |     while j > 0 {\n  |     ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n --> /tmp/tmp4rjrflpp.rs:8:13\n  |\n8 |       j -= 1\n  |             ^ help: add `;` here\n9 |       if j == 0 {\n  |       -- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    }\n    if i == n - 1 {\n      count += 1;\n    }\n    if i > 0 && i < n - 1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpx9ax72po.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpx9ax72po.rs:10:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpx9ax72po.rs:13:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpszgb9o5u.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    let j = i\n    while j < n {\n      if j == 0 {\n        count += 1\n        break\n      }\n      j += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpi42cfjbw.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpi42cfjbw.rs:6:14\n  |\n6 |     let j = i\n  |              ^ help: add `;` here\n7 |     while j < n {\n  |     ----- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpi42cfjbw.rs:9:19\n   |\n9  |         count += 1\n   |                   ^ help: add `;` here\n10 |         break\n   |         ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j % i == 0 {\n        count += 1;\n        break;\n      }\n      j += i;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpekd1owzx.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpekd1owzx.rs:13:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n13 |       j += i;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpekd1owzx.rs:15:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else {\n      count += starts_one_ends(n - i - 1);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpgvfi2yq5.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpgvfi2yq5.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += starts_one_ends(n - i - 1);\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    }\n    if i == n {\n      count += 1;\n    }\n    if i > 0 && i < n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw5zomr5d.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw5zomr5d.rs:10:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw5zomr5d.rs:13:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else if i > 0 && i < n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpczxiz5s8.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpczxiz5s8.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpczxiz5s8.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpszgb9o5u.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp_7c5z8x7.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    let j = i + 1;\n    while j < n {\n      if j % 2 == 0 {\n        j += 1;\n      } else {\n        break;\n      }\n    }\n    if j == n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `j`\n --> /tmp/tmp20qqp3aj.rs:9:9\n  |\n6 |     let j = i + 1;\n  |         -\n  |         |\n  |         first assignment to `j`\n  |         help: consider making this binding mutable: `mut j`\n...\n9 |         j += 1;\n  |         ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp20qqp3aj.rs:15:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpgjgnn_dl.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    }\n    if i == n {\n      count += 1;\n    }\n    if i > 0 && i < n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw5zomr5d.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw5zomr5d.rs:10:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw5zomr5d.rs:13:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(i + 1);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpdm8t08cq.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpdm8t08cq.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpdm8t08cq.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(i + 1);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    }\n    if i == n - 1 {\n      count += 1;\n    }\n    if i > 0 && i < n - 1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpx9ax72po.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpx9ax72po.rs:10:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpx9ax72po.rs:13:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  let i = 0\n  while i < n {\n    let digit = i % 10\n    if digit == 1 {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpt213nwia.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   let i = 0\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpt213nwia.rs:5:12\n  |\n5 |   let i = 0\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n --> /tmp/tmpt213nwia.rs:7:23\n  |\n7 |     let digit = i % 10\n  |                       ^ help: add `;` here\n8 |     if digit == 1 {\n  |     -- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    if digit == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpvh0_oq7i.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpvh0_oq7i.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpszgb9o5u.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else if i > 0 && i < n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpczxiz5s8.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpczxiz5s8.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpczxiz5s8.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    if digit == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpvh0_oq7i.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpvh0_oq7i.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else if i > 0 {\n      count += starts_one_ends(i - 1);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpt1issj6k.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpt1issj6k.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpt1issj6k.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(i + 1)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpnc5a5eet.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else if i % 2 == 0 {\n      count += 1\n    } else {\n      count += 2\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpkzls0tym.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpszgb9o5u.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else if i % 2 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp2jkojj6c.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp2jkojj6c.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp2jkojj6c.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpszgb9o5u.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    }\n    if i == n {\n      count += 1\n    }\n    if i > 0 && i < n {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpstrjx5rd.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i < n {\n    if i % 2 == 0 {\n      count += starts_one_ends(i / 2);\n    }\n    i *= 2;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmperpebd61.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += starts_one_ends(i / 2);\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmperpebd61.rs:10:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n10 |     i *= 2;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let j = i;\n    while j < n and j >= 0 {\n      if j == 0 {\n        count += 1;\n      } else {\n        count += 1 + j - (j - 1) % 2;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: `and` is not a logical operator\n --> /tmp/tmpb0dj08y9.rs:8:17\n  |\n8 |     while j < n and j >= 0 {\n  |                 ^^^ help: use `&&` to perform logical conjunction\n  |\n  = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  let i = 1\n  while i <= n {\n    let j = i\n    while j <= n {\n      if j % 10 == 1 {\n        count += 1\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpculuncl_.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   let i = 1\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpculuncl_.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i <= n {\n  |   ----- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpculuncl_.rs:7:14\n  |\n7 |     let j = i\n  |              ^ help: add `;` here\n8 |     while j <= n {\n  |     ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    if i == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpq86tirrl.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpq86tirrl.rs:10:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n10 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i < n {\n    let j = i;\n    while j < n {\n      if j == i + 1 {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpy0cs54qh.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpy0cs54qh.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpy0cs54qh.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    if i == 1 {\n      count += 1;\n    } else {\n      count += starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpwg308az2.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpwg308az2.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += starts_one_ends(n - i);\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    if digit == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpvh0_oq7i.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpvh0_oq7i.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    let digits = i;\n    let start = digits.start(1);\n    let end = digits.end(1);\n    if start == 1 {\n      count += 1;\n    }\n    if end == 1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0599]: no method named `start` found for type `isize` in the current scope\n --> /tmp/tmpx02x_e21.rs:7:24\n  |\n7 |     let start = digits.start(1);\n  |                        ^^^^^ method not found in `isize`\n\nerror[E0599]: no method named `end` found for type `isize` in the current scope\n --> /tmp/tmpx02x_e21.rs:8:22\n  |\n8 |     let end = digits.end(1);\n  |                      ^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else if i % 2 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpb1bylcn1.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j % i == 0 {\n        count += 1;\n        break;\n      }\n      j += i;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpekd1owzx.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpekd1owzx.rs:13:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n13 |       j += i;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpekd1owzx.rs:15:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    }\n    if i == n {\n      count += 1;\n    }\n    if i > 0 && i < n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw5zomr5d.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw5zomr5d.rs:10:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw5zomr5d.rs:13:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  let i = 0\n  while i < n {\n    let digit = i % 10\n    if digit == 1 {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpt213nwia.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   let i = 0\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpt213nwia.rs:5:12\n  |\n5 |   let i = 0\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n --> /tmp/tmpt213nwia.rs:7:23\n  |\n7 |     let digit = i % 10\n  |                       ^ help: add `;` here\n8 |     if digit == 1 {\n  |     -- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j == i || j == i + 1 {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp8t9lfb_6.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmp8t9lfb_6.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp8t9lfb_6.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let digit = i % 10\n    if digit == 1 {\n      count += 1\n    }\n    if digit == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpu2376y21.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n --> /tmp/tmpu2376y21.rs:6:23\n  |\n6 |     let digit = i % 10\n  |                       ^ help: add `;` here\n7 |     if digit == 1 {\n  |     -- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  let i = 0\n  while i < n {\n    let digit = 1\n    while digit <= 9 {\n      count += digit\n      i += 1\n      digit *= 10\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmppnnvz21y.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   let i = 0\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmppnnvz21y.rs:5:12\n  |\n5 |   let i = 0\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmppnnvz21y.rs:7:18\n  |\n7 |     let digit = 1\n  |                  ^ help: add `;` here\n8 |     while digit <= 9 {\n  |     ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmppnnvz21y.rs:9:21\n   |\n9  |       count += digit\n   |                     ^ help: add `;` here\n10 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found `digit`\n  --> /tmp/tmppnnvz21y.rs:10:13\n   |\n10 |       i += 1\n   |             ^ help: add `;` here\n11 |       digit *= 10\n   |       ----- unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j == i || j == i + 1 {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp8t9lfb_6.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmp8t9lfb_6.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp8t9lfb_6.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else if i > 0 {\n      count += starts_one_ends(i - 1)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmphy1rxgm8.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpgjgnn_dl.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let digits = n - i\n    let start = 1\n    let end = 1\n    for j in 1..digits {\n      start *= 10\n      end *= 10\n    }\n    if start == end {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp3d4pf_vk.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp3d4pf_vk.rs:6:23\n  |\n6 |     let digits = n - i\n  |                       ^ help: add `;` here\n7 |     let start = 1\n  |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp3d4pf_vk.rs:7:18\n  |\n7 |     let start = 1\n  |                  ^ help: add `;` here\n8 |     let end = 1\n  |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp3d4pf_vk.rs:8:16\n  |\n8 |     let end = 1\n  |                ^ help: add `;` here\n9 |     for j in 1..digits {\n  |     --- unexpected token\n\nerror: expected `;`, found `end`\n  --> /tmp/tmp3d4pf_vk.rs:10:18\n   |\n10 |       start *= 10\n   |                  ^ help: add `;` here\n11 |       end *= 10\n   |       --- unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j == i + 1 {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpqm9ah5pv.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpqm9ah5pv.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpqm9ah5pv.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else if i % 2 == 0 {\n      count += 1\n    } else {\n      count += 2\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpkzls0tym.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    }\n    if i == n {\n      count += 1;\n    }\n    if i > 0 && i < n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw5zomr5d.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw5zomr5d.rs:10:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw5zomr5d.rs:13:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpgjgnn_dl.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    let digits = [0..9].map(|x| x + i).filter(|x| x > 0);\n    if digits.count(1) > 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0369]: cannot add `isize` to `std::ops::Range<{integer}>`\n --> /tmp/tmprw3216q6.rs:6:35\n  |\n6 |     let digits = [0..9].map(|x| x + i).filter(|x| x > 0);\n  |                                 - ^ - isize\n  |                                 |\n  |                                 std::ops::Range<{integer}>\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0369`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 || i == n {\n      count += 1\n    }\n    if i > 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpr48evufy.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digit = i;\n    while digit > 0 {\n      digit /= 10;\n      count += digit;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `digit`\n --> /tmp/tmp45133mvm.rs:8:7\n  |\n6 |     let digit = i;\n  |         -----\n  |         |\n  |         first assignment to `digit`\n  |         help: consider making this binding mutable: `mut digit`\n7 |     while digit > 0 {\n8 |       digit /= 10;\n  |       ^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp45133mvm.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += digit;\n  |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    }\n    if i == n {\n      count += 1;\n    }\n    if i > 0 && i < n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw5zomr5d.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw5zomr5d.rs:10:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw5zomr5d.rs:13:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = 1;\n    while j <= n {\n      if j == i {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp23wknz0y.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmp23wknz0y.rs:12:7\n   |\n7  |     let j = 1;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp23wknz0y.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpgjgnn_dl.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j % i == 0 {\n        count += 1;\n        break;\n      }\n      j += i;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpekd1owzx.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpekd1owzx.rs:13:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n13 |       j += i;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpekd1owzx.rs:15:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j == i {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp81q7e9__.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmp81q7e9__.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp81q7e9__.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else if i % 2 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpb1bylcn1.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    if i == 1 {\n      count += 1\n    }\n    if i == n {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp485dj0gd.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    if i == 1 {\n      count += 1;\n    }\n    i *= 10;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpj83ltav4.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpj83ltav4.rs:10:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n10 |     i *= 10;\n   |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digit = i;\n    let start = digit;\n    let end = digit;\n    while digit > 0 {\n      digit -= 1;\n      start -= 1;\n      end -= 1;\n    }\n    if start == 1 {\n      count += 1;\n    }\n    if end == 1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `digit`\n  --> /tmp/tmp0t19t9m2.rs:10:7\n   |\n6  |     let digit = i;\n   |         -----\n   |         |\n   |         first assignment to `digit`\n   |         help: consider making this binding mutable: `mut digit`\n...\n10 |       digit -= 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `start`\n  --> /tmp/tmp0t19t9m2.rs:11:7\n   |\n7  |     let start = digit;\n   |         -----\n   |         |\n   |         first assignment to `start`\n   |         help: consider making this binding mutable: `mut start`\n...\n11 |       start -= 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `end`\n  --> /tmp/tmp0t19t9m2.rs:12:7\n   |\n8  |     let end = digit;\n   |         ---\n   |         |\n   |         first assignment to `end`\n   |         help: consider making this binding mutable: `mut end`\n...\n12 |       end -= 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp0t19t9m2.rs:15:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp0t19t9m2.rs:18:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let digit = i\n    while digit > 0 {\n      digit /= 10\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpild1gbd5.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpild1gbd5.rs:6:18\n  |\n6 |     let digit = i\n  |                  ^ help: add `;` here\n7 |     while digit > 0 {\n  |     ----- unexpected token\n\nerror: expected `;`, found `count`\n --> /tmp/tmpild1gbd5.rs:8:18\n  |\n8 |       digit /= 10\n  |                  ^ help: add `;` here\n9 |       count += 1\n  |       ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpszgb9o5u.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j == i || j == i + 1 {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp8t9lfb_6.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmp8t9lfb_6.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp8t9lfb_6.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i /= 10;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpbaq9odu6.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpbaq9odu6.rs:11:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i /= 10;\n   |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    if i == 1 {\n      count += 1\n    }\n    if i == n {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp485dj0gd.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = 1;\n    while i < n and digit <= 9 {\n      digit = digit * 10 + 1;\n      i += 1;\n    }\n    if i < n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: `and` is not a logical operator\n --> /tmp/tmptrspuje3.rs:8:17\n  |\n8 |     while i < n and digit <= 9 {\n  |                 ^^^ help: use `&&` to perform logical conjunction\n  |\n  = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digit = i;\n    let digit_count = 1;\n    while digit > 0 {\n      digit /= 10;\n      digit_count += 1;\n    }\n    if digit_count == 1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `digit`\n --> /tmp/tmpzd1c7tn0.rs:9:7\n  |\n6 |     let digit = i;\n  |         -----\n  |         |\n  |         first assignment to `digit`\n  |         help: consider making this binding mutable: `mut digit`\n...\n9 |       digit /= 10;\n  |       ^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `digit_count`\n  --> /tmp/tmpzd1c7tn0.rs:10:7\n   |\n7  |     let digit_count = 1;\n   |         -----------\n   |         |\n   |         first assignment to `digit_count`\n   |         help: consider making this binding mutable: `mut digit_count`\n...\n10 |       digit_count += 1;\n   |       ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpzd1c7tn0.rs:13:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let digit = i\n    while digit > 0 {\n      digit = digit / 10\n      count += digit\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp7ci177ck.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmp7ci177ck.rs:6:18\n  |\n6 |     let digit = i\n  |                  ^ help: add `;` here\n7 |     while digit > 0 {\n  |     ----- unexpected token\n\nerror: expected `;`, found `count`\n --> /tmp/tmp7ci177ck.rs:8:25\n  |\n8 |       digit = digit / 10\n  |                         ^ help: add `;` here\n9 |       count += digit\n  |       ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    if i == 1 {\n      count += 1;\n    } else {\n      count += starts_one_ends(n - i);\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp47k19eof.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp47k19eof.rs:10:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |       count += starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp47k19eof.rs:12:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n12 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = 1;\n    while i < n and digit <= 9 {\n      digit += 1;\n      i += 1;\n    }\n    if digit == 10 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: `and` is not a logical operator\n --> /tmp/tmpgyqwbf89.rs:8:17\n  |\n8 |     while i < n and digit <= 9 {\n  |                 ^^^ help: use `&&` to perform logical conjunction\n  |\n  = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let digits = i.to_string()\n    let start = digits.find(1)\n    let end = digits.find_last_of(1)\n    if start == 0 || end == n - 1 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpje1td0al.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpje1td0al.rs:6:31\n  |\n6 |     let digits = i.to_string()\n  |                               ^ help: add `;` here\n7 |     let start = digits.find(1)\n  |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpje1td0al.rs:7:31\n  |\n7 |     let start = digits.find(1)\n  |                               ^ help: add `;` here\n8 |     let end = digits.find_last_of(1)\n  |     --- unexpected token\n\nerror: expected `;`, found keyword `if`\n --> /tmp/tmpje1td0al.rs:8:37\n  |\n8 |     let end = digits.find_last_of(1)\n  |                                     ^ help: add `;` here\n9 |     if start == 0 || end == n - 1 {\n  |     -- unexpected token\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `{integer}`\n    --> /tmp/tmpje1td0al.rs:7:29\n     |\n7    |     let start = digits.find(1)\n     |                        ---- ^ expected an `FnMut<(char,)>` closure, found `{integer}`\n     |                        |\n     |                        required by a bound introduced by this call\n     |\n     = help: the trait `FnMut<(char,)>` is not implemented for `{integer}`\n     = help: the following other types implement trait `Pattern<'a>`:\n               &'b String\n               &'b [char; N]\n               &'b [char]\n               &'b str\n               &'c &'b str\n               [char; N]\n               char\n               pattern::MultiCharEqPattern<C>\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `{integer}`\nnote: required by a bound in `core::str::<impl str>::find`\n\nerror[E0599]: no method named `find_last_of` found for struct `String` in the current scope\n --> /tmp/tmpje1td0al.rs:8:22\n  |\n8 |     let end = digits.find_last_of(1)\n  |                      ^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n --> /tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else {\n      count += starts_one_ends(n - i - 1)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmptdl8q8qp.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else {\n      count += starts_one_ends(n - i - 1)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmptdl8q8qp.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  while i < n {\n    if j < n {\n      if k < n {\n        count += 1\n        k += 1\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmp7jnxlfkm.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   let i = 0\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp7jnxlfkm.rs:5:12\n  |\n5 |   let i = 0\n  |            ^ help: add `;` here\n6 |   let j = 0\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp7jnxlfkm.rs:6:12\n  |\n6 |   let j = 0\n  |            ^ help: add `;` here\n7 |   let k = 0\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmp7jnxlfkm.rs:7:12\n  |\n7 |   let k = 0\n  |            ^ help: add `;` here\n8 |   while i < n {\n  |   ----- unexpected token\n\nerror: expected `;`, found `k`\n  --> /tmp/tmp7jnxlfkm.rs:11:19\n   |\n11 |         count += 1\n   |                   ^ help: add `;` here\n12 |         k += 1\n   |         - unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else {\n      count += starts_one_ends(n - i - 1);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpgvfi2yq5.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpgvfi2yq5.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += starts_one_ends(n - i - 1);\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j % i == 0 {\n        break;\n      }\n      j += i;\n    }\n    if j == n {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpnxi6pga6.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += i;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpnxi6pga6.rs:15:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpnxi6pga6.rs:17:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n17 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let j = i;\n    while j < n and j >= 0 and j % 10 == 1 {\n      count += 1;\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: `and` is not a logical operator\n --> /tmp/tmp1n9dc_yp.rs:8:17\n  |\n8 |     while j < n and j >= 0 and j % 10 == 1 {\n  |                 ^^^ help: use `&&` to perform logical conjunction\n  |\n  = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror: `and` is not a logical operator\n --> /tmp/tmp1n9dc_yp.rs:8:28\n  |\n8 |     while j < n and j >= 0 and j % 10 == 1 {\n  |                            ^^^ help: use `&&` to perform logical conjunction\n  |\n  = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    if i == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpq86tirrl.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpq86tirrl.rs:10:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n10 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    }\n    if i == n - 1 {\n      count += 1;\n    }\n    if i > 0 && i < n - 1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpx9ax72po.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpx9ax72po.rs:10:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpx9ax72po.rs:13:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digit = i;\n    let start = true;\n    while digit > 0 {\n      digit /= 10;\n      if start {\n        count += 1;\n        start = false;\n      } else {\n        count -= 1;\n      }\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `digit`\n --> /tmp/tmpdsvdggfw.rs:9:7\n  |\n6 |     let digit = i;\n  |         -----\n  |         |\n  |         first assignment to `digit`\n  |         help: consider making this binding mutable: `mut digit`\n...\n9 |       digit /= 10;\n  |       ^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpdsvdggfw.rs:11:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `start`\n  --> /tmp/tmpdsvdggfw.rs:12:9\n   |\n7  |     let start = true;\n   |         -----\n   |         |\n   |         first assignment to `start`\n   |         help: consider making this binding mutable: `mut start`\n...\n12 |         start = false;\n   |         ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpdsvdggfw.rs:14:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n14 |         count -= 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j == i || j == i + 1 {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp8t9lfb_6.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmp8t9lfb_6.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp8t9lfb_6.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j == i || j == i + 1 {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp8t9lfb_6.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmp8t9lfb_6.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp8t9lfb_6.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j == i || j == i + 1 {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp8t9lfb_6.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmp8t9lfb_6.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp8t9lfb_6.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    if i == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpq86tirrl.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpq86tirrl.rs:10:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n10 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j % i == 0 {\n        count += 1;\n        break;\n      }\n      j += i;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpekd1owzx.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpekd1owzx.rs:13:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n13 |       j += i;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpekd1owzx.rs:15:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpwhobtkxc.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpwhobtkxc.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += starts_one_ends(i - 1);\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    }\n    if i == n {\n      count += 1\n    }\n    if i > 0 && i < n {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpstrjx5rd.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else if i % 2 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpb1bylcn1.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpszgb9o5u.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  let i = 0\n  let j = 0\n  while i < n {\n    if j < n {\n      if j == 0 {\n        count += 1\n      }\n      j += 1\n    } else {\n      i += 1\n      j = 0\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpw1l3qna2.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   let i = 0\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmpw1l3qna2.rs:5:12\n  |\n5 |   let i = 0\n  |            ^ help: add `;` here\n6 |   let j = 0\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpw1l3qna2.rs:6:12\n  |\n6 |   let j = 0\n  |            ^ help: add `;` here\n7 |   while i < n {\n  |   ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpw1l3qna2.rs:14:13\n   |\n14 |       i += 1\n   |             ^ help: add `;` here\n15 |       j = 0\n   |       - unexpected token\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else if i % 2 == 0 {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpll4c61mf.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j % i == 0 {\n        count += 1;\n        break;\n      }\n      j += i;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpekd1owzx.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpekd1owzx.rs:13:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n13 |       j += i;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpekd1owzx.rs:15:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let digits = n - i\n    let one_digit = 1\n    let one_digit_start = one_digit\n    let one_digit_end = one_digit\n    for j in 1..digits {\n      let digit = j\n      one_digit_start = one_digit_start * 10 + digit\n      one_digit_end = one_digit_end * 10 + digit\n    }\n    if one_digit_start == one_digit_end {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp6wbik0g7.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp6wbik0g7.rs:6:23\n  |\n6 |     let digits = n - i\n  |                       ^ help: add `;` here\n7 |     let one_digit = 1\n  |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp6wbik0g7.rs:7:22\n  |\n7 |     let one_digit = 1\n  |                      ^ help: add `;` here\n8 |     let one_digit_start = one_digit\n  |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp6wbik0g7.rs:8:36\n  |\n8 |     let one_digit_start = one_digit\n  |                                    ^ help: add `;` here\n9 |     let one_digit_end = one_digit\n  |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp6wbik0g7.rs:9:34\n   |\n9  |     let one_digit_end = one_digit\n   |                                  ^ help: add `;` here\n10 |     for j in 1..digits {\n   |     --- unexpected token\n\nerror: expected `;`, found `one_digit_start`\n  --> /tmp/tmp6wbik0g7.rs:11:20\n   |\n11 |       let digit = j\n   |                    ^ help: add `;` here\n12 |       one_digit_start = one_digit_start * 10 + digit\n   |       --------------- unexpected token\n\nerror: expected `;`, found `one_digit_end`\n  --> /tmp/tmp6wbik0g7.rs:12:53\n   |\n12 |       one_digit_start = one_digit_start * 10 + digit\n   |                                                     ^ help: add `;` here\n13 |       one_digit_end = one_digit_end * 10 + digit\n   |       ------------- unexpected token\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpwhobtkxc.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpwhobtkxc.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += starts_one_ends(i - 1);\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    }\n    if i == n {\n      count += 1\n    }\n    if i > 0 && i < n {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpstrjx5rd.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp8g_j7mlv.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpgs5x61rk.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpgs5x61rk.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgs5x61rk.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpszgb9o5u.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    if digit == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpvh0_oq7i.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpvh0_oq7i.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp8g_j7mlv.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let j = i\n    while j > 0 {\n      j -= 1\n      if j == 0 {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp4rjrflpp.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmp4rjrflpp.rs:6:14\n  |\n6 |     let j = i\n  |              ^ help: add `;` here\n7 |     while j > 0 {\n  |     ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n --> /tmp/tmp4rjrflpp.rs:8:13\n  |\n8 |       j -= 1\n  |             ^ help: add `;` here\n9 |       if j == 0 {\n  |       -- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else {\n      count += starts_one_ends(n - i - 1);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpgvfi2yq5.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpgvfi2yq5.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += starts_one_ends(n - i - 1);\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpgjgnn_dl.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(i + 1)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpnc5a5eet.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    }\n    if i == n {\n      count += 1\n    }\n    if i > 0 && i < n {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpstrjx5rd.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(i + 1);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpdm8t08cq.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpdm8t08cq.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpdm8t08cq.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(i + 1);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let digits = []\n    for j in 1..n {\n      digits.push(j)\n    }\n    digits.pop()\n    if digits.length == n {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp1q0wv1wq.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n --> /tmp/tmp1q0wv1wq.rs:6:20\n  |\n6 |     let digits = []\n  |                    ^ help: add `;` here\n7 |     for j in 1..n {\n  |     --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1q0wv1wq.rs:10:17\n   |\n10 |     digits.pop()\n   |                 ^ help: add `;` here\n11 |     if digits.length == n {\n   |     -- unexpected token\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n --> /tmp/tmp1q0wv1wq.rs:8:14\n  |\n8 |       digits.push(j)\n  |              ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1q0wv1wq.rs:10:12\n   |\n10 |     digits.pop()\n   |            ^^^ method not found in `[_; 0]`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tmp/tmp1q0wv1wq.rs:11:15\n   |\n11 |     if digits.length == n {\n   |               ^^^^^^\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i *= 10;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3qaue2tl.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3qaue2tl.rs:11:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i *= 10;\n   |     ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j == i {\n        count += 1;\n      } else if j == i + 1 {\n        count += 1;\n      } else if j == i - 1 {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmppqmiim0o.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmppqmiim0o.rs:12:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmppqmiim0o.rs:14:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n14 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmppqmiim0o.rs:16:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n16 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmppqmiim0o.rs:18:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n18 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j % i == 0 {\n        count += 1;\n        break;\n      }\n      j += i;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpekd1owzx.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpekd1owzx.rs:13:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n13 |       j += i;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpekd1owzx.rs:15:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j % 10 == 1 {\n        count += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp4766rnv2.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmp4766rnv2.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += 1;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp4766rnv2.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp8g_j7mlv.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    if i == 1 {\n      count += 1\n    } else {\n      count += starts_one_ends(n - i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmphz2khjlw.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let j = i;\n    while j < n and j >= 0 {\n      if j == 0 {\n        count += 1;\n      } else {\n        count += 1 + starts_one_ends(n - j - 1);\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: `and` is not a logical operator\n --> /tmp/tmp0o_fos0d.rs:8:17\n  |\n8 |     while j < n and j >= 0 {\n  |                 ^^^ help: use `&&` to perform logical conjunction\n  |\n  = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let digit = i\n    while digit > 0 {\n      digit /= 10\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpild1gbd5.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpild1gbd5.rs:6:18\n  |\n6 |     let digit = i\n  |                  ^ help: add `;` here\n7 |     while digit > 0 {\n  |     ----- unexpected token\n\nerror: expected `;`, found `count`\n --> /tmp/tmpild1gbd5.rs:8:18\n  |\n8 |       digit /= 10\n  |                  ^ help: add `;` here\n9 |       count += 1\n  |       ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else if i % 2 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp2jkojj6c.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp2jkojj6c.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp2jkojj6c.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digits = n - i;\n    let start = 1;\n    let end = start;\n    while (digits > 0) {\n      end = start * 10 + end;\n      digits -= 1;\n    }\n    if (start == end) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n --> /tmp/tmplxb33930.rs:9:11\n  |\n9 |     while (digits > 0) {\n  |           ^          ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n  |\n9 -     while (digits > 0) {\n9 +     while digits > 0 {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplxb33930.rs:13:8\n   |\n13 |     if (start == end) {\n   |        ^            ^\n   |\nhelp: remove these parentheses\n   |\n13 -     if (start == end) {\n13 +     if start == end {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `end`\n  --> /tmp/tmplxb33930.rs:10:7\n   |\n8  |     let end = start;\n   |         ---\n   |         |\n   |         first assignment to `end`\n   |         help: consider making this binding mutable: `mut end`\n9  |     while (digits > 0) {\n10 |       end = start * 10 + end;\n   |       ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `digits`\n  --> /tmp/tmplxb33930.rs:11:7\n   |\n6  |     let digits = n - i;\n   |         ------\n   |         |\n   |         first assignment to `digits`\n   |         help: consider making this binding mutable: `mut digits`\n...\n11 |       digits -= 1;\n   |       ^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmplxb33930.rs:14:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n14 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    }\n    if i == n {\n      count += 1\n    }\n    if i > 0 && i < n {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpstrjx5rd.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digit = i;\n    let start = digit;\n    let end = digit;\n    while digit > 0 {\n      digit -= 1;\n      start -= 1;\n      end -= 1;\n    }\n    if start == 0 && end == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `digit`\n  --> /tmp/tmpdd79j_iu.rs:10:7\n   |\n6  |     let digit = i;\n   |         -----\n   |         |\n   |         first assignment to `digit`\n   |         help: consider making this binding mutable: `mut digit`\n...\n10 |       digit -= 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `start`\n  --> /tmp/tmpdd79j_iu.rs:11:7\n   |\n7  |     let start = digit;\n   |         -----\n   |         |\n   |         first assignment to `start`\n   |         help: consider making this binding mutable: `mut start`\n...\n11 |       start -= 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `end`\n  --> /tmp/tmpdd79j_iu.rs:12:7\n   |\n8  |     let end = digit;\n   |         ---\n   |         |\n   |         first assignment to `end`\n   |         help: consider making this binding mutable: `mut end`\n...\n12 |       end -= 1;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpdd79j_iu.rs:15:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digit = i;\n    while digit > 0 {\n      digit /= 10;\n      count += digit;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `digit`\n --> /tmp/tmp45133mvm.rs:8:7\n  |\n6 |     let digit = i;\n  |         -----\n  |         |\n  |         first assignment to `digit`\n  |         help: consider making this binding mutable: `mut digit`\n7 |     while digit > 0 {\n8 |       digit /= 10;\n  |       ^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp45133mvm.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += digit;\n  |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  let i = 1\n  while i <= n {\n    let j = i\n    while j <= n {\n      if j == i {\n        count += 1\n      } else if j == i + 1 {\n        count += 1\n      } else {\n        break\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpu6vkavmw.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   let i = 1\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpu6vkavmw.rs:5:12\n  |\n5 |   let i = 1\n  |            ^ help: add `;` here\n6 |   while i <= n {\n  |   ----- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpu6vkavmw.rs:7:14\n  |\n7 |     let j = i\n  |              ^ help: add `;` here\n8 |     while j <= n {\n  |     ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let digit = i\n    let start = true\n    while digit > 0 {\n      digit = digit / 10\n      start = !start\n    }\n    if start {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp1b_nupp3.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n --> /tmp/tmp1b_nupp3.rs:6:18\n  |\n6 |     let digit = i\n  |                  ^ help: add `;` here\n7 |     let start = true\n  |     --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmp1b_nupp3.rs:7:21\n  |\n7 |     let start = true\n  |                     ^ help: add `;` here\n8 |     while digit > 0 {\n  |     ----- unexpected token\n\nerror: expected `;`, found `start`\n  --> /tmp/tmp1b_nupp3.rs:9:25\n   |\n9  |       digit = digit / 10\n   |                         ^ help: add `;` here\n10 |       start = !start\n   |       ----- unexpected token\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    } else if i == n {\n      count += 1\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i)\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpgjgnn_dl.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    }\n    if i == n - 1 {\n      count += 1\n    }\n    if i > 0 && i < n - 1 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp1c0fq53b.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 0 {\n      count += starts_one_ends(n - i - 1);\n    } else if digit == 1 {\n      count += starts_one_ends(n - i - 1) + 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpndic2u1p.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += starts_one_ends(n - i - 1);\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpndic2u1p.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(n - i - 1) + 1;\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpndic2u1p.rs:13:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n13 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else {\n      count += starts_one_ends(n - i - 1);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpgvfi2yq5.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpgvfi2yq5.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += starts_one_ends(n - i - 1);\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i == 0 {\n      count += 1\n    }\n    if i == n - 1 {\n      count += 1\n    }\n    if i > 0 && i < n - 1 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp1c0fq53b.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    let j = i + 1\n    while j < n {\n      if j == 0 {\n        count += 1\n        break\n      }\n      j += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpn0t_kdzl.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 0..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpn0t_kdzl.rs:6:18\n  |\n6 |     let j = i + 1\n  |                  ^ help: add `;` here\n7 |     while j < n {\n  |     ----- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmpn0t_kdzl.rs:9:19\n   |\n9  |         count += 1\n   |                   ^ help: add `;` here\n10 |         break\n   |         ----- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else if i > 0 && i < n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpczxiz5s8.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpczxiz5s8.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpczxiz5s8.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let j = i\n    while j > 0 {\n      j -= 1\n      if j == 1 {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmpjeptp9vi.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpjeptp9vi.rs:6:14\n  |\n6 |     let j = i\n  |              ^ help: add `;` here\n7 |     while j > 0 {\n  |     ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n --> /tmp/tmpjeptp9vi.rs:8:13\n  |\n8 |       j -= 1\n  |             ^ help: add `;` here\n9 |       if j == 1 {\n  |       -- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  for i in 1..n {\n    let j = i\n    while j > 0 {\n      j -= 1\n      if j == 0 {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n --> /tmp/tmp4rjrflpp.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   for i in 1..n {\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmp4rjrflpp.rs:6:14\n  |\n6 |     let j = i\n  |              ^ help: add `;` here\n7 |     while j > 0 {\n  |     ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n --> /tmp/tmp4rjrflpp.rs:8:13\n  |\n8 |       j -= 1\n  |             ^ help: add `;` here\n9 |       if j == 0 {\n  |       -- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    let j = i;\n    while j <= n {\n      if j % i == 0 {\n        count += 1;\n      }\n      j += i;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpzclh8bl5.rs:10:9\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n10 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpzclh8bl5.rs:12:7\n   |\n7  |     let j = i;\n   |         -\n   |         |\n   |         first assignment to `j`\n   |         help: consider making this binding mutable: `mut j`\n...\n12 |       j += i;\n   |       ^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpzclh8bl5.rs:14:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n14 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpsjwitift.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpsjwitift.rs:10:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n10 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i < n {\n    let j = i;\n    while j < n and j % i == 0 {\n      j += i;\n    }\n    count += j - i + 1;\n    i = j + 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: `and` is not a logical operator\n --> /tmp/tmp1kaiysqf.rs:8:17\n  |\n8 |     while j < n and j % i == 0 {\n  |                 ^^^ help: use `&&` to perform logical conjunction\n  |\n  = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 || i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpma7lsti6.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpma7lsti6.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += starts_one_ends(i - 1);\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else if i > 0 && i < n {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpczxiz5s8.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpczxiz5s8.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpczxiz5s8.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digit = i;\n    let one_digit = digit == 1;\n    let one_ends = one_digit || digit == n;\n    let starts = one_ends || digit == n - 1;\n    count += starts ? 1 : 0;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n  --> /tmp/tmpq4vxeafa.rs:10:23\n   |\n10 |     count += starts ? 1 : 0;\n   |                       ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    let digits = [0..9].map(|x| x + i).take(n);\n    if digits.contains(1) {\n      count += 1;\n    }\n    if digits.contains(10) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0369]: cannot add `isize` to `std::ops::Range<{integer}>`\n --> /tmp/tmpuxv6psvx.rs:6:35\n  |\n6 |     let digits = [0..9].map(|x| x + i).take(n);\n  |                                 - ^ - isize\n  |                                 |\n  |                                 std::ops::Range<{integer}>\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0369`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    let digit = i % 10;\n    if digit == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmp3k7mbltb.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp3k7mbltb.rs:11:5\n   |\n5  |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n11 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digit = i;\n    while digit > 0 {\n      digit = digit / 10;\n      count += digit;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `digit`\n --> /tmp/tmpb2mrgudf.rs:8:7\n  |\n6 |     let digit = i;\n  |         -----\n  |         |\n  |         first assignment to `digit`\n  |         help: consider making this binding mutable: `mut digit`\n7 |     while digit > 0 {\n8 |       digit = digit / 10;\n  |       ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpb2mrgudf.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += digit;\n  |       ^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    if i == 1 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpq86tirrl.rs:8:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n8 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpq86tirrl.rs:10:5\n   |\n5  |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n10 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    let digit = i;\n    let digit_count = 1;\n    while digit > 0 {\n      digit /= 10;\n      digit_count += 1;\n    }\n    if digit_count == 1 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `digit`\n --> /tmp/tmpzd1c7tn0.rs:9:7\n  |\n6 |     let digit = i;\n  |         -----\n  |         |\n  |         first assignment to `digit`\n  |         help: consider making this binding mutable: `mut digit`\n...\n9 |       digit /= 10;\n  |       ^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `digit_count`\n  --> /tmp/tmpzd1c7tn0.rs:10:7\n   |\n7  |     let digit_count = 1;\n   |         -----------\n   |         |\n   |         first assignment to `digit_count`\n   |         help: consider making this binding mutable: `mut digit_count`\n...\n10 |       digit_count += 1;\n   |       ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpzd1c7tn0.rs:13:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0\n  let i = 0\n  while i < n {\n    let digit = i % 10\n    if digit == 1 {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n --> /tmp/tmpt213nwia.rs:4:16\n  |\n4 |   let count = 0\n  |                ^ help: add `;` here\n5 |   let i = 0\n  |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n --> /tmp/tmpt213nwia.rs:5:12\n  |\n5 |   let i = 0\n  |            ^ help: add `;` here\n6 |   while i < n {\n  |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n --> /tmp/tmpt213nwia.rs:7:23\n  |\n7 |     let digit = i % 10\n  |                       ^ help: add `;` here\n8 |     if digit == 1 {\n  |     -- unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfn starts_one_ends(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i == 0 {\n      count += 1;\n    } else if i == n {\n      count += 1;\n    } else {\n      count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:7:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n7 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmpw85faa_o.rs:9:7\n  |\n4 |   let count = 0;\n  |       -----\n  |       |\n  |       first assignment to `count`\n  |       help: consider making this binding mutable: `mut count`\n...\n9 |       count += 1;\n  |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpw85faa_o.rs:11:7\n   |\n4  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n11 |       count += starts_one_ends(i - 1) + starts_one_ends(n - i);\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}