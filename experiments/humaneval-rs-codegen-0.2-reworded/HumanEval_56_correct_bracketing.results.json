{
  "name": "HumanEval_56_correct_bracketing",
  "language": "rs",
  "prompt": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n",
  "tests": "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == '<') {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == '>') {\n      if (bracket_stack.is_empty()) {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != i) {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbh5xpxnh.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpbh5xpxnh.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpbh5xpxnh.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpbh5xpxnh.rs:22:45\n   |\n22 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n23 |       if (last_bracket != i) {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpbh5xpxnh.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbh5xpxnh.rs:15:8\n   |\n15 |     if (brackets[i] == '<') {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == '<') {\n15 +     if brackets[i] == '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbh5xpxnh.rs:18:15\n   |\n18 |     } else if (brackets[i] == '>') {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == '>') {\n18 +     } else if brackets[i] == '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpbh5xpxnh.rs:19:10\n   |\n19 |       if (bracket_stack.is_empty()) {\n   |          ^                        ^\n   |\nhelp: remove these",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwsmke9j4.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpwsmke9j4.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpwsmke9j4.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpwsmke9j4.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpwsmke9j4.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpux_l66bz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      closing_bracket = c\n    } else {\n      if opening_bracket != \"\" && closing_bracket != \"\" {\n        if opening_bracket != closing_bracket {\n          return false\n        }\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5nssb29i.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5nssb29i.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5nssb29i.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp5nssb29i.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp1qf8ic48.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1qf8ic48.rs:14:30\n   |\n14 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n15 |     if bracket == \"<\" {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1qf8ic48.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:16:21\n   |\n16 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:20:31\n   |\n20 |       } else if bracket_stack.pop() != \"<\" {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp55fzux5s.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp55fzux5s.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:16:18\n   |\n16 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:18:25\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:18:15\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \">\") {\n18 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpux_l66bz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.append(Char(ord(\"<\")))\n    } else if bracket_stack.last() == Char(ord(\"<\")) {\n      bracket_stack.append(Char(ord(\">\")))\n    } else {\n      bracket_stack.pop()\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpstqn3kjy.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Char` in this scope\n  --> /tmp/tmpstqn3kjy.rs:15:28\n   |\n15 |       bracket_stack.append(Char(ord(\"<\")))\n   |                            ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `ord` in this scope\n  --> /tmp/tmpstqn3kjy.rs:15:33\n   |\n15 |       bracket_stack.append(Char(ord(\"<\")))\n   |                                 ^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Char` in this scope\n  --> /tmp/tmpstqn3kjy.rs:16:39\n   |\n16 |     } else if bracket_stack.last() == Char(ord(\"<\")) {\n   |                                       ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `ord` in this scope\n  --> /tmp/tmpstqn3kjy.rs:16:44\n   |\n16 |     } else if bracket_stack.last() == Char(ord(\"<\")) {\n   |                                            ^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Char` in this scope\n  --> /tmp/tmpstqn3kjy.rs:17:28\n   |\n17 |       bracket_stack.append(Char(ord(\">\")))\n   |                            ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `ord` in this scope\n  --> /tmp/tmpstqn3kjy.rs:17:33\n   |\n17 |       bracket_stack.append(Char(ord(\">\")))\n   |                                 ^^^ not found in this scope\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpstqn3kjy.rs:15:21\n   |\n15 |       bracket_stack.append(Char(ord(\"<\")))\n   |                     ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpstqn3kjy.rs:17:21\n   |\n17 |       bracket_stack.append(Char(ord(\">\")))\n   |                     ^^^^^^ method not found in `[_; 0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in brackets.chars() {\n    if i == \"<\" {\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n      bracket_stack = []\n    } else if i == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      if opening_bracket != \"\" {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n        bracket_stack = []\n      } else {\n        opening_bracket = closing_bracket\n        closing_bracket = \"\"\n        bracket_stack = []\n      }\n    } else {\n      if opening_bracket == \"\" {\n        opening_bracket = i\n      } else if closing_bracket == \"\" {\n        closing_bracket = i\n      } else {\n        bracket_stack.push(i)\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbawe9ftr.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbawe9ftr.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpbawe9ftr.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for i in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpbawe9ftr.rs:17:27\n   |\n17 |       opening_bracket = \"\"\n   |                           ^ help: add `;` here\n18 |       closing_bracket = \"\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpbawe9ftr.rs:18:27\n   |\n18 |       closing_bracket = \"\"\n   |                           ^ help: add `;` here\n19 |       bracket_stack = []\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpbawe9ftr.rs:25:29\n   |\n25 |         opening_bracket = \"\"\n   |                             ^ help: add `;` here\n26 |         closing_bracket = \"\"\n   |         --------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpbawe9ftr.rs:26:29\n   |\n26 |         closing_bracket = \"\"\n   |                             ^ help: add `;` here\n27 |         bracket_stack = []\n   |         ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpbawe9ftr.rs:29:42\n   |\n29 |         opening_bracket = closing_bracket\n   |                                          ^ help: add `;` here\n30 |         closing_bracket = \"\"\n   |         --------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpbawe9ftr.rs:30:29\n   |\n30 |         closing_bracket = \"\"\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets {\n    if opening_bracket == \"\" {\n      opening_bracket = String.from(brackets.charAt(0))\n    } else if closing_bracket == \"\" {\n      closing_bracket = String.from(brackets.charAt(0))\n    } else if opening_bracket == closing_bracket {\n      bracket_count += 1\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    } else {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp43mfa450.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp43mfa450.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp43mfa450.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket`\n  --> /tmp/tmp43mfa450.rs:21:25\n   |\n21 |       bracket_count += 1\n   |                         ^ help: add `;` here\n22 |       opening_bracket = \"\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp43mfa450.rs:22:27\n   |\n22 |       opening_bracket = \"\"\n   |                           ^ help: add `;` here\n23 |       closing_bracket = \"\"\n   |       --------------- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp43mfa450.rs:17:25\n   |\n17 |       opening_bracket = String.from(brackets.charAt(0))\n   |                         ^^^^^^-----\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp43mfa450.rs:19:25\n   |\n19 |       closing_bracket = String.from(brackets.charAt(0))\n   |                         ^^^^^^-----\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::from`\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp43mfa450.rs:15:12\n   |\n15 |   for _ in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  let opening_bracket_index_set = false\n  let closing_bracket_index_set = false\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      opening_bracket_count += 1\n      opening_bracket_index = i\n      opening_bracket_index_set = true\n    } else if (brackets[i] == \">\") {\n      closing_bracket_count += 1\n      closing_bracket_index = i\n      closing_bracket_index_set = true\n    }\n  }\n\n  if (opening_bracket_count != closing_bracket_count) {\n    return false\n  }\n\n  if (!opening_bracket_index_set) {\n    return false\n  }\n\n  if (!closing_bracket_index_set) {\n    return false\n  }\n\n  if (opening_bracket_index > closing_bracket_index) {\n    return false\n  }\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      if (i != opening_bracket_index) {\n        return false\n      }\n    } else if (brackets[i] == \">\") {\n      if (i != closing_bracket_index) {\n        return false\n      }\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq3a1cjv9.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3a1cjv9.rs:13:32\n   |\n13 |   let opening_bracket_count = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3a1cjv9.rs:14:32\n   |\n14 |   let closing_bracket_count = 0\n   |                                ^ help: add `;` here\n15 |   let opening_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3a1cjv9.rs:15:32\n   |\n15 |   let opening_bracket_index = 0\n   |                                ^ help: add `;` here\n16 |   let closing_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3a1cjv9.rs:16:32\n   |\n16 |   let closing_bracket_index = 0\n   |                                ^ help: add `;` here\n17 |   let opening_bracket_index_set = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3a1cjv9.rs:17:40\n   |\n17 |   let opening_bracket_index_set = false\n   |                                        ^ help: add `;` here\n18 |   let closing_bracket_index_set = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq3a1cjv9.rs:18:40\n   |\n18 |   let closing_bracket_index_set = false\n   |                                        ^ help: add `;` here\n19 | \n20 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket_index`\n  --> /tmp/tmpq3a1cjv9.rs:22:33\n   |\n22 |       opening_bracket_count += 1\n   |                                 ^ help: add `;` here\n23 |       opening_bracket_index = i\n   |       --------------------- unexpected token\n\nerror: expected `;`, found `opening_bracket_index_set`\n  --> /t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      if (bracket_stack.length == 0) {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != i - 1) {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n\n  if (bracket_stack.length != 0) {\n    return false\n  }\n\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0zhmt3ny.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0zhmt3ny.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 | \n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp0zhmt3ny.rs:17:28\n   |\n17 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n18 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp0zhmt3ny.rs:23:45\n   |\n23 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n24 |       if (last_bracket != i - 1) {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp0zhmt3ny.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhmt3ny.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhmt3ny.rs:19:15\n   |\n19 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (brackets[i] == \">\") {\n19 +     } else if brackets[i] == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhmt3ny.rs:20:10\n   |\n20 |       if (bracket_stack.length == 0) {\n   |          ^                         ^\n   |\nhelp: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp55fzux5s.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp55fzux5s.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:16:18\n   |\n16 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:18:25\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:18:15\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \">\") {\n18 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpux_l66bz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if c == \">\" {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpimh0zcoz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpimh0zcoz.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpimh0zcoz.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpimh0zcoz.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \">\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpimh0zcoz.rs:18:28\n   |\n18 |       closing_bracket = \">\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpimh0zcoz.rs:21:28\n   |\n21 |       opening_bracket = \">\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"<\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpimh0zcoz.rs:22:28\n   |\n22 |       closing_bracket = \"<\"\n   |                            ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpimh0zcoz.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information abo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n    } else {\n      if (bracket_count == 0) {\n        open_bracket = true\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcth4sl_s.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcth4sl_s.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcth4sl_s.rs:16:10\n   |\n16 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -       if (bracket_count == 0) {\n16 +       if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcth4sl_s.rs:21:10\n   |\n21 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n21 -       if (bracket_count == 0) {\n21 +       if bracket_count == 0 {\n   | \n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (_ == \">\") {\n      bracket_count -= 1\n    } else if (_ == \"<\") {\n      bracket_count += 1\n    }\n    if (bracket_count == 0) {\n      closing_bracket = _\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9g8gbxiz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp9g8gbxiz.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9g8gbxiz.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9g8gbxiz.rs:16:8\n   |\n16 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_count == 0) {\n16 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9g8gbxiz.rs:18:15\n   |\n18 |     } else if (_ == \">\") {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (_ == \">\") {\n18 +     } else if _ == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9g8gbxiz.rs:20:15\n   |\n20 |     } else if (_ == \"<\") {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (_ == \"<\") {\n20 +     } else if _ == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9g8gbxiz.rs:23:8\n   |\n23 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -     if (bracket_count == 0) {\n23 +     if bracket_count == 0 {\n   | \n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmp9g8gbxiz.rs:17:25\n   |\n17 |       opening_bracket = _\n   |                         ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = []\n  for c in brackets {\n    if c == \"<\" {\n      bracket_count += 1\n      open_brackets.push(c)\n    } else if c == \">\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzm971anw.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzm971anw.rs:13:25\n   |\n13 |   let open_brackets = []\n   |                         ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `open_brackets`\n  --> /tmp/tmpzm971anw.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       open_brackets.push(c)\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpzm971anw.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpzm971anw.rs:17:21\n   |\n17 |       open_brackets.push(c)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpux_l66bz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_count += 1\n      open_brackets.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      open_brackets.pop()\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0e4c2vxh.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0e4c2vxh.rs:13:25\n   |\n13 |   let open_brackets = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `open_brackets`\n  --> /tmp/tmp0e4c2vxh.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       open_brackets.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `open_brackets`\n  --> /tmp/tmp0e4c2vxh.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       open_brackets.pop()\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp0e4c2vxh.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp0e4c2vxh.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp0e4c2vxh.rs:17:21\n   |\n17 |       open_brackets.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp0e4c2vxh.rs:23:21\n   |\n23 |       open_brackets.pop()\n   |                     ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n      if (brackets[1] != '>') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpreva1upl.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpreva1upl.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpreva1upl.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpreva1upl.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpreva1upl.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpreva1upl.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpreva1upl.rs:26:10\n   |\n26 |       if (brackets[1] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n26 -       if (brackets[1] != '>') {\n26 +       if brackets[1] != '>' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_count += 1\n      bracket_stack.push(bracket)\n    } else if bracket == \">\" {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5gg7vljg.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5gg7vljg.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5gg7vljg.rs:15:30\n   |\n15 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n16 |     if bracket == \"<\" {\n   |     -- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp5gg7vljg.rs:17:25\n   |\n17 |       bracket_count += 1\n   |                         ^ help: add `;` here\n18 |       bracket_stack.push(bracket)\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp5gg7vljg.rs:23:27\n   |\n23 |         bracket_count -= 1\n   |                           ^ help: add `;` here\n24 |         bracket_stack.pop()\n   |         ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5gg7vljg.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp5gg7vljg.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5gg7vljg.rs:18:21\n   |\n18 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5gg7vljg.rs:24:23\n   |\n24 |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      if (bracket_stack.length == 0) {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != i - 1) {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  if (bracket_stack.length != 0) {\n    return false\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp05_rmy0n.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp05_rmy0n.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp05_rmy0n.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp05_rmy0n.rs:22:45\n   |\n22 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n23 |       if (last_bracket != i - 1) {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp05_rmy0n.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp05_rmy0n.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp05_rmy0n.rs:18:15\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \">\") {\n18 +     } else if brackets[i] == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp05_rmy0n.rs:19:10\n   |\n19 |       if (bracket_stack.length == 0) {\n   |          ^                         ^\n   |\nhelp: remove",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      if opening_bracket == \"\" {\n        opening_bracket = c\n      } else {\n        opening_bracket += c\n      }\n    } else if c == \">\" {\n      if closing_bracket == \"\" {\n        closing_bracket = c\n      } else {\n        closing_bracket += c\n      }\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpn4wptl6c.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpn4wptl6c.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpn4wptl6c.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpn4wptl6c.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpn4wptl6c.rs:20:9\n   |\n20 |         opening_bracket += c\n   |         ---------------^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpn4wptl6c.rs:26:9\n   |\n26 |         closing_bracket += c\n   |         ---------------^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if opening_brackets == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if closing_brackets == 0 {\n      closing_bracket = String.fromCharCode(c)\n    } else if opening_bracket == closing_bracket {\n      opening_brackets -= 1\n      closing_brackets -= 1\n    } else {\n      opening_brackets += 1\n    }\n  }\n  return opening_brackets == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2hj6xop8.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2hj6xop8.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2hj6xop8.rs:14:27\n   |\n14 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2hj6xop8.rs:15:27\n   |\n15 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n16 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_brackets`\n  --> /tmp/tmp2hj6xop8.rs:22:28\n   |\n22 |       opening_brackets -= 1\n   |                            ^ help: add `;` here\n23 |       closing_brackets -= 1\n   |       ---------------- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp2hj6xop8.rs:18:25\n   |\n18 |       opening_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmp2hj6xop8.rs:18:45\n   |\n18 |       opening_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp2hj6xop8.rs:20:25\n   |\n20 |       closing_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in thi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if is_open_bracket(chr(brackets.char_at(bracket_count))) {\n        bracket_count += 1\n      } else {\n        return false\n      }\n    } else {\n      if is_close_bracket(chr(brackets.char_at(bracket_count))) {\n        bracket_count += 1\n      } else {\n        return false\n      }\n    }\n    open_bracket = !open_bracket\n  }\n  return bracket_count == brackets.length()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvbnrv5qa.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvbnrv5qa.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_open_bracket` in this scope\n  --> /tmp/tmpvbnrv5qa.rs:16:10\n   |\n16 |       if is_open_bracket(chr(brackets.char_at(bracket_count))) {\n   |          ^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `open_bracket`\n\nerror[E0425]: cannot find function `chr` in this scope\n  --> /tmp/tmpvbnrv5qa.rs:16:26\n   |\n16 |       if is_open_bracket(chr(brackets.char_at(bracket_count))) {\n   |                          ^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_close_bracket` in this scope\n  --> /tmp/tmpvbnrv5qa.rs:22:10\n   |\n22 |       if is_close_bracket(chr(brackets.char_at(bracket_count))) {\n   |          ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `chr` in this scope\n  --> /tmp/tmpvbnrv5qa.rs:22:27\n   |\n22 |       if is_close_bracket(chr(brackets.char_at(bracket_count))) {\n   |                           ^^^ not found in this scope\n\nerror[E0599]: no method named `char_at` found for struct `String` in the current scope\n  --> /tmp/tmpvbnrv5qa.rs:16:39\n   |\n16 |       if is_open_bracket(chr(brackets.char_at(bracket_count))) {\n   |                                       ^^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char_at` found for struct `String` in the current scope\n  --> /tmp/tmpvbnrv5qa.rs:22:40\n   |\n22 |       if is_close_bracket(chr(brackets.char_at(bracket_count))) {\n   |                                        ^^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  let opening_bracket_stack = []\n  let closing_bracket_stack = []\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket_count += 1\n      opening_bracket_stack.push(0)\n    } else if (bracket_count == 1) {\n      closing_bracket_count += 1\n      closing_bracket_stack.push(0)\n    } else if (bracket_count > 1) {\n      opening_bracket_count -= 1\n      closing_bracket_count -= 1\n      opening_bracket_stack.pop()\n      closing_bracket_stack.pop()\n    }\n    bracket_count += 1\n  }\n  return opening_bracket_count == 0 && closing_bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbcmoiskz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbcmoiskz.rs:13:32\n   |\n13 |   let opening_bracket_count = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbcmoiskz.rs:14:32\n   |\n14 |   let closing_bracket_count = 0\n   |                                ^ help: add `;` here\n15 |   let opening_bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbcmoiskz.rs:15:33\n   |\n15 |   let opening_bracket_stack = []\n   |                                 ^ help: add `;` here\n16 |   let closing_bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpbcmoiskz.rs:16:33\n   |\n16 |   let closing_bracket_stack = []\n   |                                 ^ help: add `;` here\n17 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket_stack`\n  --> /tmp/tmpbcmoiskz.rs:19:33\n   |\n19 |       opening_bracket_count += 1\n   |                                 ^ help: add `;` here\n20 |       opening_bracket_stack.push(0)\n   |       --------------------- unexpected token\n\nerror: expected `;`, found `closing_bracket_stack`\n  --> /tmp/tmpbcmoiskz.rs:22:33\n   |\n22 |       closing_bracket_count += 1\n   |                                 ^ help: add `;` here\n23 |       closing_bracket_stack.push(0)\n   |       --------------------- unexpected token\n\nerror: expected `;`, found `closing_bracket_count`\n  --> /tmp/tmpbcmoiskz.rs:25:33\n   |\n25 |       opening_bracket_count -= 1\n   |                                 ^ help: add `;` here\n26 |       closing_bracket_count -= 1\n   |       --------------------- unexpected token\n\nerror: expected `;`, found `opening_bracket_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = []\n  let close_brackets = []\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets.push(brackets.index)\n    } else if (bracket_count == 1) {\n      close_brackets.push(brackets.index)\n    }\n    if (brackets[brackets.index] == \"<\") {\n      bracket_count += 1\n    } else if (brackets[brackets.index] == \">\") {\n      bracket_count -= 1\n    }\n  }\n  if (bracket_count != 0) {\n    return false\n  }\n  for (let i = 0; i < open_brackets.length; i++) {\n    if (open_brackets[i] != close_brackets[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpyb7e0hc7.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpyb7e0hc7.rs:13:25\n   |\n13 |   let open_brackets = []\n   |                         ^ help: add `;` here\n14 |   let close_brackets = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpyb7e0hc7.rs:14:26\n   |\n14 |   let close_brackets = []\n   |                          ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpyb7e0hc7.rs:30:8\n   |\n30 |   for (let i = 0; i < open_brackets.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpyb7e0hc7.rs:30:12\n   |\n30 |   for (let i = 0; i < open_brackets.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpyb7e0hc7.rs:30:14\n   |\n30 |   for (let i = 0; i < open_brackets.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyb7e0hc7.rs:30:13\n   |\n30 |   for (let i = 0; i < open_brackets.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpyb7e0hc7.rs:30:14\n   |\n30 |   for (let i = 0; i < open_brackets.length; i++) {\n   |              ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyb7e0hc7.rs:16:8\n   |\n16 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_count == 0) {\n16 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpmoe9z8yo.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpmoe9z8yo.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpmoe9z8yo.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpmoe9z8yo.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpmoe9z8yo.rs:19:31\n   |\n19 |       } else if bracket_stack.pop() != i - 1 {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack: List[String] = []\n  let opening_bracket: String = \"\"\n  let closing_bracket: String = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      closing_bracket = c\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          opening_bracket = \"\"\n        }\n      }\n      if opening_bracket == \"\" {\n        bracket_stack.push(c)\n      }\n    }\n  }\n  return opening_bracket == \"\"\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n  --> /tmp/tmpp8k8jxya.rs:12:26\n   |\n12 |   let bracket_stack: List[String] = []\n   |                          ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '<' {\n      bracket_stack.push(bracket_count)\n      bracket_count += 1\n    } else if brackets[i] == '>' {\n      bracket_count -= 1\n      if bracket_count < 0 {\n        return false\n      }\n      if bracket_stack.pop() != bracket_count {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphq1wldqq.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphq1wldqq.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmphq1wldqq.rs:16:40\n   |\n16 |       bracket_stack.push(bracket_count)\n   |                                        ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmphq1wldqq.rs:19:25\n   |\n19 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n20 |       if bracket_count < 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmphq1wldqq.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmphq1wldqq.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmphq1wldqq.rs:16:21\n   |\n16 |       bracket_stack.push(bracket_count)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmphq1wldqq.rs:23:24\n   |\n23 |       if bracket_stack.pop() != bracket_count {\n   |                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more inform",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket_index = 0\n  let open_bracket_count = 0\n  let open_bracket_stack = []\n  let close_bracket_index = 0\n  let close_bracket_count = 0\n  let close_bracket_stack = []\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      open_bracket_count += 1\n      open_bracket_stack.push(i)\n    } else if (brackets[i] == \">\") {\n      close_bracket_count += 1\n      close_bracket_stack.push(i)\n    } else if (brackets[i] == \"<\") {\n      if (open_bracket_count == 0) {\n        return false\n      }\n      if (open_bracket_stack.length == 0) {\n        return false\n      }\n      if (open_bracket_stack[open_bracket_stack.length - 1] != i) {\n        return false\n      }\n      open_bracket_count -= 1\n      open_bracket_stack.pop()\n    } else if (brackets[i] == \">\") {\n      if (close_bracket_count == 0) {\n        return false\n      }\n      if (close_bracket_stack.length == 0) {\n        return false\n      }\n      if (close_bracket_stack[close_bracket_stack.length - 1] != i) {\n        return false\n      }\n      close_bracket_count -= 1\n      close_bracket_stack.pop()\n    }\n  }\n\n  if (open_bracket_count != 0) {\n    return false\n  }\n  if (close_bracket_count != 0) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4sl3txju.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4sl3txju.rs:13:29\n   |\n13 |   let open_bracket_index = 0\n   |                             ^ help: add `;` here\n14 |   let open_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4sl3txju.rs:14:29\n   |\n14 |   let open_bracket_count = 0\n   |                             ^ help: add `;` here\n15 |   let open_bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4sl3txju.rs:15:30\n   |\n15 |   let open_bracket_stack = []\n   |                              ^ help: add `;` here\n16 |   let close_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4sl3txju.rs:16:30\n   |\n16 |   let close_bracket_index = 0\n   |                              ^ help: add `;` here\n17 |   let close_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4sl3txju.rs:17:30\n   |\n17 |   let close_bracket_count = 0\n   |                              ^ help: add `;` here\n18 |   let close_bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp4sl3txju.rs:18:31\n   |\n18 |   let close_bracket_stack = []\n   |                               ^ help: add `;` here\n19 | \n20 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `open_bracket_stack`\n  --> /tmp/tmp4sl3txju.rs:22:30\n   |\n22 |       open_bracket_count += 1\n   |                              ^ help: add `;` here\n23 |       open_bracket_stack.push(i)\n   |       ------------------ unexpected token\n\nerror: expected `;`, found `close_bracket_stack`\n  --> /tmp/tmp4sl3txju.rs:25:31\n   |\n25 |       close_bracket_count += 1\n   |                               ^ he",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (_ == \">\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n    } else if (_ == \"<\") {\n      bracket_count += 1\n    }\n  }\n  if (bracket_count != 0) {\n    return false\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpn6tsirb3.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpn6tsirb3.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpn6tsirb3.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpn6tsirb3.rs:16:8\n   |\n16 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_count == 0) {\n16 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpn6tsirb3.rs:18:15\n   |\n18 |     } else if (_ == \">\") {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (_ == \">\") {\n18 +     } else if _ == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpn6tsirb3.rs:19:10\n   |\n19 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (bracket_count == 0) {\n19 +       if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpn6tsirb3.rs:23:15\n   |\n23 |     } else if (_ == \"<\") {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n23 -     } else if (_ == \"<\") {\n23 +     } else if _ == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpn6tsirb3.rs:27:6\n   |\n27 |   if (bracket_count != 0) {\n   |      ^                  ^\n   |\nhelp: remove these parentheses\n   |\n27 -   if (bracket_count != 0) {\n27 +   if bracke",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_stack.push(c)\n        bracket_count += 1\n      } else {\n        open_bracket = true\n      }\n    } else if c == \">\" {\n      if open_bracket {\n        if bracket_stack.pop() != \"<\" {\n          return false\n        }\n        bracket_count -= 1\n      } else {\n        open_bracket = false\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdjgvx99p.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdjgvx99p.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdjgvx99p.rs:14:27\n   |\n14 |   let open_bracket = false\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpdjgvx99p.rs:18:30\n   |\n18 |         bracket_stack.push(c)\n   |                              ^ help: add `;` here\n19 |         bracket_count += 1\n   |         ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpdjgvx99p.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdjgvx99p.rs:18:23\n   |\n18 |         bracket_stack.push(c)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdjgvx99p.rs:25:26\n   |\n25 |         if bracket_stack.pop() != \"<\" {\n   |                          ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if opening_bracket != closing_bracket {\n        return false\n      }\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmptlqhr4xm.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptlqhr4xm.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptlqhr4xm.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmptlqhr4xm.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \">\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmptlqhr4xm.rs:18:28\n   |\n18 |       closing_bracket = \">\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmptlqhr4xm.rs:27:27\n   |\n27 |       opening_bracket = \"\"\n   |                           ^ help: add `;` here\n28 |       closing_bracket = \"\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmptlqhr4xm.rs:28:27\n   |\n28 |       closing_bracket = \"\"\n   |                           ^ help: add `;` here\n29 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmptlqhr4xm.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information about th",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '<' {\n      bracket_stack.push(i)\n    } else if brackets[i] == '>' {\n      if len(bracket_stack) == 0 {\n        return false\n      } else {\n        let last_index = bracket_stack.pop()\n        if brackets[last_index] != '<' {\n          return false\n        }\n      }\n    }\n  }\n  return len(bracket_stack) == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpao3nnuyh.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpao3nnuyh.rs:20:45\n   |\n20 |         let last_index = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n21 |         if brackets[last_index] != '<' {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpao3nnuyh.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpao3nnuyh.rs:17:10\n   |\n17 |       if len(bracket_stack) == 0 {\n   |          ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpao3nnuyh.rs:27:10\n   |\n27 |   return len(bracket_stack) == 0\n   |          ^^^ not found in this scope\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpao3nnuyh.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpao3nnuyh.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpao3nnuyh.rs:20:40\n   |\n20 |         let last_index = bracket_stack.pop()\n   |                                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let open_bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      open_bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      open_bracket_count -= 1\n    }\n    if (open_bracket_count == 0) {\n      bracket_stack.pop()\n    } else if (open_bracket_count < 0) {\n      bracket_stack.push(brackets[i])\n    }\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmplf5_0zxw.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let open_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmplf5_0zxw.rs:13:29\n   |\n13 |   let open_bracket_count = 0\n   |                             ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmplf5_0zxw.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplf5_0zxw.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplf5_0zxw.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplf5_0zxw.rs:20:8\n   |\n20 |     if (open_bracket_count == 0) {\n   |        ^                       ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (open_bracket_count == 0) {\n20 +     if open_bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplf5_0zxw.rs:22:15\n   |\n22 |     } else if (open_bracket_count < 0) {\n   |               ^                      ^\n   |\nhelp: remove these parentheses\n   |\n22 -     } else if (open_bracket_count < 0) {\n22 +     } else if open_bracket_count < 0 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      opening_bracket = brackets[i]\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n      bracket_count -= 1\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_q7rgk15.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_q7rgk15.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_q7rgk15.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_q7rgk15.rs:17:36\n   |\n17 |       opening_bracket = brackets[i]\n   |                                    ^ help: add `;` here\n18 |       closing_bracket = \">\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_q7rgk15.rs:18:28\n   |\n18 |       closing_bracket = \">\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_q7rgk15.rs:21:28\n   |\n21 |       opening_bracket = \">\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"<\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_q7rgk15.rs:22:28\n   |\n22 |       closing_bracket = \"<\"\n   |                            ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp_q7rgk15.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_q7rgk15.rs:16:8\n   |\n16 |     if (brackets[i] ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == '<' {\n      bracket_count += 1\n      bracket_stack.push(c)\n    } else if c == '>' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw_325ceu.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw_325ceu.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpw_325ceu.rs:15:24\n   |\n15 |     let c = brackets[i]\n   |                        ^ help: add `;` here\n16 |     if c == '<' {\n   |     -- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmpw_325ceu.rs:17:25\n   |\n17 |       bracket_count += 1\n   |                         ^ help: add `;` here\n18 |       bracket_stack.push(c)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpw_325ceu.rs:23:25\n   |\n23 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n24 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpw_325ceu.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpw_325ceu.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpw_325ceu.rs:18:21\n   |\n18 |       bracket_stack.push(c)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpw_325ceu.rs:25:23\n   |\n25 |         bracket_stack.pop()\n   |                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket_index = 0\n  let close_bracket_index = 0\n  for i in range(0, brackets.length) {\n    if brackets[i] == \"<\" {\n      bracket_count += 1\n      open_bracket_index = i\n    } else if brackets[i] == \">\" {\n      bracket_count -= 1\n      close_bracket_index = i\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4k9q2nef.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4k9q2nef.rs:13:29\n   |\n13 |   let open_bracket_index = 0\n   |                             ^ help: add `;` here\n14 |   let close_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp4k9q2nef.rs:14:30\n   |\n14 |   let close_bracket_index = 0\n   |                              ^ help: add `;` here\n15 |   for i in range(0, brackets.length) {\n   |   --- unexpected token\n\nerror: expected `;`, found `open_bracket_index`\n  --> /tmp/tmp4k9q2nef.rs:17:25\n   |\n17 |       bracket_count += 1\n   |                         ^ help: add `;` here\n18 |       open_bracket_index = i\n   |       ------------------ unexpected token\n\nerror: expected `;`, found `close_bracket_index`\n  --> /tmp/tmp4k9q2nef.rs:20:25\n   |\n20 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n21 |       close_bracket_index = i\n   |       ------------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp4k9q2nef.rs:15:12\n   |\n15 |   for i in range(0, brackets.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp4k9q2nef.rs:15:30\n   |\n15 |   for i in range(0, brackets.length) {\n   |                              ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp4k9q2nef.rs:16:8\n   |\n16 |     if brackets[i] == \"<\" {\n   |        ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <S",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  let open_bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      if (open_bracket) {\n        open_bracket_stack.pop()\n      }\n      open_bracket = true\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      if (!open_bracket) {\n        return false\n      }\n      open_bracket = false\n      bracket_count -= 1\n      if (bracket_count == 0) {\n        open_bracket_stack.pop()\n      }\n    } else {\n      if (open_bracket) {\n        open_bracket_stack.push(i)\n      }\n    }\n  }\n  return bracket_count == 0 && open_bracket_stack.empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpk6q4djh6.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpk6q4djh6.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   let open_bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpk6q4djh6.rs:14:30\n   |\n14 |   let open_bracket_stack = []\n   |                              ^ help: add `;` here\n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpk6q4djh6.rs:20:26\n   |\n20 |       open_bracket = true\n   |                          ^ help: add `;` here\n21 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpk6q4djh6.rs:26:27\n   |\n26 |       open_bracket = false\n   |                           ^ help: add `;` here\n27 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpk6q4djh6.rs:27:25\n   |\n27 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n28 |       if (bracket_count == 0) {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpk6q4djh6.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpk6q4djh6.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpk",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.push(Char::from(brackets[0]))\n    } else if bracket_stack.peek() == Char::from(brackets[0]) {\n      bracket_stack.pop()\n    } else {\n      return false\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpsvu8v45h.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared type `Char`\n  --> /tmp/tmpsvu8v45h.rs:15:26\n   |\n15 |       bracket_stack.push(Char::from(brackets[0]))\n   |                          ^^^^ use of undeclared type `Char`\n\nerror[E0433]: failed to resolve: use of undeclared type `Char`\n  --> /tmp/tmpsvu8v45h.rs:16:39\n   |\n16 |     } else if bracket_stack.peek() == Char::from(brackets[0]) {\n   |                                       ^^^^ use of undeclared type `Char`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpsvu8v45h.rs:15:21\n   |\n15 |       bracket_stack.push(Char::from(brackets[0]))\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpsvu8v45h.rs:15:37\n   |\n15 |       bracket_stack.push(Char::from(brackets[0]))\n   |                                     ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `peek` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpsvu8v45h.rs:16:29\n   |\n16 |     } else if bracket_stack.peek() == Char::from(brackets[0]) {\n   |                             ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpsvu8v45h.rs:16:50\n   |\n16 |     } else if bracket_stack",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n      bracket_count += 1\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if last_bracket != \"<\" {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmptmltmutc.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptmltmutc.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmptmltmutc.rs:15:30\n   |\n15 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n16 |     if bracket == \"<\" {\n   |     -- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmptmltmutc.rs:17:34\n   |\n17 |       bracket_stack.push(bracket)\n   |                                  ^ help: add `;` here\n18 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmptmltmutc.rs:23:45\n   |\n23 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n24 |       if last_bracket != \"<\" {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmptmltmutc.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmptmltmutc.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptmltmutc.rs:17:21\n   |\n17 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      if opening_bracket == \"\" {\n        opening_bracket = c\n      } else {\n        opening_bracket += c\n      }\n      bracket_count += 1\n    } else if c == \">\" {\n      if closing_bracket == \"\" {\n        closing_bracket = c\n      } else {\n        closing_bracket += c\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3g85lcw2.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3g85lcw2.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp3g85lcw2.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmp3g85lcw2.rs:32:29\n   |\n32 |   return bracket_count == 0 and opening_bracket == closing_bracket\n   |                             ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp3g85lcw2.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp3g85lcw2.rs:20:9\n   |\n20 |         opening_bracket += c\n   |         ---------------^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp3g85lcw2.rs:27:9\n   |\n27 |         closing_bracket += c\n   |         ---------------^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket != \"\" {\n        bracket_stack.pop()\n      }\n      closing_bracket = c\n    } else {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket == \"\" {\n        bracket_stack.push(c)\n      }\n    }\n  }\n  if opening_bracket != \"\" {\n    return false\n  }\n  if closing_bracket != \"\" {\n    return false\n  }\n  return bracket_stack.empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpufrb5rfy.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpufrb5rfy.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpufrb5rfy.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpufrb5rfy.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpufrb5rfy.rs:23:23\n   |\n23 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpufrb5rfy.rs:31:23\n   |\n31 |         bracket_stack.push(c)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `empty` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpufrb5rfy.rs:41:24\n   |\n41 |   return bracket_stack.empty()\n   |                        ^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if bracket_stack.is_empty() {\n        return true\n      } else {\n        bracket_stack.pop()\n      }\n    } else {\n      bracket_stack.push(bracket_count)\n      bracket_count -= 1\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpj5l9izec.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpj5l9izec.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpj5l9izec.rs:22:40\n   |\n22 |       bracket_stack.push(bracket_count)\n   |                                        ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpj5l9izec.rs:19:23\n   |\n19 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpj5l9izec.rs:22:21\n   |\n22 |       bracket_stack.push(bracket_count)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = []\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets.push(false)\n    }\n    if (bracket_count == 0 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 0 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 1 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 1 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 2 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 2 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 3 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 3 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 4 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 4 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 5 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 5 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 6 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 6 && brackets[i] == \">\") {\n      open_\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8e8gmmyj.rs:75:3\n   |\n11 | fn correct_bracketing(brackets: String) -> bool {\n   |                                                 - unclosed delimiter\n...\n14 |   for _ in brackets.chars() {\n   |                             - unclosed delimiter\n...\n57 |     if (bracket_count == 6 && brackets[i] == \">\") {\n   |                                                   - this delimiter might not be properly closed...\n58 |       open_\n59 | }\n   | - ...as it matches this but it has different indentation\n...\n75 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8e8gmmyj.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8e8gmmyj.rs:13:25\n   |\n13 |   let open_brackets = []\n   |                         ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8e8gmmyj.rs:18:40\n   |\n18 |     if (bracket_count == 0 && brackets[i] == \"<\") {\n   |                                        ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8e8gmmyj.rs:19:21\n   |\n19 |       open_brackets[i] = true\n   |                     ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8e8gmmyj.rs:21:40\n   |\n21 |     if (bracket_count == 0 && brackets[i] == \">\") {\n   |                                        ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8e8gmmyj.rs:22:21\n   |\n22 |       open_brackets[i] = false\n   |                     ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8e8gmmyj.rs:24:40\n   |\n24 |     if (bracket_count == 1 && brackets[i] == \"<\") {\n   |                                        ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"<\" {\n      if bracket_stack.length == 0 {\n        bracket_stack.push(c)\n      } else if bracket_stack.last() == \">\" {\n        bracket_stack.pop()\n      } else {\n        bracket_stack.push(c)\n      }\n    } else if c == \">\" {\n      if bracket_stack.length == 0 {\n        return false\n      } else if bracket_stack.last() == \"<\" {\n        bracket_stack.pop()\n      } else {\n        bracket_stack.push(c)\n      }\n    }\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpincouxu5.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpincouxu5.rs:14:24\n   |\n14 |     let c = brackets[i]\n   |                        ^ help: add `;` here\n15 |     if c == \"<\" {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpincouxu5.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpincouxu5.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tmp/tmpincouxu5.rs:16:24\n   |\n16 |       if bracket_stack.length == 0 {\n   |                        ^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpincouxu5.rs:17:23\n   |\n17 |         bracket_stack.push(c)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpincouxu5.rs:18:41\n   |\n18 |       } else if bracket_stack.last() == \">\" {\n   |                                         ^^^ expected enum `Option`, found `&str`\n   |\n   = note:   expected enum `Option<&_>`\n           found reference `&'static str`\nhelp: try wrapping the expression in `Some`\n   |\n18 |       } else if bracket_stack.last() == Some(\">\") {\n   |                                         +++++   +\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpincouxu5.rs:19:23\n   |\n19 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror[E0599]: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if opening_bracket == closing_bracket {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      } else {\n        closing_bracket = c\n      }\n    } else {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if opening_bracket != closing_bracket {\n        return false\n      }\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    }\n  }\n  return opening_bracket == \"\"\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvk4rnhem.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpvk4rnhem.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvk4rnhem.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpvk4rnhem.rs:23:29\n   |\n23 |         opening_bracket = \"\"\n   |                             ^ help: add `;` here\n24 |         closing_bracket = \"\"\n   |         --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpvk4rnhem.rs:35:27\n   |\n35 |       opening_bracket = \"\"\n   |                           ^ help: add `;` here\n36 |       closing_bracket = \"\"\n   |       --------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpvk4rnhem.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = _\n    } else if _ == \"<\" {\n      bracket_count += 1\n    } else if _ == \">\" {\n      bracket_count -= 1\n    } else {\n      throw \"Invalid bracket\"\n    }\n    if bracket_count == 0 {\n      closing_bracket = _\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqk0xzqy4.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqk0xzqy4.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqk0xzqy4.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `\"Invalid bracket\"`\n  --> /tmp/tmpqk0xzqy4.rs:23:13\n   |\n23 |       throw \"Invalid bracket\"\n   |             ^^^^^^^^^^^^^^^^^ expected one of 8 possible tokens\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpqk0xzqy4.rs:17:25\n   |\n17 |       opening_bracket = _\n   |                         ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpqk0xzqy4.rs:18:15\n   |\n18 |     } else if _ == \"<\" {\n   |               ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpqk0xzqy4.rs:20:15\n   |\n20 |     } else if _ == \">\" {\n   |               ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpqk0xzqy4.rs:26:25\n   |\n26 |       closing_bracket = _\n   |                         ^ `_` not allowed here\n\nerror: aborting due to 8 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_stack.is_empty()) {\n      opening_bracket_count += 1\n    } else {\n      if (bracket_stack.last() == \"<\") {\n        opening_bracket_count -= 1\n      } else {\n        closing_bracket_count += 1\n      }\n    }\n    bracket_stack.push(bracket_stack.last())\n  }\n  return opening_bracket_count == 0 && closing_bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmptlzhxfu3.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptlzhxfu3.rs:13:32\n   |\n13 |   let opening_bracket_count = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptlzhxfu3.rs:14:32\n   |\n14 |   let closing_bracket_count = 0\n   |                                ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptlzhxfu3.rs:16:8\n   |\n16 |     if (bracket_stack.is_empty()) {\n   |        ^                        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_stack.is_empty()) {\n16 +     if bracket_stack.is_empty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptlzhxfu3.rs:19:10\n   |\n19 |       if (bracket_stack.last() == \"<\") {\n   |          ^                           ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (bracket_stack.last() == \"<\") {\n19 +       if bracket_stack.last() == \"<\" {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmptlzhxfu3.rs:19:35\n   |\n19 |       if (bracket_stack.last() == \"<\") {\n   |                                   ^^^ expected enum `Option`, found `&str`\n   |\n   = note:   expected enum `Option<&_>`\n           found reference `&'static str`\nhelp: try wrapping the expression in `Some`\n   |\n19 |       if (bracket_stack.last() == Some(\"<\")) {\n   |                                   +++++   +\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptlzhxfu3.rs:25:19\n   |\n25 |     bracket_stack.push(bracket_stack.last())\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror: aborting due t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '<' {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    } else if brackets[i] == '>' {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppkajl6_7.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmppkajl6_7.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmppkajl6_7.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmppkajl6_7.rs:16:23\n   |\n16 |         bracket_stack.push(i)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmppkajl6_7.rs:19:25\n   |\n19 |           bracket_stack.pop()\n   |                         ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmppkajl6_7.rs:29:25\n   |\n29 |           bracket_stack.pop()\n   |                         ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for _ in brackets.chars() {\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpzs73wdjh.rs:93:3\n   |\n11 | fn correct_bracketing(brackets: String) -> bool {\n   |                                                 - unclosed delimiter\n...\n19 |   for _ in brackets.chars() {\n   |                             - this delimiter might not be properly closed...\n...\n77 | }\n   | - ...as it matches this but it has different indentation\n...\n93 | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzs73wdjh.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzs73wdjh.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzs73wdjh.rs:14:27\n   |\n14 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzs73wdjh.rs:15:27\n   |\n15 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n16 |   let opening_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzs73wdjh.rs:16:32\n   |\n16 |   let opening_bracket_count = 0\n   |                                ^ help: add `;` here\n17 |   let closing_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzs73wdjh.rs:17:32\n   |\n17 |   let closing_bracket_count = 0\n   |                                ^ help: add `;` here\n18 | \n19 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket_count`\n  --> /tmp/tmpzs73wdjh.rs:21:27\n   |\n21 |       opening_bracket = \"\"\n   |                           ^ help: add `;` here\n22 |       opening_bracket_count = 0\n   |       --------------------- unexpected tok",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = []\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] == '<') {\n        open_brackets.push(0)\n      } else {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] == '>') {\n        if (open_brackets.pop() != 0) {\n          return false\n        }\n      } else {\n        return false\n      }\n    } else {\n      if (brackets[0] == '<') {\n        open_brackets.push(0)\n      } else if (brackets[0] == '>') {\n        if (open_brackets.pop() != 0) {\n          return false\n        }\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx__9fd7p.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpx__9fd7p.rs:13:25\n   |\n13 |   let open_brackets = []\n   |                         ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx__9fd7p.rs:15:8\n   |\n15 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (bracket_count == 0) {\n15 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx__9fd7p.rs:16:10\n   |\n16 |       if (brackets[0] == '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n16 -       if (brackets[0] == '<') {\n16 +       if brackets[0] == '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx__9fd7p.rs:21:15\n   |\n21 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n21 -     } else if (bracket_count == 1) {\n21 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx__9fd7p.rs:22:10\n   |\n22 |       if (brackets[0] == '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n22 -       if (brackets[0] == '>') {\n22 +       if brackets[0] == '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx__9fd7p.rs:23:12\n   |\n23 |         if (open_brackets.pop() != 0) {\n   |            ^                        ^\n   |\nhelp: remove these parentheses\n   |\n23 -         if (open_brackets.pop() != 0) {\n23 +         if open_brackets.pop() != 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx__9fd7p.rs:30:10\n   |\n30 |  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      if bracket_stack.length == 0 {\n        bracket_stack.push(bracket)\n      } else {\n        let last_bracket = bracket_stack.pop()\n        if last_bracket != \">\" {\n          return false\n        }\n      }\n    } else {\n      bracket_stack.push(bracket)\n    }\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp5_d3nhkb.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5_d3nhkb.rs:14:30\n   |\n14 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n15 |     if bracket == \"<\" {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5_d3nhkb.rs:19:47\n   |\n19 |         let last_bracket = bracket_stack.pop()\n   |                                               ^ help: add `;` here\n20 |         if last_bracket != \">\" {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5_d3nhkb.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp5_d3nhkb.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tmp/tmp5_d3nhkb.rs:16:24\n   |\n16 |       if bracket_stack.length == 0 {\n   |                        ^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5_d3nhkb.rs:17:23\n   |\n17 |         bracket_stack.push(bracket)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5_d3nhkb.rs:19:42\n   |\n19 |         let last_bracket = bracket_stack.pop()\n   |                                          ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5_d3nhkb.rs:25:21\n   |\n25 |       br",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      bracket_count -= 1\n    } else {\n      bracket_stack.push(brackets[i])\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpv02xml1g.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpv02xml1g.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpv02xml1g.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpv02xml1g.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpv02xml1g.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpv02xml1g.rs:22:8\n   |\n22 |     if (bracket_count < 0) {\n   |        ^                 ^\n   |\nhelp: remove these parentheses\n   |\n22 -     if (bracket_count < 0) {\n22 +     if bracket_count < 0 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpv02xml1g.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpv02xml1g.rs:20:21\n   |\n20 |       bracket_stack.push(brack",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      if (bracket_stack.is_empty()) {\n        return false\n      } else if (bracket_stack.pop() != i - 1) {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0lm979xu.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0lm979xu.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 | \n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp0lm979xu.rs:17:28\n   |\n17 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n18 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp0lm979xu.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0lm979xu.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0lm979xu.rs:19:15\n   |\n19 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (brackets[i] == \">\") {\n19 +     } else if brackets[i] == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0lm979xu.rs:20:10\n   |\n20 |       if (bracket_stack.is_empty()) {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n20 -       if (bracket_stack.is_empty()) {\n20 +       if bracket_stack.is_empty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0lm979xu.rs:22:17\n   |\n22 |       } else if (bracket_stack.pop() != i - 1) {\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n    } else if c == \">\" {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n    } else {\n      bracket_count += 1\n    }\n  }\n  return bracket_count == 0 or bracket_count == brackets.length() - 1\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbkvz2isp.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbkvz2isp.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpbkvz2isp.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpbkvz2isp.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \">\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpbkvz2isp.rs:20:28\n   |\n20 |       opening_bracket = \">\"\n   |                            ^ help: add `;` here\n21 |       closing_bracket = \"<\"\n   |       --------------- unexpected token\n\nerror: `or` is not a logical operator\n  --> /tmp/tmpbkvz2isp.rs:26:29\n   |\n26 |   return bracket_count == 0 or bracket_count == brackets.length() - 1\n   |                             ^^ help: use `||` to perform logical disjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpbkvz2isp.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpbkvz2isp.rs:26:58\n   |\n26 |   return bracket_count == 0 or bracket_count == brackets.length() - 1\n   |                ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp1qf8ic48.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1qf8ic48.rs:14:30\n   |\n14 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n15 |     if bracket == \"<\" {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1qf8ic48.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:16:21\n   |\n16 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:20:31\n   |\n20 |       } else if bracket_stack.pop() != \"<\" {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp1qf8ic48.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1qf8ic48.rs:14:30\n   |\n14 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n15 |     if bracket == \"<\" {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1qf8ic48.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:16:21\n   |\n16 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:20:31\n   |\n20 |       } else if bracket_stack.pop() != \"<\" {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n    } else if c == \">\" {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n    } else {\n      if opening_bracket == \"\" {\n        return false\n      } else {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq83p8o_f.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq83p8o_f.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq83p8o_f.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpq83p8o_f.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \">\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpq83p8o_f.rs:20:28\n   |\n20 |       opening_bracket = \">\"\n   |                            ^ help: add `;` here\n21 |       closing_bracket = \"<\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpq83p8o_f.rs:26:29\n   |\n26 |         opening_bracket = \"\"\n   |                             ^ help: add `;` here\n27 |         closing_bracket = \"\"\n   |         --------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpq83p8o_f.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if open_bracket {\n        bracket_count -= 1\n      }\n      open_bracket = false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgdqq4kdl.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgdqq4kdl.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpgdqq4kdl.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if !open_bracket {\n        return false\n      }\n      open_bracket = false\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  if bracket_count != 0 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphti70ubz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphti70ubz.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmphti70ubz.rs:24:27\n   |\n24 |       open_bracket = false\n   |                           ^ help: add `;` here\n25 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmphti70ubz.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      opening_bracket = brackets[i]\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n      bracket_count -= 1\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_q7rgk15.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_q7rgk15.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_q7rgk15.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_q7rgk15.rs:17:36\n   |\n17 |       opening_bracket = brackets[i]\n   |                                    ^ help: add `;` here\n18 |       closing_bracket = \">\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_q7rgk15.rs:18:28\n   |\n18 |       closing_bracket = \">\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_q7rgk15.rs:21:28\n   |\n21 |       opening_bracket = \">\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"<\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp_q7rgk15.rs:22:28\n   |\n22 |       closing_bracket = \"<\"\n   |                            ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp_q7rgk15.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_q7rgk15.rs:16:8\n   |\n16 |     if (brackets[i] ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      if (bracket_stack.is_empty()) {\n        return false\n      } else {\n        bracket_stack.pop()\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5fhe69oc.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5fhe69oc.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp5fhe69oc.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp5fhe69oc.rs:22:28\n   |\n22 |         bracket_stack.pop()\n   |                            ^ help: add `;` here\n23 |         bracket_count -= 1\n   |         ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp5fhe69oc.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5fhe69oc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5fhe69oc.rs:18:15\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \">\") {\n18 +     } else if brackets[i] == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5fhe69oc.rs:19:10\n   |\n19 |       if (bracket_stack.is_empty()) {\n   |          ^                        ^\n   |\nhelp: remove these parentheses\n   |\n19 -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (bracket_count == 1) {\n      closing_bracket = _\n    } else if (bracket_count == 2) {\n      if (_ != \">\") {\n        return false\n      }\n      bracket_count = 0\n    } else {\n      bracket_count += 1\n    }\n  }\n  return opening_bracket == \"(\" && closing_bracket == \")\"\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpt7akmwe3.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpt7akmwe3.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpt7akmwe3.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7akmwe3.rs:16:8\n   |\n16 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_count == 0) {\n16 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7akmwe3.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7akmwe3.rs:20:15\n   |\n20 |     } else if (bracket_count == 2) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (bracket_count == 2) {\n20 +     } else if bracket_count == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7akmwe3.rs:21:10\n   |\n21 |       if (_ != \">\") {\n   |          ^        ^\n   |\nhelp: remove these parentheses\n   |\n21 -       if (_ != \">\") {\n21 +       if _ != \">\" {\n   | \n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpt7akmwe3.rs:17:25\n   |\n17 |       opening_bracket = _\n   |                         ^ `_` not allowed here\n\ne",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (bracket_count == 1) {\n      closing_bracket = _\n    } else if (bracket_count == 2) {\n      if (_ != \">\") {\n        return false\n      }\n      bracket_count = 0\n    } else {\n      bracket_count += 1\n    }\n  }\n  return opening_bracket == \"(\" && closing_bracket == \")\"\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpt7akmwe3.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpt7akmwe3.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpt7akmwe3.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7akmwe3.rs:16:8\n   |\n16 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_count == 0) {\n16 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7akmwe3.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7akmwe3.rs:20:15\n   |\n20 |     } else if (bracket_count == 2) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (bracket_count == 2) {\n20 +     } else if bracket_count == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt7akmwe3.rs:21:10\n   |\n21 |       if (_ != \">\") {\n   |          ^        ^\n   |\nhelp: remove these parentheses\n   |\n21 -       if (_ != \">\") {\n21 +       if _ != \">\" {\n   | \n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpt7akmwe3.rs:17:25\n   |\n17 |       opening_bracket = _\n   |                         ^ `_` not allowed here\n\ne",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if opening_bracket == c {\n        bracket_count -= 1\n      }\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    }\n  }\n  if bracket_count != 0 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphk3knq1a.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphk3knq1a.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphk3knq1a.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmphk3knq1a.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \">\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmphk3knq1a.rs:18:28\n   |\n18 |       closing_bracket = \">\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmphk3knq1a.rs:27:27\n   |\n27 |       opening_bracket = \"\"\n   |                           ^ help: add `;` here\n28 |       closing_bracket = \"\"\n   |       --------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmphk3knq1a.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      opening_bracket = brackets[i]\n    } else if (brackets[i] == \">\") {\n      closing_bracket = brackets[i]\n    } else {\n      if (opening_bracket != \"\") {\n        if (closing_bracket != \"\") {\n          if (opening_bracket != closing_bracket) {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          closing_bracket = \"\"\n        }\n      }\n    }\n  }\n  return opening_bracket == \"\"\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcuv7akf8.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpcuv7akf8.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcuv7akf8.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpcuv7akf8.rs:26:31\n   |\n26 |           opening_bracket = \"\"\n   |                               ^ help: add `;` here\n27 |           closing_bracket = \"\"\n   |           --------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcuv7akf8.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcuv7akf8.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcuv7akf8.rs:18:15\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \">\") {\n18 +     } else if brackets[i] == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcuv7akf8.rs:21:10\n   |\n21 |       if (opening_bracket != \"\") {\n   |          ^                     ^\n   |\nhelp: remove these parentheses\n   |\n2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if opening_bracket == \"\" {\n      if _ == \"<\" {\n        opening_bracket = _\n      } else {\n        return false\n      }\n    } else if closing_bracket == \"\" {\n      if _ == \">\" {\n        closing_bracket = _\n      } else {\n        return false\n      }\n    } else if _ == \"<\" {\n      if opening_bracket == \">\" {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      } else {\n        return false\n      }\n    } else if _ == \">\" {\n      if opening_bracket == \"<\" {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpivuf1fwt.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpivuf1fwt.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpivuf1fwt.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpivuf1fwt.rs:30:29\n   |\n30 |         opening_bracket = \"\"\n   |                             ^ help: add `;` here\n31 |         closing_bracket = \"\"\n   |         --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpivuf1fwt.rs:37:29\n   |\n37 |         opening_bracket = \"\"\n   |                             ^ help: add `;` here\n38 |         closing_bracket = \"\"\n   |         --------------- unexpected token\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpivuf1fwt.rs:17:10\n   |\n17 |       if _ == \"<\" {\n   |          ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpivuf1fwt.rs:18:27\n   |\n18 |         opening_bracket = _\n   |                           ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpivuf1fwt.rs:23:10\n   |\n23 |       if _ == \">\" {\n   |          ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpivuf1fwt.rs:24:27\n   |\n24 |         closing_bracket = _\n   |                           ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0zhy5ymz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp0zhy5ymz.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        let last_bracket = bracket_stack.pop()\n        if brackets[last_bracket] != \"<\" {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp2g22gzi0.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2g22gzi0.rs:20:47\n   |\n20 |         let last_bracket = bracket_stack.pop()\n   |                                               ^ help: add `;` here\n21 |         if brackets[last_bracket] != \"<\" {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp2g22gzi0.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp2g22gzi0.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp2g22gzi0.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp2g22gzi0.rs:20:42\n   |\n20 |         let last_bracket = bracket_stack.pop()\n   |                                          ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if open_bracket {\n        bracket_count -= 1\n      }\n      open_bracket = false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgdqq4kdl.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgdqq4kdl.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpgdqq4kdl.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0zhy5ymz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp0zhy5ymz.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n    } else {\n      if (bracket_count == 0) {\n        open_bracket = true\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcth4sl_s.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcth4sl_s.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcth4sl_s.rs:16:10\n   |\n16 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -       if (bracket_count == 0) {\n16 +       if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcth4sl_s.rs:21:10\n   |\n21 |       if (bracket_count == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n21 -       if (bracket_count == 0) {\n21 +       if bracket_count == 0 {\n   | \n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if brackets[opening_bracket] != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpoxdj945y.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoxdj945y.rs:20:48\n   |\n20 |       let opening_bracket = bracket_stack.pop()\n   |                                                ^ help: add `;` here\n21 |       if brackets[opening_bracket] != \"<\" {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpoxdj945y.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpoxdj945y.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpoxdj945y.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpoxdj945y.rs:20:43\n   |\n20 |       let opening_bracket = bracket_stack.pop()\n   |                                           ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwsmke9j4.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpwsmke9j4.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpwsmke9j4.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpwsmke9j4.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpwsmke9j4.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp55fzux5s.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp55fzux5s.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:16:18\n   |\n16 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:18:25\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:18:15\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \">\") {\n18 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.length == 0 {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] != \">\" {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.length == 0 {\n        return false\n      } else {\n        bracket_stack.push(i)\n      }\n    }\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpinft6hcq.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpinft6hcq.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpinft6hcq.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tmp/tmpinft6hcq.rs:15:24\n   |\n15 |       if bracket_stack.length == 0 {\n   |                        ^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpinft6hcq.rs:16:23\n   |\n16 |         bracket_stack.push(i)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the type `String` cannot be indexed by `Option<&_>`\n  --> /tmp/tmpinft6hcq.rs:18:12\n   |\n18 |         if brackets[bracket_stack.last()] != \">\" {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `Option<&_>`\n   |\n   = help: the trait `Index<Option<&_>>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpinft6hcq.rs:21:23\n   |\n21 |         bracket_stack.pop()\n   |    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromCharCode(c)\n    } else if c == '<' {\n      bracket_count -= 1\n    } else if c == '>' {\n      bracket_count += 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvedmjyew.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpvedmjyew.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvedmjyew.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpvedmjyew.rs:17:25\n   |\n17 |       opening_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpvedmjyew.rs:17:45\n   |\n17 |       opening_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpvedmjyew.rs:19:25\n   |\n19 |       closing_bracket = String.fromCharCode(c)\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpvedmjyew.rs:19:45\n   |\n19 |       closing_bracket = String.fromCharCode(c)\n   |                                             ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpvedmjyew.rs:20:15\n   |\n20 |     } else if c == '<' {\n   |               ^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpvedmjyew.rs:22:15\n   |\n22 |     } else if c == '>' {\n   |               ^ not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp55fzux5s.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp55fzux5s.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:16:18\n   |\n16 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:18:25\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:18:15\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \">\") {\n18 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_stack.push(c)\n        bracket_count += 1\n      } else {\n        open_bracket = true\n      }\n    } else if c == \">\" {\n      if open_bracket {\n        if bracket_stack.pop() != \"<\" {\n          return false\n        }\n        bracket_count -= 1\n      } else {\n        open_bracket = false\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdjgvx99p.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdjgvx99p.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdjgvx99p.rs:14:27\n   |\n14 |   let open_bracket = false\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpdjgvx99p.rs:18:30\n   |\n18 |         bracket_stack.push(c)\n   |                              ^ help: add `;` here\n19 |         bracket_count += 1\n   |         ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpdjgvx99p.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdjgvx99p.rs:18:23\n   |\n18 |         bracket_stack.push(c)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdjgvx99p.rs:25:26\n   |\n25 |         if bracket_stack.pop() != \"<\" {\n   |                          ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpux_l66bz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        let last_index = bracket_stack.pop()\n        if brackets[last_index] != \"<\" {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppdqbbfht.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmppdqbbfht.rs:20:45\n   |\n20 |         let last_index = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n21 |         if brackets[last_index] != \"<\" {\n   |         -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmppdqbbfht.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmppdqbbfht.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmppdqbbfht.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmppdqbbfht.rs:20:40\n   |\n20 |         let last_index = bracket_stack.pop()\n   |                                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (bracket_count == 1) {\n      closing_bracket = _\n    } else if (bracket_count == 2) {\n      if (_ != \">\") {\n        return false\n      }\n      bracket_count = 0\n    } else {\n      bracket_count += 1\n    }\n  }\n  if (bracket_count != 0) {\n    return false\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw3f4ksbt.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw3f4ksbt.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpw3f4ksbt.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpw3f4ksbt.rs:16:8\n   |\n16 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_count == 0) {\n16 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpw3f4ksbt.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpw3f4ksbt.rs:20:15\n   |\n20 |     } else if (bracket_count == 2) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (bracket_count == 2) {\n20 +     } else if bracket_count == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpw3f4ksbt.rs:21:10\n   |\n21 |       if (_ != \">\") {\n   |          ^        ^\n   |\nhelp: remove these parentheses\n   |\n21 -       if (_ != \">\") {\n21 +       if _ != \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpw3f4ksbt.rs:29:6\n   |\n29 |   if (bracket_count != 0) {\n   |      ^                  ^\n   |\nhelp: remove these parentheses\n   |\n29 -   if",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = 0\n  let close_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      open_brackets += 1\n    } else if (brackets[i] == \">\") {\n      close_brackets += 1\n    }\n  }\n\n  if (open_brackets == close_brackets) {\n    return true\n  } else {\n    return false\n  }\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph0q5jp38.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph0q5jp38.rs:13:24\n   |\n13 |   let open_brackets = 0\n   |                        ^ help: add `;` here\n14 |   let close_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph0q5jp38.rs:14:25\n   |\n14 |   let close_brackets = 0\n   |                         ^ help: add `;` here\n15 | \n16 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmph0q5jp38.rs:17:18\n   |\n17 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmph0q5jp38.rs:19:25\n   |\n19 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph0q5jp38.rs:17:8\n   |\n17 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (brackets[i] == \"<\") {\n17 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph0q5jp38.rs:19:15\n   |\n19 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (brackets[i] == \">\") {\n19 +     } else if brackets[i] == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph0q5jp38.rs:24:6\n   |\n24 |   if (open_brackets == close_brackets) {\n   |      ^                               ^\n   |\nhelp: remove these parentheses\n   |\n24 -   if (open_brackets == close_brackets) {\n24 +   if open_brackets == close_brackets {\n   | \n\nerror: aborting due to 5 previous errors; 3 warnings emitted\n\nFor more information abou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if is_opening_bracket(brackets.char()) {\n        bracket_count += 1\n      } else {\n        return false\n      }\n    } else {\n      if is_closing_bracket(brackets.char()) {\n        bracket_count -= 1\n      } else {\n        return false\n      }\n    }\n    open_bracket = !open_bracket\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc2kybe0q.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc2kybe0q.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpc2kybe0q.rs:16:10\n   |\n16 |       if is_opening_bracket(brackets.char()) {\n   |          ^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `open_bracket`\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpc2kybe0q.rs:22:10\n   |\n22 |       if is_closing_bracket(brackets.char()) {\n   |          ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpc2kybe0q.rs:16:38\n   |\n16 |       if is_opening_bracket(brackets.char()) {\n   |                                      ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpc2kybe0q.rs:22:38\n   |\n22 |       if is_closing_bracket(brackets.char()) {\n   |                                      ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0zhy5ymz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp0zhy5ymz.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack: List[String] = []\n  for c in brackets {\n    if c == \"<\" {\n      bracket_stack.push(c)\n    } else if c == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n  --> /tmp/tmp3zf0vf72.rs:12:26\n   |\n12 |   let bracket_stack: List[String] = []\n   |                          ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (_ == \"<\") {\n      bracket_count += 1\n    } else if (_ == \">\") {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjif8rltt.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjif8rltt.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjif8rltt.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjif8rltt.rs:16:8\n   |\n16 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (bracket_count == 0) {\n16 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjif8rltt.rs:18:15\n   |\n18 |     } else if (_ == \"<\") {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (_ == \"<\") {\n18 +     } else if _ == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjif8rltt.rs:20:15\n   |\n20 |     } else if (_ == \">\") {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (_ == \">\") {\n20 +     } else if _ == \">\" {\n   | \n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpjif8rltt.rs:17:25\n   |\n17 |       opening_bracket = _\n   |                         ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpjif8rltt.rs:18:16\n   |\n18 |     } else if (_ == \"<\") {\n   |                ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpjif8rltt.rs:20:16\n   |\n20 |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if brackets[last_bracket] != \"<\" {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdacpsry_.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdacpsry_.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpdacpsry_.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdacpsry_.rs:22:45\n   |\n22 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n23 |       if brackets[last_bracket] != \"<\" {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpdacpsry_.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpdacpsry_.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdacpsry_.rs:16:21\n   |\n16 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpdacpsry_.rs:22:40\n   |\n22 |       let last_bracket = bracket_stack.pop()\n   |                                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket != \"\" {\n        return false\n      }\n      closing_bracket = c\n    } else {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket == \"\" {\n        bracket_stack.push(c)\n      } else {\n        if c != closing_bracket {\n          return false\n        }\n        bracket_stack.pop()\n        if bracket_stack.empty() {\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        }\n      }\n    }\n  }\n  return opening_bracket == \"\"\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_d0aw2j4.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_d0aw2j4.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_d0aw2j4.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp_d0aw2j4.rs:36:28\n   |\n36 |         bracket_stack.pop()\n   |                            ^ help: add `;` here\n37 |         if bracket_stack.empty() {\n   |         -- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp_d0aw2j4.rs:38:31\n   |\n38 |           opening_bracket = \"\"\n   |                               ^ help: add `;` here\n39 |           closing_bracket = \"\"\n   |           --------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp_d0aw2j4.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_d0aw2j4.rs:31:23\n   |\n31 |         bracket_stack.push(c)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_d0aw2j4.rs:36:23\n   |\n36 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `empty` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_d0aw2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if brackets[last_bracket] != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppuu8tizv.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmppuu8tizv.rs:20:45\n   |\n20 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n21 |       if brackets[last_bracket] != \"<\" {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmppuu8tizv.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmppuu8tizv.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmppuu8tizv.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmppuu8tizv.rs:20:40\n   |\n20 |       let last_bracket = bracket_stack.pop()\n   |                                        ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for _ in brackets.chars() {\n    if (bracket_stack.is_empty()) {\n      opening_bracket_count += 1\n    } else {\n      if (bracket_stack.pop() == \"<\") {\n        opening_bracket_count -= 1\n      } else {\n        closing_bracket_count += 1\n      }\n    }\n\n    if (opening_bracket_count == 0 && closing_bracket_count == 0) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp81e6cxr1.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp81e6cxr1.rs:13:32\n   |\n13 |   let opening_bracket_count = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp81e6cxr1.rs:14:32\n   |\n14 |   let closing_bracket_count = 0\n   |                                ^ help: add `;` here\n15 | \n16 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp81e6cxr1.rs:17:8\n   |\n17 |     if (bracket_stack.is_empty()) {\n   |        ^                        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (bracket_stack.is_empty()) {\n17 +     if bracket_stack.is_empty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp81e6cxr1.rs:20:10\n   |\n20 |       if (bracket_stack.pop() == \"<\") {\n   |          ^                          ^\n   |\nhelp: remove these parentheses\n   |\n20 -       if (bracket_stack.pop() == \"<\") {\n20 +       if bracket_stack.pop() == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp81e6cxr1.rs:27:8\n   |\n27 |     if (opening_bracket_count == 0 && closing_bracket_count == 0) {\n   |        ^                                                        ^\n   |\nhelp: remove these parentheses\n   |\n27 -     if (opening_bracket_count == 0 && closing_bracket_count == 0) {\n27 +     if opening_bracket_count == 0 && closing_bracket_count == 0 {\n   | \n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp81e6cxr1.rs:20:25\n   |\n20 |       if (bracket_stack.pop() == \"<\") {\n   |                         ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 4 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0zhy5ymz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp0zhy5ymz.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0zhy5ymz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp0zhy5ymz.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if c == \">\" {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy95aydfg.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy95aydfg.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy95aydfg.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpy95aydfg.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \">\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpy95aydfg.rs:18:28\n   |\n18 |       closing_bracket = \">\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpy95aydfg.rs:21:28\n   |\n21 |       opening_bracket = \">\"\n   |                            ^ help: add `;` here\n22 |       closing_bracket = \"<\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpy95aydfg.rs:22:28\n   |\n22 |       closing_bracket = \"<\"\n   |                            ^ help: add `;` here\n23 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpy95aydfg.rs:26:29\n   |\n26 |   return bracket_count == 0 and opening_bracket == closing_bracket\n   |                             ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpy95aydfg.rs:15:12\n   |\n15 |   for c in brac",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpux_l66bz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.length == 0 {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] != \">\" {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.length == 0 {\n        return false\n      } else {\n        bracket_stack.push(i)\n      }\n    }\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpinft6hcq.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpinft6hcq.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpinft6hcq.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tmp/tmpinft6hcq.rs:15:24\n   |\n15 |       if bracket_stack.length == 0 {\n   |                        ^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpinft6hcq.rs:16:23\n   |\n16 |         bracket_stack.push(i)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the type `String` cannot be indexed by `Option<&_>`\n  --> /tmp/tmpinft6hcq.rs:18:12\n   |\n18 |         if brackets[bracket_stack.last()] != \">\" {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `Option<&_>`\n   |\n   = help: the trait `Index<Option<&_>>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpinft6hcq.rs:21:23\n   |\n21 |         bracket_stack.pop()\n   |    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpmoe9z8yo.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpmoe9z8yo.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpmoe9z8yo.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpmoe9z8yo.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpmoe9z8yo.rs:19:31\n   |\n19 |       } else if bracket_stack.pop() != i - 1 {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = _\n    } else if _ == \">\" {\n      if opening_bracket == \"<\" {\n        opening_bracket = \"\"\n      } else {\n        bracket_count -= 1\n      }\n    } else if _ == \"<\" {\n      if opening_bracket == \">\" {\n        opening_bracket = \"\"\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpo8zijxx8.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpo8zijxx8.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpo8zijxx8.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpo8zijxx8.rs:17:25\n   |\n17 |       opening_bracket = _\n   |                         ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpo8zijxx8.rs:18:15\n   |\n18 |     } else if _ == \">\" {\n   |               ^ `_` not allowed here\n\nerror: in expressions, `_` can only be used on the left-hand side of an assignment\n  --> /tmp/tmpo8zijxx8.rs:24:15\n   |\n24 |     } else if _ == \"<\" {\n   |               ^ `_` not allowed here\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if is_open_bracket(brackets.char()) {\n        bracket_count += 1\n      } else {\n        return false\n      }\n    } else {\n      if is_close_bracket(brackets.char()) {\n        bracket_count -= 1\n      } else {\n        return false\n      }\n    }\n    open_bracket = !open_bracket\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0fxt2_o2.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0fxt2_o2.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_open_bracket` in this scope\n  --> /tmp/tmp0fxt2_o2.rs:16:10\n   |\n16 |       if is_open_bracket(brackets.char()) {\n   |          ^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `open_bracket`\n\nerror[E0425]: cannot find function `is_close_bracket` in this scope\n  --> /tmp/tmp0fxt2_o2.rs:22:10\n   |\n22 |       if is_close_bracket(brackets.char()) {\n   |          ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmp0fxt2_o2.rs:16:35\n   |\n16 |       if is_open_bracket(brackets.char()) {\n   |                                   ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmp0fxt2_o2.rs:22:36\n   |\n22 |       if is_close_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack: List[String] = []\n  let opening_bracket: String\n  for _ in brackets.split(\"\") {\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n    } else {\n      opening_bracket = bracket_stack.pop()\n    }\n    if (opening_bracket == \"<\") {\n      bracket_stack.push(\"<\")\n    } else if (opening_bracket == \">\") {\n      if (bracket_stack.is_empty()) {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n  --> /tmp/tmpzxddzj72.rs:12:26\n   |\n12 |   let bracket_stack: List[String] = []\n   |                          ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0zhy5ymz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp0zhy5ymz.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n      bracket_count += 1\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpang2oy5l.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpang2oy5l.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 | \n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpang2oy5l.rs:16:30\n   |\n16 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n17 |     if bracket == \"<\" {\n   |     -- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpang2oy5l.rs:18:34\n   |\n18 |       bracket_stack.push(bracket)\n   |                                  ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpang2oy5l.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpang2oy5l.rs:15:30\n   |\n15 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpang2oy5l.rs:18:21\n   |\n18 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpang2oy5l.rs:23:31\n   |\n23 |       } else if bracket_stack.pop() != \"<\" {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (open_brackets == 0) {\n        open_brackets += 1\n      } else {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (open_brackets == 0) {\n        open_brackets += 1\n      } else {\n        open_brackets -= 1\n      }\n    } else if (bracket_count == 2) {\n      if (open_brackets == 0) {\n        open_brackets += 1\n      } else {\n        open_brackets -= 1\n      }\n    }\n    bracket_count -= 1\n  }\n  return open_brackets == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprtjbxz5s.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprtjbxz5s.rs:13:24\n   |\n13 |   let open_brackets = 0\n   |                        ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprtjbxz5s.rs:15:8\n   |\n15 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (bracket_count == 0) {\n15 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprtjbxz5s.rs:16:10\n   |\n16 |       if (open_brackets == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n16 -       if (open_brackets == 0) {\n16 +       if open_brackets == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprtjbxz5s.rs:21:15\n   |\n21 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n21 -     } else if (bracket_count == 1) {\n21 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprtjbxz5s.rs:22:10\n   |\n22 |       if (open_brackets == 0) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n22 -       if (open_brackets == 0) {\n22 +       if open_brackets == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprtjbxz5s.rs:27:15\n   |\n27 |     } else if (bracket_count == 2) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n27 -     } else if (bracket_count == 2) {\n27 +     } else if bracket_count == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprtjbxz5s.rs:28:10\n   |\n28 |       if (open_b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let bracket_open = false\n  for c in brackets {\n    if c == \"<\" {\n      if bracket_open {\n        bracket_stack.push(c)\n        bracket_count += 1\n      } else {\n        bracket_open = true\n      }\n    } else if c == \">\" {\n      if bracket_open {\n        if bracket_stack.pop() != \"<\" {\n          return false\n        }\n        bracket_count -= 1\n      } else {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmponn7icph.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmponn7icph.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   let bracket_open = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmponn7icph.rs:14:27\n   |\n14 |   let bracket_open = false\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmponn7icph.rs:18:30\n   |\n18 |         bracket_stack.push(c)\n   |                              ^ help: add `;` here\n19 |         bracket_count += 1\n   |         ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmponn7icph.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmponn7icph.rs:18:23\n   |\n18 |         bracket_stack.push(c)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmponn7icph.rs:25:26\n   |\n25 |         if bracket_stack.pop() != \"<\" {\n   |                          ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if opening_bracket != closing_bracket {\n        return false\n      }\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmptlqhr4xm.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptlqhr4xm.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptlqhr4xm.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmptlqhr4xm.rs:17:26\n   |\n17 |       opening_bracket = c\n   |                          ^ help: add `;` here\n18 |       closing_bracket = \">\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmptlqhr4xm.rs:18:28\n   |\n18 |       closing_bracket = \">\"\n   |                            ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmptlqhr4xm.rs:27:27\n   |\n27 |       opening_bracket = \"\"\n   |                           ^ help: add `;` here\n28 |       closing_bracket = \"\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmptlqhr4xm.rs:28:27\n   |\n28 |       closing_bracket = \"\"\n   |                           ^ help: add `;` here\n29 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmptlqhr4xm.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 8 previous errors\n\nFor more information about th",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"<\" {\n      if bracket_stack.length > 0 {\n        opening_bracket = brackets[opening_bracket_index]\n        opening_bracket_index += 1\n      }\n      bracket_stack.push(c)\n      bracket_count += 1\n    } else if c == \">\" {\n      if bracket_stack.length > 0 {\n        closing_bracket = brackets[closing_bracket_index]\n        closing_bracket_index += 1\n      }\n      if bracket_stack.length == 0 {\n        return false\n      }\n      if opening_bracket != closing_bracket {\n        return false\n      }\n      bracket_stack.pop()\n      bracket_count -= 1\n    }\n  }\n  if bracket_stack.length > 0 {\n    return false\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7up9542s.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7up9542s.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7up9542s.rs:14:27\n   |\n14 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7up9542s.rs:15:27\n   |\n15 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n16 |   let opening_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7up9542s.rs:16:32\n   |\n16 |   let opening_bracket_index = 0\n   |                                ^ help: add `;` here\n17 |   let closing_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7up9542s.rs:17:32\n   |\n17 |   let closing_bracket_index = 0\n   |                                ^ help: add `;` here\n18 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp7up9542s.rs:19:24\n   |\n19 |     let c = brackets[i]\n   |                        ^ help: add `;` here\n20 |     if c == \"<\" {\n   |     -- unexpected token\n\nerror: expected `;`, found `opening_bracket_index`\n  --> /tmp/tmp7up9542s.rs:22:58\n   |\n22 |         opening_bracket = brackets[opening_bracket_index]\n   |                                                          ^ help: add `;` here\n23 |         opening_bracket_index += 1\n   |         --------------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp7up9542s.rs:25:28\n   |\n25 |       bracket_stack.push(c)\n   |                           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      closing_bracket = c\n    } else {\n      if opening_bracket != \"\" && closing_bracket != \"\" {\n        if opening_bracket != closing_bracket {\n          return false\n        }\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      }\n    }\n    if opening_bracket == \"\" {\n      bracket_stack.push(c)\n    } else {\n      if c != bracket_stack.pop() {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpasohznra.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpasohznra.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpasohznra.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmpasohznra.rs:25:29\n   |\n25 |         opening_bracket = \"\"\n   |                             ^ help: add `;` here\n26 |         closing_bracket = \"\"\n   |         --------------- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpasohznra.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpasohznra.rs:30:21\n   |\n30 |       bracket_stack.push(c)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpasohznra.rs:32:29\n   |\n32 |       if c != bracket_stack.pop() {\n   |                             ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      bracket_count -= 1\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n    if (bracket_count == 0) {\n      bracket_stack.pop()\n    } else {\n      bracket_stack.push(brackets[i])\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcj62xth2.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcj62xth2.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcj62xth2.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcj62xth2.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcj62xth2.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcj62xth2.rs:20:8\n   |\n20 |     if (bracket_count < 0) {\n   |        ^                 ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (bracket_count < 0) {\n20 +     if bracket_count < 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcj62xth2.rs:23:8\n   |\n23 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -     if (bracket_count == 0) {\n23 +     if bracket_count == 0 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpcj62xth2.rs:14:30\n   |\n14 |   for i in range(0, brackets",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] != \">\" {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpn3u5sr7p.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpn3u5sr7p.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:16:23\n   |\n16 |         bracket_stack.push(i)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the type `String` cannot be indexed by `Option<&_>`\n  --> /tmp/tmpn3u5sr7p.rs:18:12\n   |\n18 |         if brackets[bracket_stack.last()] != \">\" {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `Option<&_>`\n   |\n   = help: the trait `Index<Option<&_>>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:21:23\n   |\n21 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:27:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      open_brackets.push(i)\n      bracket_count += 1\n    } else if brackets[i] == \">\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        open_brackets.pop()\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpifpdh9l7.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpifpdh9l7.rs:13:25\n   |\n13 |   let open_brackets = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpifpdh9l7.rs:16:28\n   |\n16 |       open_brackets.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpifpdh9l7.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpifpdh9l7.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpifpdh9l7.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpifpdh9l7.rs:16:21\n   |\n16 |       open_brackets.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpifpdh9l7.rs:24:23\n   |\n24 |         open_brackets.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets {\n    if opening_bracket == \"\" {\n      opening_bracket = String.from(brackets[0])\n    } else if closing_bracket == \"\" {\n      closing_bracket = String.from(brackets[0])\n    } else if opening_bracket == closing_bracket {\n      bracket_count += 1\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    } else {\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8a8jukvk.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp8a8jukvk.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp8a8jukvk.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for _ in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket`\n  --> /tmp/tmp8a8jukvk.rs:21:25\n   |\n21 |       bracket_count += 1\n   |                         ^ help: add `;` here\n22 |       opening_bracket = \"\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp8a8jukvk.rs:22:27\n   |\n22 |       opening_bracket = \"\"\n   |                           ^ help: add `;` here\n23 |       closing_bracket = \"\"\n   |       --------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp8a8jukvk.rs:25:27\n   |\n25 |       opening_bracket = \"\"\n   |                           ^ help: add `;` here\n26 |       closing_bracket = \"\"\n   |       --------------- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp8a8jukvk.rs:17:25\n   |\n17 |       opening_bracket = String.from(brackets[0])\n   |                         ^^^^^^-----\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp8a8jukvk.rs:19:25\n   |\n19 |       closing_bracket = String.from(brackets[0])\n   |                         ^^^^^^-----\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::from`\n\nerror[E0277]: `String` is not an iterator\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets.charAt(0) != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets.charAt(0) != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp4xpz9sqz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4xpz9sqz.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4xpz9sqz.rs:15:10\n   |\n15 |       if (brackets.charAt(0) != '<') {\n   |          ^                         ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets.charAt(0) != '<') {\n15 +       if brackets.charAt(0) != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4xpz9sqz.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4xpz9sqz.rs:19:10\n   |\n19 |       if (brackets.charAt(0) != '>') {\n   |          ^                         ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets.charAt(0) != '>') {\n19 +       if brackets.charAt(0) != '>' {\n   | \n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmp4xpz9sqz.rs:15:20\n   |\n15 |       if (brackets.charAt(0) != '<') {\n   |                    ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `charAt` found for struct `String` in the current scope\n  --> /tmp/tmp4xpz9sqz.rs:19:20\n   |\n19 |       if (brackets.charAt(0) != '>') {\n   |                    ^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 3 previous errors; 4",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp55fzux5s.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp55fzux5s.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:16:18\n   |\n16 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:18:25\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:18:15\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \">\") {\n18 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] == \">\" {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpqdmn6k4p.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpqdmn6k4p.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpqdmn6k4p.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpqdmn6k4p.rs:16:23\n   |\n16 |         bracket_stack.push(i)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the type `String` cannot be indexed by `Option<&_>`\n  --> /tmp/tmpqdmn6k4p.rs:18:12\n   |\n18 |         if brackets[bracket_stack.last()] == \">\" {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `Option<&_>`\n   |\n   = help: the trait `Index<Option<&_>>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpqdmn6k4p.rs:19:25\n   |\n19 |           bracket_stack.pop()\n   |                         ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpqdmn6k4p.rs",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0zhy5ymz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0zhy5ymz.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp0zhy5ymz.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp1qf8ic48.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1qf8ic48.rs:14:30\n   |\n14 |     let bracket = brackets[i]\n   |                              ^ help: add `;` here\n15 |     if bracket == \"<\" {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1qf8ic48.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:16:21\n   |\n16 |       bracket_stack.push(bracket)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1qf8ic48.rs:20:31\n   |\n20 |       } else if bracket_stack.pop() != \"<\" {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let open_bracket_index = bracket_stack.pop()\n      if brackets[open_bracket_index] != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpm086lmh9.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpm086lmh9.rs:20:51\n   |\n20 |       let open_bracket_index = bracket_stack.pop()\n   |                                                   ^ help: add `;` here\n21 |       if brackets[open_bracket_index] != \"<\" {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpm086lmh9.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpm086lmh9.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpm086lmh9.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpm086lmh9.rs:20:46\n   |\n20 |       let open_bracket_index = bracket_stack.pop()\n   |                                              ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if open_bracket {\n        bracket_count -= 1\n      }\n      open_bracket = false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgdqq4kdl.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgdqq4kdl.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpgdqq4kdl.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      if brackets[bracket_stack.last()] != \"<\" {\n        return false\n      }\n      bracket_stack.pop()\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpgoai4qyg.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpgoai4qyg.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpgoai4qyg.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpgoai4qyg.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the type `String` cannot be indexed by `Option<&_>`\n  --> /tmp/tmpgoai4qyg.rs:20:10\n   |\n20 |       if brackets[bracket_stack.last()] != \"<\" {\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `Option<&_>`\n   |\n   = help: the trait `Index<Option<&_>>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpgoai4qyg.rs:23:21\n   |\n23 |       bracket_stack.pop()\n   |                     ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  let bracket_stack_index = 0\n  let bracket_stack_top = 0\n  let bracket_stack_top_index = 0\n  let bracket_stack_top_index_end = 0\n  let bracket_stack_top_index_start = 0\n  let bracket_stack_top_index_start_end = 0\n  let bracket_stack_top_index_start_start = 0\n  let bracket_stack_top_index_start_start_end = 0\n  let bracket_stack_top_index_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_start_start_start = 0\n  let bracket_\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc9qa3p1q.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc9qa3p1q.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   let bracket_stack_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc9qa3p1q.rs:14:30\n   |\n14 |   let bracket_stack_index = 0\n   |                              ^ help: add `;` here\n15 |   let bracket_stack_top = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc9qa3p1q.rs:15:28\n   |\n15 |   let bracket_stack_top = 0\n   |                            ^ help: add `;` here\n16 |   let bracket_stack_top_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc9qa3p1q.rs:16:34\n   |\n16 |   let bracket_stack_top_index = 0\n   |                                  ^ help: add `;` here\n17 |   let bracket_stack_top_index_end = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc9qa3p1q.rs:17:38\n   |\n17 |   let bracket_stack_top_index_end = 0\n   |                                      ^ help: add `;` here\n18 |   let bracket_stack_top_index_start = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc9qa3p1q.rs:18:40\n   |\n18 |   let bracket_stack_top_index_start = 0\n   |                                        ^ help: add `;` here\n19 |   let bracket_stack_top_index_start_end = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc9qa3p1q.rs:19:44\n   |\n19 |   let bracket_stack_top_index_start_end = 0\n   |                                            ^ help: add `;` here\n20 |   let bracket_stack_top_index_start_start = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpc9qa3p1q.rs:20:46\n   |\n20 |   let bracket_stac",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    } else {\n      if bracket_count == 0 {\n        open_bracket = true\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpr7y_p3di.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpr7y_p3di.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.append(Char(brackets.char_at(0)))\n    } else if bracket_stack.last() == Char('<') {\n      if brackets.char_at(0) == '>' {\n        bracket_stack.pop()\n      } else {\n        return false\n      }\n    } else {\n      bracket_stack.append(Char(brackets.char_at(0)))\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmptkcetio8.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Char` in this scope\n  --> /tmp/tmptkcetio8.rs:15:28\n   |\n15 |       bracket_stack.append(Char(brackets.char_at(0)))\n   |                            ^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Char` in this scope\n  --> /tmp/tmptkcetio8.rs:16:39\n   |\n16 |     } else if bracket_stack.last() == Char('<') {\n   |                                       ^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Char` in this scope\n  --> /tmp/tmptkcetio8.rs:23:28\n   |\n23 |       bracket_stack.append(Char(brackets.char_at(0)))\n   |                            ^^^^ not found in this scope\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptkcetio8.rs:15:21\n   |\n15 |       bracket_stack.append(Char(brackets.char_at(0)))\n   |                     ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `char_at` found for struct `String` in the current scope\n  --> /tmp/tmptkcetio8.rs:15:42\n   |\n15 |       bracket_stack.append(Char(brackets.char_at(0)))\n   |                                          ^^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char_at` found for struct `String` in the current scope\n  --> /tmp/tmptkcetio8.rs:17:19\n   |\n17 |       if brackets.char_at(0) == '>' {\n   |                   ^^^^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptkcetio8.rs:18:23\n   |\n18 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for array `[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if !open_bracket {\n        return false\n      }\n      open_bracket = false\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvo6rh3ce.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvo6rh3ce.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpvo6rh3ce.rs:24:27\n   |\n24 |       open_bracket = false\n   |                           ^ help: add `;` here\n25 |       if bracket_count == 0 {\n   |       -- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpvo6rh3ce.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_index = bracket_stack.pop()\n      if brackets[last_index] != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp3lxbshi8.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp3lxbshi8.rs:20:43\n   |\n20 |       let last_index = bracket_stack.pop()\n   |                                           ^ help: add `;` here\n21 |       if brackets[last_index] != \"<\" {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp3lxbshi8.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp3lxbshi8.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3lxbshi8.rs:15:21\n   |\n15 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp3lxbshi8.rs:20:38\n   |\n20 |       let last_index = bracket_stack.pop()\n   |                                      ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpwsmke9j4.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpwsmke9j4.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpwsmke9j4.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpwsmke9j4.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpwsmke9j4.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \">\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != i) {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp1lg5sg5h.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1lg5sg5h.rs:13:25\n   |\n13 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_stack`\n  --> /tmp/tmp1lg5sg5h.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       bracket_stack.push(i)\n   |       ------------- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp1lg5sg5h.rs:22:25\n   |\n22 |       bracket_count -= 1\n   |                         ^ help: add `;` here\n23 |       let last_bracket = bracket_stack.pop()\n   |       --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1lg5sg5h.rs:23:45\n   |\n23 |       let last_bracket = bracket_stack.pop()\n   |                                             ^ help: add `;` here\n24 |       if (last_bracket != i) {\n   |       -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp1lg5sg5h.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp1lg5sg5h.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp1lg5sg5h.rs:18:15\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \">\") {\n18 +   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] != \">\" {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpn3u5sr7p.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpn3u5sr7p.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:16:23\n   |\n16 |         bracket_stack.push(i)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the type `String` cannot be indexed by `Option<&_>`\n  --> /tmp/tmpn3u5sr7p.rs:18:12\n   |\n18 |         if brackets[bracket_stack.last()] != \">\" {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `Option<&_>`\n   |\n   = help: the trait `Index<Option<&_>>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:21:23\n   |\n21 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:27:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.append(Char(ord(c)))\n    } else if bracket_stack.last() == Char(ord(\"<\")) {\n      if ord(c) == ord(\">\") {\n        bracket_stack.pop()\n      } else {\n        return false\n      }\n    } else if bracket_stack.last() == Char(ord(\">\")) {\n      if ord(c) == ord(\"<\") {\n        bracket_stack.pop()\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmptvsji8ln.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Char` in this scope\n  --> /tmp/tmptvsji8ln.rs:15:28\n   |\n15 |       bracket_stack.append(Char(ord(c)))\n   |                            ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `ord` in this scope\n  --> /tmp/tmptvsji8ln.rs:15:33\n   |\n15 |       bracket_stack.append(Char(ord(c)))\n   |                                 ^^^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmptvsji8ln.rs:15:37\n   |\n15 |       bracket_stack.append(Char(ord(c)))\n   |                                     ^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Char` in this scope\n  --> /tmp/tmptvsji8ln.rs:16:39\n   |\n16 |     } else if bracket_stack.last() == Char(ord(\"<\")) {\n   |                                       ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `ord` in this scope\n  --> /tmp/tmptvsji8ln.rs:16:44\n   |\n16 |     } else if bracket_stack.last() == Char(ord(\"<\")) {\n   |                                            ^^^ not found in this scope\n\nerror[E0425]: cannot find function `ord` in this scope\n  --> /tmp/tmptvsji8ln.rs:17:10\n   |\n17 |       if ord(c) == ord(\">\") {\n   |          ^^^ not found in this scope\n\nerror[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmptvsji8ln.rs:17:14\n   |\n17 |       if ord(c) == ord(\">\") {\n   |              ^ not found in this scope\n\nerror[E0425]: cannot find function `ord` in this scope\n  --> /tmp/tmptvsji8ln.rs:17:20\n   |\n17 |       if ord(c) == ord(\">\") {\n   |                    ^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Char` in this scope\n  --> /tmp/tmptvsji8ln.rs:22:39\n   |\n22 |     } else if bracket_stack.last() == Char(ord(\">\")) {\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket_index = 0\n  let open_bracket_count = 0\n  let close_bracket_index = 0\n  let close_bracket_count = 0\n\n  for i in range(0, brackets.length) {\n    if (brackets[i] == \"<\") {\n      open_bracket_count += 1\n      open_bracket_index = i\n    } else if (brackets[i] == \">\") {\n      close_bracket_count += 1\n      close_bracket_index = i\n    }\n  }\n\n  if (open_bracket_count != close_bracket_count) {\n    return false\n  }\n\n  for i in range(0, brackets.length) {\n    if (brackets[i] == \"<\") {\n      if (i == open_bracket_index) {\n        bracket_count += 1\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3iyepk42.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3iyepk42.rs:13:29\n   |\n13 |   let open_bracket_index = 0\n   |                             ^ help: add `;` here\n14 |   let open_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3iyepk42.rs:14:29\n   |\n14 |   let open_bracket_count = 0\n   |                             ^ help: add `;` here\n15 |   let close_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3iyepk42.rs:15:30\n   |\n15 |   let close_bracket_index = 0\n   |                              ^ help: add `;` here\n16 |   let close_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp3iyepk42.rs:16:30\n   |\n16 |   let close_bracket_count = 0\n   |                              ^ help: add `;` here\n17 | \n18 |   for i in range(0, brackets.length) {\n   |   --- unexpected token\n\nerror: expected `;`, found `open_bracket_index`\n  --> /tmp/tmp3iyepk42.rs:20:30\n   |\n20 |       open_bracket_count += 1\n   |                              ^ help: add `;` here\n21 |       open_bracket_index = i\n   |       ------------------ unexpected token\n\nerror: expected `;`, found `close_bracket_index`\n  --> /tmp/tmp3iyepk42.rs:23:31\n   |\n23 |       close_bracket_count += 1\n   |                               ^ help: add `;` here\n24 |       close_bracket_index = i\n   |       ------------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp3iyepk42.rs:18:12\n   |\n18 |   for i in range(0, brackets.length) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp3iyepk42.rs:32:12\n   |\n32 |   for ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpux_l66bz.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `is_opening_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:14:8\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |        ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_closing_bracket` in this scope\n  --> /tmp/tmpux_l66bz.rs:16:15\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |               ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:14:36\n   |\n14 |     if is_opening_bracket(brackets.char()) {\n   |                                    ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror[E0599]: no method named `char` found for struct `String` in the current scope\n  --> /tmp/tmpux_l66bz.rs:16:43\n   |\n16 |     } else if is_closing_bracket(brackets.char()) {\n   |                                           ^^^^ help: there is an associated function with a similar name: `chars`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      if (brackets[0] == '<') {\n        bracket_stack.append(\">\")\n      } else {\n        bracket_stack.append(\"<\")\n      }\n    } else {\n      if (brackets[0] == '<') {\n        if (bracket_stack[0] != '>') {\n          return false\n        }\n        bracket_stack.pop()\n      } else {\n        if (bracket_stack[0] != '<') {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmprkeg_qlr.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprkeg_qlr.rs:15:10\n   |\n15 |       if (brackets[0] == '<') {\n   |          ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] == '<') {\n15 +       if brackets[0] == '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprkeg_qlr.rs:21:10\n   |\n21 |       if (brackets[0] == '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n21 -       if (brackets[0] == '<') {\n21 +       if brackets[0] == '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprkeg_qlr.rs:22:12\n   |\n22 |         if (bracket_stack[0] != '>') {\n   |            ^                       ^\n   |\nhelp: remove these parentheses\n   |\n22 -         if (bracket_stack[0] != '>') {\n22 +         if bracket_stack[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprkeg_qlr.rs:27:12\n   |\n27 |         if (bracket_stack[0] != '<') {\n   |            ^                       ^\n   |\nhelp: remove these parentheses\n   |\n27 -         if (bracket_stack[0] != '<') {\n27 +         if bracket_stack[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmprkeg_qlr.rs:15:11\n   |\n15 |       if (brackets[0] == '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for (i, c) in brackets.chars() {\n    if (c == \"<\") {\n      opening_bracket_index = i\n      bracket_count += 1\n    } else if (c == \">\") {\n      closing_bracket_index = i\n      bracket_count -= 1\n    }\n  }\n\n  return bracket_count == 0 and opening_bracket_index < closing_bracket_index\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzlj8i2zj.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzlj8i2zj.rs:13:32\n   |\n13 |   let opening_bracket_index = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzlj8i2zj.rs:14:32\n   |\n14 |   let closing_bracket_index = 0\n   |                                ^ help: add `;` here\n15 | \n16 |   for (i, c) in brackets.chars() {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpzlj8i2zj.rs:18:32\n   |\n18 |       opening_bracket_index = i\n   |                                ^ help: add `;` here\n19 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmpzlj8i2zj.rs:21:32\n   |\n21 |       closing_bracket_index = i\n   |                                ^ help: add `;` here\n22 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror: `and` is not a logical operator\n  --> /tmp/tmpzlj8i2zj.rs:26:29\n   |\n26 |   return bracket_count == 0 and opening_bracket_index < closing_bracket_index\n   |                             ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzlj8i2zj.rs:17:8\n   |\n17 |     if (c == \"<\") {\n   |        ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (c == \"<\") {\n17 +     if c == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzlj8i2zj.rs:20:15\n   |\n20 |     } else if (c == \">\") {\n   |               ^        ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (c == \">\") {",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in brackets.chars() {\n    if i == \"<\" {\n      opening_bracket = i\n    } else if i == \">\" {\n      closing_bracket = i\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n        } else {\n          bracket_stack.push(opening_bracket)\n        }\n      }\n    }\n  }\n  if bracket_stack.length == 0 {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_ws3pco0.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_ws3pco0.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_ws3pco0.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for i in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_ws3pco0.rs:16:13\n   |\n16 |     if i == \"<\" {\n   |             ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to write a `char` literal, use single quotes\n   |\n16 |     if i == '<' {\n   |             ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_ws3pco0.rs:17:25\n   |\n13 |   let opening_bracket = \"\"\n   |                         -- expected due to this value\n...\n17 |       opening_bracket = i\n   |                         ^ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_ws3pco0.rs:18:20\n   |\n18 |     } else if i == \">\" {\n   |                    ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to write a `char` literal, use single quotes\n   |\n18 |     } else if i == '>' {\n   |                    ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_ws3pco0.rs:19:25\n   |\n14 |   let closing_bracket = \"\"\n   |                         -- expected due to this value\n...\n19 |       closing_bracket = i\n   |                         ^ expected `&str`, found `char`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_ws3pco0.rs:27:25\n   |\n27 |           bracket_stack.push(opening_bracket)\n   |                         ^^^^ method not found in `[_; 0]`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tmp/tmp_ws3pco0.rs:32:20\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      if opening_bracket == \"\" {\n        opening_bracket = c\n      } else {\n        opening_bracket += c\n      }\n    } else if c == \">\" {\n      if closing_bracket == \"\" {\n        closing_bracket = c\n      } else {\n        closing_bracket += c\n      }\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket == \"\" {\n          closing_bracket = c\n        } else {\n          closing_bracket += c\n        }\n      }\n    }\n    if opening_bracket != \"\" && closing_bracket != \"\" {\n      bracket_count += 1\n    }\n  }\n  return bracket_count == 0 || bracket_count == brackets.count(\">\")\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp959zksq2.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp959zksq2.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp959zksq2.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for c in brackets {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp959zksq2.rs:15:12\n   |\n15 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp959zksq2.rs:20:9\n   |\n20 |         opening_bracket += c\n   |         ---------------^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp959zksq2.rs:26:9\n   |\n26 |         closing_bracket += c\n   |         ---------------^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp959zksq2.rs:33:11\n   |\n33 |           closing_bracket += c\n   |           ---------------^^^^^\n   |           |\n   |           cannot use `+=` on type `&str`\n\nerror[E0599]: `String` is not an iterator\n   --> /tmp/tmp959zksq2.rs:41:58\n    |\n41  |     return bracket_count == 0 || bracket_count == brackets.count(\">\")\n    |                                                            ^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp55fzux5s.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp55fzux5s.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 | \n15 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:16:18\n   |\n16 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp55fzux5s.rs:18:25\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp55fzux5s.rs:18:15\n   |\n18 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (brackets[i] == \">\") {\n18 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_brackets = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_count += 1\n      open_brackets.append(i)\n    } else if brackets[i] == \">\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  if bracket_count != 0 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwb4ylupv.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_brackets = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwb4ylupv.rs:13:25\n   |\n13 |   let open_brackets = []\n   |                         ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `open_brackets`\n  --> /tmp/tmpwb4ylupv.rs:16:25\n   |\n16 |       bracket_count += 1\n   |                         ^ help: add `;` here\n17 |       open_brackets.append(i)\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpwb4ylupv.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpwb4ylupv.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpwb4ylupv.rs:17:21\n   |\n17 |       open_brackets.append(i)\n   |                     ^^^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for i in range(0, brackets.length) {\n    if (brackets[i] == \"<\") {\n      opening_bracket_index = i\n      opening_bracket = brackets[i]\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      closing_bracket_index = i\n      closing_bracket = brackets[i]\n      bracket_count -= 1\n    }\n  }\n\n  if (bracket_count != 0) {\n    return false\n  }\n\n  if (opening_bracket_index == 0 || closing_bracket_index == 0) {\n    return false\n  }\n\n  if (opening_bracket_index > closing_bracket_index) {\n    return false\n  }\n\n  if (opening_bracket != closing_bracket) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6o7e06ze.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6o7e06ze.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6o7e06ze.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   let opening_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6o7e06ze.rs:15:32\n   |\n15 |   let opening_bracket_index = 0\n   |                                ^ help: add `;` here\n16 |   let closing_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp6o7e06ze.rs:16:32\n   |\n16 |   let closing_bracket_index = 0\n   |                                ^ help: add `;` here\n17 | \n18 |   for i in range(0, brackets.length) {\n   |   --- unexpected token\n\nerror: expected `;`, found `opening_bracket`\n  --> /tmp/tmp6o7e06ze.rs:20:32\n   |\n20 |       opening_bracket_index = i\n   |                                ^ help: add `;` here\n21 |       opening_bracket = brackets[i]\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp6o7e06ze.rs:21:36\n   |\n21 |       opening_bracket = brackets[i]\n   |                                    ^ help: add `;` here\n22 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp6o7e06ze.rs:24:32\n   |\n24 |       closing_bracket_index = i\n   |                                ^ help: add `;` here\n25 |       closing_bracket = brackets[i]\n   |       --------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp6o7e06ze.rs:25:36\n   |\n25 |       closing_bracket = bra",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpd9222jsc.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpd9222jsc.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpd9222jsc.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpd9222jsc.rs:16:23\n   |\n16 |         bracket_stack.push(i)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpd9222jsc.rs:19:25\n   |\n19 |           bracket_stack.pop()\n   |                         ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpd9222jsc.rs:29:25\n   |\n29 |           bracket_stack.pop()\n   |                         ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket_count = 0\n  let close_bracket_count = 0\n  let open_bracket_stack = []\n  let close_bracket_stack = []\n  for _ in brackets.split(\"\") {\n    if (open_bracket_count > 0) {\n      if (open_bracket_stack.length == 0) {\n        return false\n      }\n      if (open_bracket_stack.pop() != \"<\") {\n        return false\n      }\n      open_bracket_count -= 1\n    }\n    if (close_bracket_count > 0) {\n      if (close_bracket_stack.length == 0) {\n        return false\n      }\n      if (close_bracket_stack.pop() != \">\") {\n        return false\n      }\n      close_bracket_count -= 1\n    }\n    if (bracket_count > 0) {\n      if (open_bracket_count == 0) {\n        open_bracket_stack.push(\"<\")\n      }\n      if (close_bracket_count == 0) {\n        close_bracket_stack.push(\">\")\n      }\n      bracket_count += 1\n    }\n  }\n  return open_bracket_count == 0 && close_bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpu94r9t2v.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu94r9t2v.rs:13:29\n   |\n13 |   let open_bracket_count = 0\n   |                             ^ help: add `;` here\n14 |   let close_bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu94r9t2v.rs:14:30\n   |\n14 |   let close_bracket_count = 0\n   |                              ^ help: add `;` here\n15 |   let open_bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu94r9t2v.rs:15:30\n   |\n15 |   let open_bracket_stack = []\n   |                              ^ help: add `;` here\n16 |   let close_bracket_stack = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpu94r9t2v.rs:16:31\n   |\n16 |   let close_bracket_stack = []\n   |                               ^ help: add `;` here\n17 |   for _ in brackets.split(\"\") {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpu94r9t2v.rs:18:8\n   |\n18 |     if (open_bracket_count > 0) {\n   |        ^                      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (open_bracket_count > 0) {\n18 +     if open_bracket_count > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpu94r9t2v.rs:19:10\n   |\n19 |       if (open_bracket_stack.length == 0) {\n   |          ^                              ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (open_bracket_stack.length == 0) {\n19 +       if open_bracket_stack.length == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpu94r9t2v.rs:22:10\n   |\n22 |       if (open_bracket_stack.pop() != \"<\") {\n   |          ^                               ^\n   |\nhelp: remove these parentheses",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    } else {\n      if bracket_count == 0 {\n        open_bracket = true\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpr7y_p3di.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpr7y_p3di.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"<\" {\n      bracket_stack.push(c)\n    } else if c == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpd96m1s2d.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpd96m1s2d.rs:14:24\n   |\n14 |     let c = brackets[i]\n   |                        ^ help: add `;` here\n15 |     if c == \"<\" {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpd96m1s2d.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpd96m1s2d.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpd96m1s2d.rs:16:21\n   |\n16 |       bracket_stack.push(c)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpd96m1s2d.rs:20:31\n   |\n20 |       } else if bracket_stack.pop() != \"<\" {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      opening_bracket_index = i\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      closing_bracket_index = i\n      bracket_count -= 1\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n  }\n  if (bracket_count != 0) {\n    return false\n  }\n  return opening_bracket_index == closing_bracket_index\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7beum6kq.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let opening_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7beum6kq.rs:13:32\n   |\n13 |   let opening_bracket_index = 0\n   |                                ^ help: add `;` here\n14 |   let closing_bracket_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7beum6kq.rs:14:32\n   |\n14 |   let closing_bracket_index = 0\n   |                                ^ help: add `;` here\n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp7beum6kq.rs:17:32\n   |\n17 |       opening_bracket_index = i\n   |                                ^ help: add `;` here\n18 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmp7beum6kq.rs:20:32\n   |\n20 |       closing_bracket_index = i\n   |                                ^ help: add `;` here\n21 |       bracket_count -= 1\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp7beum6kq.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7beum6kq.rs:16:8\n   |\n16 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (brackets[i] == \"<\") {\n16 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7beum6kq.rs:19:15\n   |\n19 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -     } else if (brackets[i] == \">\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] != \">\" {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpn3u5sr7p.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpn3u5sr7p.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:16:23\n   |\n16 |         bracket_stack.push(i)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the type `String` cannot be indexed by `Option<&_>`\n  --> /tmp/tmpn3u5sr7p.rs:18:12\n   |\n18 |         if brackets[bracket_stack.last()] != \">\" {\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `Option<&_>`\n   |\n   = help: the trait `Index<Option<&_>>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:21:23\n   |\n21 |         bracket_stack.pop()\n   |                       ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpn3u5sr7p.rs:27:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket != \"\" {\n        return false\n      }\n      closing_bracket = c\n    } else {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket == \"\" {\n        bracket_stack.push(opening_bracket)\n      } else {\n        if opening_bracket != closing_bracket {\n          return false\n        }\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      }\n    }\n  }\n  if opening_bracket != \"\" {\n    return false\n  }\n  if closing_bracket != \"\" {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7zk3i_ti.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let opening_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7zk3i_ti.rs:13:27\n   |\n13 |   let opening_bracket = \"\"\n   |                           ^ help: add `;` here\n14 |   let closing_bracket = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7zk3i_ti.rs:14:27\n   |\n14 |   let closing_bracket = \"\"\n   |                           ^ help: add `;` here\n15 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp7zk3i_ti.rs:16:24\n   |\n16 |     let c = brackets[i]\n   |                        ^ help: add `;` here\n17 |     if c == \"<\" {\n   |     -- unexpected token\n\nerror: expected `;`, found `closing_bracket`\n  --> /tmp/tmp7zk3i_ti.rs:37:29\n   |\n37 |         opening_bracket = \"\"\n   |                             ^ help: add `;` here\n38 |         closing_bracket = \"\"\n   |         --------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp7zk3i_ti.rs:15:12\n   |\n15 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp7zk3i_ti.rs:15:30\n   |\n15 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp7zk3i_ti.rs:32:23\n   |\n32 |         bracket_stack.push(opening_bracket)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.length == 0 {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last] == \">\" {\n          bracket_stack.pop()\n        } else {\n          bracket_stack.push(i)\n        }\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.length == 0 {\n        return false\n      } else {\n        if brackets[bracket_stack.last] == \"<\" {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.length == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpo6z2lujp.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpo6z2lujp.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpo6z2lujp.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tmp/tmpo6z2lujp.rs:15:24\n   |\n15 |       if bracket_stack.length == 0 {\n   |                        ^^^^^^\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpo6z2lujp.rs:16:23\n   |\n16 |         bracket_stack.push(i)\n   |                       ^^^^ method not found in `[_; 0]`\n\nerror[E0615]: attempted to take value of method `last` on type `[_; 0]`\n  --> /tmp/tmpo6z2lujp.rs:18:35\n   |\n18 |         if brackets[bracket_stack.last] == \">\" {\n   |                                   ^^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n18 |         if brackets[bracket_stack.last()] == \">\" {\n   |                                       ++\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpo6z2lujp.rs:19:25\n   |\n19 |           bracket_stack.pop()\n   |                         ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpo6z2lujp.rs:21:25\n   |\n21 |           bracket_stack.push(i)\n   |                         ^^^^ method not found in `[_; 0]`\n\nerror[E0609]: no field `length` on type `[_; 0]`\n  --> /tmp/tmpo6z2luj",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5y2j64mc.rs:12:27\n   |\n12 |   let opening_brackets = 0\n   |                           ^ help: add `;` here\n13 |   let closing_brackets = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5y2j64mc.rs:13:27\n   |\n13 |   let closing_brackets = 0\n   |                           ^ help: add `;` here\n14 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:15:18\n   |\n15 |     if (brackets[i] == \"<\") {\n   |                  ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp5y2j64mc.rs:17:25\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |                         ^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:15:8\n   |\n15 |     if (brackets[i] == \"<\") {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -     if (brackets[i] == \"<\") {\n15 +     if brackets[i] == \"<\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5y2j64mc.rs:17:15\n   |\n17 |     } else if (brackets[i] == \">\") {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n17 -     } else if (brackets[i] == \">\") {\n17 +     } else if brackets[i] == \">\" {\n   | \n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if !open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = false\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxh92_tk4.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   let open_bracket = false\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxh92_tk4.rs:13:27\n   |\n13 |   let open_bracket = false\n   |                           ^ help: add `;` here\n14 |   for c in brackets {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpxh92_tk4.rs:14:12\n   |\n14 |   for c in brackets {\n   |            ^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmplgqlg9m2.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   let bracket_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmplgqlg9m2.rs:13:24\n   |\n13 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n14 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror: expected `;`, found `bracket_count`\n  --> /tmp/tmplgqlg9m2.rs:16:28\n   |\n16 |       bracket_stack.push(i)\n   |                            ^ help: add `;` here\n17 |       bracket_count += 1\n   |       ------------- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmplgqlg9m2.rs:14:12\n   |\n14 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmplgqlg9m2.rs:14:30\n   |\n14 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmplgqlg9m2.rs:16:21\n   |\n16 |       bracket_stack.push(i)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmplgqlg9m2.rs:21:31\n   |\n21 |       } else if bracket_stack.pop() != i - 1 {\n   |                               ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293417,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpe4vrmc2r.rs:12:24\n   |\n12 |   let bracket_count = 0\n   |                        ^ help: add `;` here\n13 |   for _ in brackets.chars() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:14:8\n   |\n14 |     if (bracket_count == 0) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n14 -     if (bracket_count == 0) {\n14 +     if bracket_count == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:15:10\n   |\n15 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n15 -       if (brackets[0] != '<') {\n15 +       if brackets[0] != '<' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:18:15\n   |\n18 |     } else if (bracket_count == 1) {\n   |               ^                  ^\n   |\nhelp: remove these parentheses\n   |\n18 -     } else if (bracket_count == 1) {\n18 +     } else if bracket_count == 1 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:19:10\n   |\n19 |       if (brackets[0] != '>') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n19 -       if (brackets[0] != '>') {\n19 +       if brackets[0] != '>' {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpe4vrmc2r.rs:23:10\n   |\n23 |       if (brackets[0] != '<') {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n23 -       if (brackets[0] != '<') {\n23 +       if brackets[0] != '<' {\n   | \n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpe4vrmc2r.rs:15:11\n   |\n15 |       if (brackets[0] != '<') {\n   |           ^^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Id",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.append(i)\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()\n}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
      "timestamp": 1664293418,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp4bx_d9c4.rs:12:25\n   |\n12 |   let bracket_stack = []\n   |                         ^ help: add `;` here\n13 |   for i in range(0, brackets.length()) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp4bx_d9c4.rs:13:12\n   |\n13 |   for i in range(0, brackets.length()) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp4bx_d9c4.rs:13:30\n   |\n13 |   for i in range(0, brackets.length()) {\n   |                              ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4bx_d9c4.rs:16:23\n   |\n16 |         bracket_stack.append(i)\n   |                       ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4bx_d9c4.rs:19:25\n   |\n19 |           bracket_stack.pop()\n   |                         ^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp4bx_d9c4.rs:29:25\n   |\n29 |           bracket_stack.pop()\n   |                         ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}