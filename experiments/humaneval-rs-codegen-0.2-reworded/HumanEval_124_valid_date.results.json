{
  "name": "HumanEval_124_valid_date",
  "language": "rs",
  "prompt": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n",
  "tests": "}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpq7bfdo0_.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpq7bfdo0_.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpq7bfdo0_.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd9u8phyh.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpd9u8phyh.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpd9u8phyh.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpd9u8phyh.rs:39:34\n   |\n39 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n40 |   let day_num = parseInt(day)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpd9u8phyh.rs:40:30\n   |\n40 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n41 |   let year_num = parseInt(year)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpd9u8phyh.rs:41:32\n   |\n41 |   let year_num = parseInt(year)\n   |                                ^ help: add `;` here\n42 | \n43 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpd9u8phyh.rs:39:19\n   |\n39 |   let month_num = parseInt(month)\n   |                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpd9u8phyh.rs:40:17\n   |\n40 |   let day_num = parseInt(day)\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpd9u8phyh.rs:41:18\n   |\n41 |   let year_num = parseInt(year)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:22:19\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:22:25\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:22:31\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:25:19\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:25:25\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:25:31\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:28:19\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:28:25\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:28:31\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:31:19\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:31:25\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:31:31\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:34:19\n   |\n34 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknow",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    if month == 2 {\n      return day >= 29\n    } else {\n      return false\n    }\n  }\n\n  if month == 2 {\n    return day <= 28\n  }\n\n  if month == 4 || month == 6 || month == 9 || month == 11 {\n    return day <= 30\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpje8rnk9r.rs:25:34\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpje8rnk9r.rs:25:36\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpje8rnk9r.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpje8rnk9r.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpje8rnk9r.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:23:41\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:24:39\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoccak8xg.rs:25:40\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpoccak8xg.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpju40o59p.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpju40o59p.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpju40o59p.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpju40o59p.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpju40o59p.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpju40o59p.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpju40o59p.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpju40o59p.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpju40o59p.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n\n  let month_num = month.toInt()\n  let day_num = day.toInt()\n  let year_num = year.toInt()\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjmr1it0e.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjmr1it0e.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjmr1it0e.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjmr1it0e.rs:31:32\n   |\n31 |   let month_num = month.toInt()\n   |                                ^ help: add `;` here\n32 |   let day_num = day.toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjmr1it0e.rs:32:28\n   |\n32 |   let day_num = day.toInt()\n   |                            ^ help: add `;` here\n33 |   let year_num = year.toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjmr1it0e.rs:33:30\n   |\n33 |   let year_num = year.toInt()\n   |                              ^ help: add `;` here\n34 | \n35 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpjmr1it0e.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjmr1it0e.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjmr1it0e.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1]\n   |          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.empty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  const date_arr = date.split(\"-\")\n  const month = date_arr[0]\n  const day = date_arr[1]\n  const year = date_arr[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if year < \"2000\" || year > \"2040\" {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmprdhhamub.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmprdhhamub.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 | \n26 |   const date_arr = date.split(\"-\")\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmprdhhamub.rs:26:35\n   |\n26 |   const date_arr = date.split(\"-\")\n   |                                   ^ help: add `;` here\n27 |   const month = date_arr[0]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmprdhhamub.rs:27:28\n   |\n27 |   const month = date_arr[0]\n   |                            ^ help: add `;` here\n28 |   const day = date_arr[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmprdhhamub.rs:28:26\n   |\n28 |   const day = date_arr[1]\n   |                          ^ help: add `;` here\n29 |   const year = date_arr[2]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmprdhhamub.rs:29:27\n   |\n29 |   const year = date_arr[2]\n   |                           ^ help: add `;` here\n30 | \n31 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmprdhhamub.rs:26:20\n   |\n26 |   const date_arr = date.split(\"-\")\n   |   --------------   ^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let date_arr`\n\nerror: missing type for `const` item\n  --> /tmp/tmprdhhamub.rs:23:9\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !is_valid_month(month) {\n    return false\n  }\n\n  if !is_valid_day(day) {\n    return false\n  }\n\n  if !is_valid_year(year) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpuq9j6e8y.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuq9j6e8y.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpuq9j6e8y.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `is_valid_month` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:39:7\n   |\n39 |   if !is_valid_month(month) {\n   |       ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_day` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:43:7\n   |\n43 |   if !is_valid_day(day) {\n   |       ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_year` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:47:7\n   |\n47 |   if !is_valid_year(year) {\n   |       ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpuq9j6e8y.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2]\n   |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if !month {\n    return false\n  }\n  let month_num = parseInt(month[1])\n  let day = parseInt(month[2])\n  let year = parseInt(month[3])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpmzzrarr1.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpmzzrarr1.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpmzzrarr1.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpmzzrarr1.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpmzzrarr1.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpmzzrarr1.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.split(\"-\")[0].to_i\n  let day = date.split(\"-\")[1].to_i\n  let year = date.split(\"-\")[2].to_i\n  if (month < 1 || month > 12) {\n    return false\n  }\n  if (day < 1 || day > 31) {\n    return false\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpt4b3_2o0.rs:22:38\n   |\n22 |   let month = date.split(\"-\")[0].to_i\n   |                                      ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpt4b3_2o0.rs:23:36\n   |\n23 |   let day = date.split(\"-\")[1].to_i\n   |                                    ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpt4b3_2o0.rs:24:37\n   |\n24 |   let year = date.split(\"-\")[2].to_i\n   |                                     ^ help: add `;` here\n25 |   if (month < 1 || month > 12) {\n   |   -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt4b3_2o0.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt4b3_2o0.rs:25:6\n   |\n25 |   if (month < 1 || month > 12) {\n   |      ^                       ^\n   |\nhelp: remove these parentheses\n   |\n25 -   if (month < 1 || month > 12) {\n25 +   if month < 1 || month > 12 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt4b3_2o0.rs:28:6\n   |\n28 |   if (day < 1 || day > 31) {\n   |      ^                   ^\n   |\nhelp: remove these parentheses\n   |\n28 -   if (day < 1 || day > 31) {\n28 +   if day < 1 || day > 31 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt4b3_2o0.rs:31:6\n   |\n31 |   if (month == 2) {\n   |      ^          ^\n   |\nhelp: remove these parentheses\n   |\n31 -   if (month == 2) {\n31 +   if month == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt4b3_2o0.rs:32:8\n   |\n32 |     if (day < 1 || day > 29) {\n   |        ^                   ^\n   |\nhelp: remove these parentheses\n   |\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcaj3yjo2.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpcaj3yjo2.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpcaj3yjo2.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpcaj3yjo2.rs:39:34\n   |\n39 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n40 |   let day_num = parseInt(day)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpcaj3yjo2.rs:40:30\n   |\n40 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n41 |   let year_num = parseInt(year)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpcaj3yjo2.rs:41:32\n   |\n41 |   let year_num = parseInt(year)\n   |                                ^ help: add `;` here\n42 | \n43 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpcaj3yjo2.rs:39:19\n   |\n39 |   let month_num = parseInt(month)\n   |                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpcaj3yjo2.rs:40:17\n   |\n40 |   let day_num = parseInt(day)\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpcaj3yjo2.rs:41:18\n   |\n41 |   let year_num = parseInt(year)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:22:19\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:22:25\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:22:31\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:25:19\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:25:25\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:25:31\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:28:19\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:28:25\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:28:31\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:31:19\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:31:25\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:31:31\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:34:19\n   |\n34 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknow",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5ldqzmw4.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:39:34\n   |\n39 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n40 |   let day_num = parseInt(day)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:40:30\n   |\n40 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n41 |   let year_num = parseInt(year)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5ldqzmw4.rs:41:32\n   |\n41 |   let year_num = parseInt(year)\n   |                                ^ help: add `;` here\n42 | \n43 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5ldqzmw4.rs:39:19\n   |\n39 |   let month_num = parseInt(month)\n   |                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5ldqzmw4.rs:40:17\n   |\n40 |   let day_num = parseInt(day)\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5ldqzmw4.rs:41:18\n   |\n41 |   let year_num = parseInt(year)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  if year_num < 1 || year_num > 9999 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp228g4wid.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp228g4wid.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp228g4wid.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp228g4wid.rs:23:27\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp228g4wid.rs:23:35\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp228g4wid.rs:24:28\n   |\n24 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp228g4wid.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp228g4wid.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp228g4wid.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpq7bfdo0_.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpq7bfdo0_.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpq7bfdo0_.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpq7bfdo0_.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n  let day = date.match(/^\\d{2}-\\d{2}$/).to_s\n  let year = date.match(/^\\d{4}$/).to_s\n\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n\n  let month_num = month.match(/^\\d{2}$/).to_i\n  let day_num = day.match(/^\\d{2}$/).to_i\n  let year_num = year.match(/^\\d{4}$/).to_i\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpgya0xly4.rs:23:28\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgya0xly4.rs:23:34\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgya0xly4.rs:23:40\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgya0xly4.rs:24:26\n   |\n24 |   let day = date.match(/^\\d{2}-\\d{2}$/).to_s\n   |                          ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgya0xly4.rs:24:32\n   |\n24 |   let day = date.match(/^\\d{2}-\\d{2}$/).to_s\n   |                                ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgya0xly4.rs:25:27\n   |\n25 |   let year = date.match(/^\\d{4}$/).to_s\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgya0xly4.rs:31:33\n   |\n31 |   let month_num = month.match(/^\\d{2}$/).to_i\n   |                                 ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgya0xly4.rs:32:29\n   |\n32 |   let day_num = day.match(/^\\d{2}$/).to_i\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgya0xly4.rs:33:31\n   |\n33 |   let year_num = year.match(/^\\d{4}$/).to_i\n   |                               ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpgya0xly4.rs:23:20\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpgya0xly4.rs:23:26\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpkxspp05n.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkxspp05n.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkxspp05n.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkxspp05n.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkxspp05n.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkxspp05n.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpkxspp05n.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpkxspp05n.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpkxspp05n.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if !month {\n    return false\n  }\n  let month_num = month[1]\n  let day = month[2]\n  let year = month[3]\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 31 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpdfolzz_0.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpdfolzz_0.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpdfolzz_0.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpdfolzz_0.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpdfolzz_0.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpdfolzz_0.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n\n  if month.length() != 2 {\n    return false\n  }\n\n  if day.length() != 2 {\n    return false\n  }\n\n  if year.length() != 4 {\n    return false\n  }\n\n  if !is_valid_month(month) {\n    return false\n  }\n\n  if !is_valid_day(day) {\n    return false\n  }\n\n  if !is_valid_year(year) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpix9u_era.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpix9u_era.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpix9u_era.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `is_valid_month` in this scope\n  --> /tmp/tmpix9u_era.rs:43:7\n   |\n43 |   if !is_valid_month(month) {\n   |       ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_day` in this scope\n  --> /tmp/tmpix9u_era.rs:47:7\n   |\n47 |   if !is_valid_day(day) {\n   |       ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_year` in this scope\n  --> /tmp/tmpix9u_era.rs:51:7\n   |\n51 |   if !is_valid_year(year) {\n   |       ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpix9u_era.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpix9u_era.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpix9u_era.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpix9u_era.rs:25:14\n   |\n25 |   let year = d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].to_i\n  let day = date.split(\"-\")[1].to_i\n  let year = date.split(\"-\")[2].to_i\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6eq9wk6t.rs:22:38\n   |\n22 |   let month = date.split(\"-\")[0].to_i\n   |                                      ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6eq9wk6t.rs:23:36\n   |\n23 |   let day = date.split(\"-\")[1].to_i\n   |                                    ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp6eq9wk6t.rs:24:37\n   |\n24 |   let year = date.split(\"-\")[2].to_i\n   |                                     ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp6eq9wk6t.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6eq9wk6t.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].to_i\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6eq9wk6t.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].to_i\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6eq9wk6t.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].to_i\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    if month == 2 {\n      return day >= 29\n    } else {\n      return false\n    }\n  }\n\n  if month == 2 {\n    return day < 29\n  }\n\n  if month == 4 || month == 6 || month == 9 || month == 11 {\n    return day < 30\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp720s8_98.rs:25:34\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp720s8_98.rs:25:36\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp720s8_98.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp720s8_98.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp720s8_98.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[0-1])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 30 {\n      return false\n    }\n  }\n  if year < 1900 || year > 2100 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpnftbdc8r.rs:24:34\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpnftbdc8r.rs:24:36\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpnftbdc8r.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpnftbdc8r.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpnftbdc8r.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].to_i\n  let day = date.split(\"-\")[1].to_i\n  let year = date.split(\"-\")[2].to_i\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6eq9wk6t.rs:22:38\n   |\n22 |   let month = date.split(\"-\")[0].to_i\n   |                                      ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6eq9wk6t.rs:23:36\n   |\n23 |   let day = date.split(\"-\")[1].to_i\n   |                                    ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp6eq9wk6t.rs:24:37\n   |\n24 |   let year = date.split(\"-\")[2].to_i\n   |                                     ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp6eq9wk6t.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6eq9wk6t.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].to_i\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6eq9wk6t.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].to_i\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6eq9wk6t.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].to_i\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.split(\"-\")[0].to_i\n  let day = date.split(\"-\")[1].to_i\n  let year = date.split(\"-\")[2].to_i\n  if (month < 1 || month > 12) {\n    return false\n  }\n  if (day < 1 || day > 31) {\n    return false\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpt4b3_2o0.rs:22:38\n   |\n22 |   let month = date.split(\"-\")[0].to_i\n   |                                      ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpt4b3_2o0.rs:23:36\n   |\n23 |   let day = date.split(\"-\")[1].to_i\n   |                                    ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpt4b3_2o0.rs:24:37\n   |\n24 |   let year = date.split(\"-\")[2].to_i\n   |                                     ^ help: add `;` here\n25 |   if (month < 1 || month > 12) {\n   |   -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt4b3_2o0.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt4b3_2o0.rs:25:6\n   |\n25 |   if (month < 1 || month > 12) {\n   |      ^                       ^\n   |\nhelp: remove these parentheses\n   |\n25 -   if (month < 1 || month > 12) {\n25 +   if month < 1 || month > 12 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt4b3_2o0.rs:28:6\n   |\n28 |   if (day < 1 || day > 31) {\n   |      ^                   ^\n   |\nhelp: remove these parentheses\n   |\n28 -   if (day < 1 || day > 31) {\n28 +   if day < 1 || day > 31 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt4b3_2o0.rs:31:6\n   |\n31 |   if (month == 2) {\n   |      ^          ^\n   |\nhelp: remove these parentheses\n   |\n31 -   if (month == 2) {\n31 +   if month == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpt4b3_2o0.rs:32:8\n   |\n32 |     if (day < 1 || day > 29) {\n   |        ^                   ^\n   |\nhelp: remove these parentheses\n   |\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n  let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n  let year = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[4]\n\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp7gb_d4x8.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp7gb_d4x8.rs:23:40\n   |\n23 |   let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n   |                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp7gb_d4x8.rs:23:44\n   |\n23 |   let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n   |                                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp7gb_d4x8.rs:23:52\n   |\n23 |   let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n   |                                                    ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp7gb_d4x8.rs:23:55\n   |\n23 |   let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n   |                                                       ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp7gb_d4x8.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp7gb_d4x8.rs:24:38\n   |\n24 |   let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp7gb_d4x8.rs:24:42\n   |\n24 |   let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n   |                                          ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp7gb_d4x8.rs:24:50\n   |\n24 |   let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n   |                                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp7gb_d4x8.rs:24:53\n   |\n24 |   let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n   |                                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpkz_sma6d.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpkz_sma6d.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpkz_sma6d.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_s\n  let year = date.match(/^(19|20)\\d\\d/).to_s\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n  if month.match(/^(0|1|3|5|7|8|10|12)$/).isEmpty() {\n    return false\n  }\n  if month.match(/^(4|6|9|11)$/).isEmpty() {\n    return false\n  }\n  if month.match(/^(2)$/).isEmpty() {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp0a6m9m7h.rs:24:34\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_s\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp0a6m9m7h.rs:24:36\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_s\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp0a6m9m7h.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_s\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp0a6m9m7h.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp0a6m9m7h.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:22:19\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:22:25\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:22:31\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:25:19\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:25:25\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:25:31\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:28:19\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:28:25\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:28:31\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:31:19\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:31:25\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:31:31\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:34:19\n   |\n34 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknow",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if !month {\n    return false\n  }\n\n  let month_num = parseInt(month[1])\n  let day = parseInt(month[2])\n  let year = parseInt(month[3])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpv9flf1lu.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpv9flf1lu.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpv9flf1lu.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpv9flf1lu.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpv9flf1lu.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpv9flf1lu.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{1,2})-(\\d{1,2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if (month.length != 3 || day.length != 2 || year.length != 1) {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n\n  if (month_num == 2) {\n    if (day_num < 1 || day_num > 29) {\n      return false\n    }\n  } else if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day_num < 1 || day_num > 31) {\n      return false\n    }\n  } else if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpmc7yio_m.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpmc7yio_m.rs:23:39\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                                       ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpmc7yio_m.rs:23:49\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                                                 ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpmc7yio_m.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{1,2})-(\\d{1,2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpmc7yio_m.rs:24:37\n   |\n24 |   let day = date.match(/^(\\d{1,2})-(\\d{1,2})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpmc7yio_m.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpmc7yio_m.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpmc7yio_m.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmc7yio_m.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n  let year = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n\n  if month.length != 3 {\n    return false\n  }\n\n  if day.length != 3 {\n    return false\n  }\n\n  if year.length != 3 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpsu1tmqfn.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsu1tmqfn.rs:23:38\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsu1tmqfn.rs:23:47\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsu1tmqfn.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsu1tmqfn.rs:24:36\n   |\n24 |   let day = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                                    ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsu1tmqfn.rs:24:45\n   |\n24 |   let day = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsu1tmqfn.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsu1tmqfn.rs:25:37\n   |\n25 |   let year = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsu1tmqfn.rs:25:46\n   |\n25 |   let year = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                                              ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpsu1tmqfn.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expre",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[0]\n  let day = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[1]\n  let year = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[2]\n  if month.match(/^\\d{2}$/).isNone() {\n    return false\n  }\n  if month.match(/^\\d{2}$/).groups()[0] < 1 || month.match(/^\\d{2}$/).groups()[0] > 12 {\n    return false\n  }\n  if month.match(/^\\d{2}$/).groups()[0] == 2 {\n    if day.match(/^\\d{2}$/).isNone() {\n      return false\n    }\n    if day.match(/^\\d{2}$/).groups()[0] < 1 || day.match(/^\\d{2}$/).groups()[0] > 29 {\n      return false\n    }\n  } else {\n    if day.match(/^\\d{2}$/).isNone() {\n      return false\n    }\n    if day.match(/^\\d{2}$/).groups()[0] < 1 || day.match(/^\\d{2}$/).groups()[0] > 30 {\n      return false\n    }\n  }\n  if year.match(/^\\d{4}$/).isNone() {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:22:19\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:22:25\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:22:31\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:25:28\n   |\n25 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[0]\n   |                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:25:34\n   |\n25 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[0]\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:25:40\n   |\n25 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[0]\n   |                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:26:26\n   |\n26 |   let day = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[1]\n   |                          ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:26:32\n   |\n26 |   let day = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[1]\n   |                                ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:26:38\n   |\n26 |   let day = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[1]\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:27:27\n   |\n27 |   let year = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[2]\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:27:33\n   |\n27 |   let year = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[2]\n   |                                 ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp2wqe3jc0.rs:27:39\n   |\n27 |   let year = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).groups()[2]\n   |                                       ^\n\nerror: unkn",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  if year < 1900 || year > 2040 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp0cclscw1.rs:24:34\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp0cclscw1.rs:24:36\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp0cclscw1.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp0cclscw1.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp0cclscw1.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  const year = \"2000\"\n\n  const month = date.split(\"-\")[0]\n  const day = date.split(\"-\")[1]\n  const year = date.split(\"-\")[2]\n\n  if month.length != 2 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) || !days.includes(day) {\n    return false\n  }\n\n  if year.toInt() < 2000 || year.toInt() > 2040 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmp6c0z478g.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp6c0z478g.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 |   const year = \"2000\"\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp6c0z478g.rs:25:22\n   |\n25 |   const year = \"2000\"\n   |                      ^ help: add `;` here\n26 | \n27 |   const month = date.split(\"-\")[0]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp6c0z478g.rs:27:35\n   |\n27 |   const month = date.split(\"-\")[0]\n   |                                   ^ help: add `;` here\n28 |   const day = date.split(\"-\")[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp6c0z478g.rs:28:33\n   |\n28 |   const day = date.split(\"-\")[1]\n   |                                 ^ help: add `;` here\n29 |   const year = date.split(\"-\")[2]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp6c0z478g.rs:29:34\n   |\n29 |   const year = date.split(\"-\")[2]\n   |                                  ^ help: add `;` here\n30 | \n31 |   if month.length != 2 || day.length != 2 || year.length != 4 {\n   |   -- unexpected token\n\nerror[E0428]: the name `year` is defined multiple times\n  --> /tmp/tmp6c0z478g.rs:29:3\n   |\n25 |   const year = \"2000\"\n   |   ------------------- previous definition of the value `year` here\n...\n29 |   const year = date.split(\"-\")[2]\n   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `year` redefined here\n   |\n   = note: `year` must be defined only once in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  let month_num = month.to_i()\n  let day_num = day.to_i()\n  let year_num = year.to_i()\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   let month_num = month.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:25:31\n   |\n25 |   let month_num = month.to_i()\n   |                               ^ help: add `;` here\n26 |   let day_num = day.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:26:27\n   |\n26 |   let day_num = day.to_i()\n   |                           ^ help: add `;` here\n27 |   let year_num = year.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpl9u6aors.rs:27:29\n   |\n27 |   let year_num = year.to_i()\n   |                             ^ help: add `;` here\n28 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpl9u6aors.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpl9u6aors.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpl9u6aors.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:23:41\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:24:39\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoccak8xg.rs:25:40\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpoccak8xg.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpv1mrh97u.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpv1mrh97u.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpv1mrh97u.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpv1mrh97u.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpv1mrh97u.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpv1mrh97u.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpv1mrh97u.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpv1mrh97u.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpv1mrh97u.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n  if (month) {\n    let days = month.groups()[3]\n    let month_num = month.groups()[1]\n    let days_num = days.match(/^([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})$/)\n    if (month_num > 12 || month_num < 1) {\n      return false\n    }\n    if (days_num[1] > 31 || days_num[1] < 1) {\n      return false\n    }\n    if (days_num[2] > 30 || days_num[2] < 1) {\n      return false\n    }\n    if (days_num[3] > 29 || days_num[3] < 1) {\n      return false\n    }\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmp2cfkih4g.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp2cfkih4g.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2cfkih4g.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp2cfkih4g.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if month == null {\n    return false\n  }\n\n  let month_num = parseInt(month[1])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  let day = parseInt(month[2])\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  let year = parseInt(month[3])\n  if year < 1900 || year > 2100 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpzjno5733.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzjno5733.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzjno5733.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpzjno5733.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpzjno5733.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpzjno5733.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:22:41\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:23:39\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdgkl7sss.rs:24:40\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpdgkl7sss.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if year < \"2000\" || year > \"2040\" {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy7442n3i.rs:23:58\n   |\n23 |   let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                          ^ help: add `;` here\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy7442n3i.rs:24:86\n   |\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                      ^ help: add `;` here\n25 | \n26 |   let month = date.split(\"-\")[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy7442n3i.rs:26:33\n   |\n26 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n27 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy7442n3i.rs:27:31\n   |\n27 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n28 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpy7442n3i.rs:28:32\n   |\n28 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n29 | \n30 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpy7442n3i.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpy7442n3i.rs:26:15\n   |\n26 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpy7442n3i.rs:27:13\n   |\n27 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:23:41\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:24:39\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoccak8xg.rs:25:40\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpoccak8xg.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let [month, day, year] = date.split(\"-\").map(s => s.toInt())\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 31 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp800vzsk7.rs:22:50\n   |\n22 |   let [month, day, year] = date.split(\"-\").map(s => s.toInt())\n   |                                                  ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let [month, day, year] = date.split(\"-\")\n  let [_, _, _] = year.split(\"-\")\n  if month.length != 2 {\n    return false\n  }\n  if day.length != 2 {\n    return false\n  }\n  if month.to_i < 1 || month.to_i > 12 {\n    return false\n  }\n  if day.to_i < 1 || day.to_i > 31 {\n    return false\n  }\n  if month.to_i == 2 {\n    if day.to_i < 1 || day.to_i > 29 {\n      return false\n    }\n  } else {\n    if day.to_i < 1 || day.to_i > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2l_b0i5j.rs:22:43\n   |\n22 |   let [month, day, year] = date.split(\"-\")\n   |                                           ^ help: add `;` here\n23 |   let [_, _, _] = year.split(\"-\")\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2l_b0i5j.rs:23:34\n   |\n23 |   let [_, _, _] = year.split(\"-\")\n   |                                  ^ help: add `;` here\n24 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp2l_b0i5j.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0529]: expected an array or slice, found `std::str::Split<'_, &str>`\n  --> /tmp/tmp2l_b0i5j.rs:22:7\n   |\n22 |   let [month, day, year] = date.split(\"-\")\n   |       ^^^^^^^^^^^^^^^^^^ pattern cannot match with input type `std::str::Split<'_, &str>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0529, E0599.\nFor more information about an error, try `rustc --explain E0529`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{1,2})(\\d{1,2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  if year_num < 1000 || year_num > 9999 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmphk21pklc.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphk21pklc.rs:22:38\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphk21pklc.rs:22:47\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphk21pklc.rs:23:27\n   |\n23 |   let day = date.match(/^(\\d{1,2})(\\d{1,2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphk21pklc.rs:23:36\n   |\n23 |   let day = date.match(/^(\\d{1,2})(\\d{1,2})$/).groups()\n   |                                    ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphk21pklc.rs:24:28\n   |\n24 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmphk21pklc.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmphk21pklc.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmphk21pklc.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/)\n  if !month {\n    return false\n  }\n  let month_num = parseInt(month[1])\n  let day = parseInt(month[2])\n  let year = parseInt(month[3])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 31 {\n      return false\n    }\n  }\n  if year < 1900 || year > 2100 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpzpmv31zp.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzpmv31zp.rs:22:38\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/)\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzpmv31zp.rs:22:47\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/)\n   |                                               ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpzpmv31zp.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpzpmv31zp.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpzpmv31zp.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  let days_in_month = [31, 30, 29, 28, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n  let days_in_month_leap_year = [31, 29, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n  if (month.to_i() < 1 || month.to_i() > 12) {\n    return false\n  }\n  if (day.to_i() < 1 || day.to_i() > days_in_month[month.to_i() - 1]) {\n    return false\n  }\n  if (month.to_i() == 2) {\n    if (day.to_i() < 1 || day.to_i() > 29) {\n      return false\n    }\n  } else if (month.to_i() == 4 || month.to_i() == 6 || month.to_i() == 9 || month.to_i() == 11) {\n    if (day.to_i() < 1 || day.to_i() > 30) {\n      return false\n    }\n  } else {\n    if (day.to_i() < 1 || day.to_i() > days_in_month[month.to_i() - 1]) {\n      return false\n    }\n  }\n  if (year.to_i() < 1000 || year.to_i() > 9999) {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpi3n_gg_s.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi3n_gg_s.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi3n_gg_s.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   let days_in_month = [31, 30, 29, 28, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpi3n_gg_s.rs:25:75\n   |\n25 |   let days_in_month = [31, 30, 29, 28, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n   |                                                                           ^ help: add `;` here\n26 |   let days_in_month_leap_year = [31, 29, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpi3n_gg_s.rs:26:85\n   |\n26 |   let days_in_month_leap_year = [31, 29, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n   |                                                                                     ^ help: add `;` here\n27 |   if (month.to_i() < 1 || month.to_i() > 12) {\n   |   -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi3n_gg_s.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpi3n_gg_s.rs:27:6\n   |\n27 |   if (month.to_i() < 1 || month.to_i() > 12) {\n   |      ^                                     ^\n   |\nhelp: remove these parentheses\n   |\n27 -   if (month.to_i()",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n  let months_days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let months_days_year = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let months_days_year_day = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let months_days_year_day_month = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let months_days_year_day_month_day = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let months_days_year_day_month_day_year = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let months_days_year_day_month_day_year_day = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let months_days_year_day_month_day_year_day_month = [\"01\", \"02\", \"03\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0765]: unterminated double quote string\n  --> /tmp/tmpmdl6z8th.rs:51:47\n   |\n51 |       assert_eq!(candidate(String::from(\"04-2003\")), false);\n   |  _______________________________________________^\n52 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0765`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/)\n  let day = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})$/)\n  let year = date.match(/^(\\d{4})$/)\n\n  if month.isNone() || day.isNone() || year.isNone() {\n    return false\n  }\n\n  let month_num = month.groups()[1]\n  let day_num = day.groups()[1]\n  let year_num = year.groups()[1]\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmplvyvh9w0.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmplvyvh9w0.rs:23:40\n   |\n23 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/)\n   |                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmplvyvh9w0.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/)\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmplvyvh9w0.rs:23:56\n   |\n23 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/)\n   |                                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmplvyvh9w0.rs:23:61\n   |\n23 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/)\n   |                                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmplvyvh9w0.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})$/)\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmplvyvh9w0.rs:24:38\n   |\n24 |   let day = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})$/)\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmplvyvh9w0.rs:24:43\n   |\n24 |   let day = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})$/)\n   |                                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmplvyvh9w0.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/)\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmplvyvh9w0.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/)\n   |                    ++\n\nerro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n\n  const date_parts = date.split(\"-\")\n  const month = date_parts[0]\n  const day = date_parts[1]\n  const year = date_parts[2]\n\n  if month.length() != 2 {\n    return false\n  }\n\n  if day.length() != 2 {\n    return false\n  }\n\n  if year.length() != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if year < \"2000\" || year > \"2040\" {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpqx5x9u3a.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"...\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpqx5x9u3a.rs:24:202\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n   |                                                                                                                                                                                                          ^ help: add `;` here\n25 | \n26 |   const date_parts = date.split(\"-\")\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpqx5x9u3a.rs:26:37\n   |\n26 |   const date_parts = date.split(\"-\")\n   |                                     ^ help: add `;` here\n27 |   const month = date_parts[0]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpqx5x9u3a.rs:27:30\n   |\n27 |   const month = date_parts[0]\n   |                              ^ help: add `;` here\n28 |   const day = date_parts[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpqx5x9u3a.rs:28:28\n   |\n28 |   const day = date_parts[1]\n   |                            ^ help: add `;` here\n29 |   const year = date_parts[2]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpqx5x9u3a.rs:29:29\n   |\n29 |   const year = date_parts[2]\n   |                             ^ help: add `;` here\n30 | \n31 |   if month.length() != 2 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpqx5x9u3a.rs:26:22\n   |\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let month_num = parseInt(month[0])\n  let day = parseInt(month[1])\n  let year = parseInt(month[2])\n  let valid_month = month_num >= 1 && month_num <= 12\n  let valid_day = day >= 1 && day <= 31\n  let valid_year = year >= 1900 && year <= 2100\n  let valid_month_day = valid_month && valid_day\n  let valid_month_day_year = valid_month_day && valid_year\n  let valid_month_day_year_day = valid_month_day && valid_year && day <= 30\n  let valid_month_day_year_day_leap = valid_month_day && valid_year && day <= 29\n  let valid_month_day_leap = valid_month_day && day <= 30\n  let valid_month_day_leap_year = valid_month_day && day <= 29\n  let valid_month_leap = month_num >= 1 && month_num <= 12 && month_num % 2 == 0\n  let valid_day_leap = day >= 1 && day <= 30 && day % 2 == 0\n  let valid_day_leap_year = day >= 1 && day <= 29 && day % 2 == 0\n  let valid_day_leap_year_leap = day >= 1 && day <= 29 && day % 2 == 0\n  let valid_day_leap_year_leap_leap = day >= 1 && day <= 29 && day % 2 == 0\n  let valid_day_leap_leap = day >= 1 && day <= 30 && day % 2 == 0\n  let valid_day_leap_leap_leap = day >= 1 && day <= 30 && day % 2 == 0\n  let valid_day_leap_leap_leap_leap = day >= 1 && day <= 30 && day % 2 == 0\n  let valid_day_leap_leap_leap_leap_leap =\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp1hg2jvm4.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp1hg2jvm4.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp1hg2jvm4.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp1hg2jvm4.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp1hg2jvm4.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp1hg2jvm4.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$/).to_s\n  let day = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$/).to_s\n  let year = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$/).to_s\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n  let month_num = month.match(/^(0[1-9]|1[0-2])$/).to_i\n  let day_num = day.match(/^(0[1-9]|1[0-2])$/).to_i\n  let year_num = year.match(/^(0[1-9]|1[0-2])$\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmpta9qc86l.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0...\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$/).to_s\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpta9qc86l.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0...\n   |                          ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpta9qc86l.rs:30:28\n   |\n18 | fn valid_date(date: String) -> bool {\n   |                                     - closing delimiter possibly meant for this\n...\n30 |   let year_num = year.match(/^(0[1-9]|1[0-2])$\n   |                            ^ unclosed delimiter\n31 | }\n   | ^ mismatched closing delimiter\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpta9qc86l.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !is_valid_month(month) {\n    return false\n  }\n\n  if !is_valid_day(day) {\n    return false\n  }\n\n  if !is_valid_year(year) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpuq9j6e8y.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuq9j6e8y.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpuq9j6e8y.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `is_valid_month` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:39:7\n   |\n39 |   if !is_valid_month(month) {\n   |       ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_day` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:43:7\n   |\n43 |   if !is_valid_day(day) {\n   |       ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_year` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:47:7\n   |\n47 |   if !is_valid_year(year) {\n   |       ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpuq9j6e8y.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2]\n   |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:23:41\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:24:39\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoccak8xg.rs:25:40\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpoccak8xg.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n  if (month_num == 2) {\n    if (day_num < 1 || day_num > 29) {\n      return false\n    }\n  } else {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n  if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day_num < 1 || day_num > 31) {\n      return false\n    }\n  } else {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n  if (year_num < 1000 || year_num > 9999) {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpsv51dw53.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsv51dw53.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsv51dw53.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsv51dw53.rs:23:27\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsv51dw53.rs:23:35\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpsv51dw53.rs:24:28\n   |\n24 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpsv51dw53.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpsv51dw53.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsv51dw53.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpsv51dw53.rs:19:12\n   |\n19 |   if (date.i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 31 {\n      return false\n    }\n  }\n\n  if year < 1900 || year > 2100 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp0zfx7dg0.rs:25:34\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp0zfx7dg0.rs:25:36\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp0zfx7dg0.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp0zfx7dg0.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp0zfx7dg0.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n  if month[0] < 1 || month[0] > 12 {\n    return false\n  }\n  if month[1] < 1 || month[1] > 31 {\n    return false\n  }\n  if month[2] < 1 || month[2] > 31 {\n    return false\n  }\n  if month[0] == 2 {\n    if month[1] < 1 || month[1] > 29 {\n      return false\n    }\n  }\n  if month[0] == 4 || month[0] == 6 || month[0] == 9 || month[0] == 11 {\n    if month[1] < 1 || month[1] > 30 {\n      return false\n    }\n  }\n  if month[0] == 1 || month[0] == 3 || month[0] == 5 || month[0] == 7 || month[0] == 8 || month[0] == 10 || month[0] == 12 {\n    if month[1] < 1 || month[1] > 31 {\n      return false\n    }\n  }\n  if day[0] < 1 || day[0] > 31 {\n    return false\n  }\n  if year[0] < 1900 || year[0] > 2100 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpgcb116nu.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgcb116nu.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgcb116nu.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgcb116nu.rs:23:27\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgcb116nu.rs:23:35\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgcb116nu.rs:24:28\n   |\n24 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpgcb116nu.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpgcb116nu.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpgcb116nu.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let year = \"2000\"\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if !year.includes(year) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7t4q4or0.rs:23:58\n   |\n23 |   let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                          ^ help: add `;` here\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7t4q4or0.rs:24:86\n   |\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                      ^ help: add `;` here\n25 |   let year = \"2000\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7t4q4or0.rs:25:20\n   |\n25 |   let year = \"2000\"\n   |                    ^ help: add `;` here\n26 | \n27 |   let month = date.split(\"-\")[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7t4q4or0.rs:27:33\n   |\n27 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n28 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7t4q4or0.rs:28:31\n   |\n28 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n29 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp7t4q4or0.rs:29:32\n   |\n29 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n30 | \n31 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp7t4q4or0.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp7t4q4or0.rs:27:15\n   |\n27 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.is_empty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].to_int()\n  let day = date.split(\"-\")[1].to_int()\n  let year = date.split(\"-\")[2].to_int()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqurbd6_v.rs:23:42\n   |\n23 |   let month = date.split(\"-\")[0].to_int()\n   |                                          ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].to_int()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpqurbd6_v.rs:24:40\n   |\n24 |   let day = date.split(\"-\")[1].to_int()\n   |                                        ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].to_int()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpqurbd6_v.rs:25:41\n   |\n25 |   let year = date.split(\"-\")[2].to_int()\n   |                                         ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpqurbd6_v.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].to_int()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpqurbd6_v.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].to_int()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpqurbd6_v.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].to_int()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0608`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:22:41\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:23:39\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdgkl7sss.rs:24:40\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpdgkl7sss.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n    return false\n  }\n  if (month.length() != 2) {\n    return false\n  }\n  if (day.length() != 2) {\n    return false\n  }\n  if (year.length() != 4) {\n    return false\n  }\n  if (month.to_i() < 1 || month.to_i() > 12) {\n    return false\n  }\n  if (day.to_i() < 1 || day.to_i() > 31) {\n    return false\n  }\n  if (month.to_i() == 2) {\n    if (day.to_i() < 1 || day.to_i() > 29) {\n      return false\n    }\n  }\n  if (month.to_i() == 1 || month.to_i() == 3 || month.to_i() == 5 || month.to_i() == 7 || month.to_i() == 8 || month.to_i() == 10 || month.to_i() == 12) {\n    if (day.to_i() < 1 || day.to_i() > 30) {\n      return false\n    }\n  }\n  if (month.to_i() == 4 || month.to_i() == 6 || month.to_i() == 9 || month.to_i() == 11) {\n    if (day.to_i() < 1 || day.to_i() > 30) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3u94axw4.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3u94axw4.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp3u94axw4.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n   |   -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3u94axw4.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3u94axw4.rs:25:6\n   |\n25 |   if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n   |      ^                                                  ^\n   |\nhelp: remove these parentheses\n   |\n25 -   if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n25 +   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3u94axw4.rs:28:6\n   |\n28 |   if (month.length() != 2) {\n   |      ^                   ^\n   |\nhelp: remove these parentheses\n   |\n28 -   if (month.length() != 2) {\n28 +   if month.length() != 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3u94axw4.rs:31:6\n   |\n31 |   if (day.length() != 2) {\n   |      ^                 ^\n   |\nhelp: remove these parentheses\n   |\n31 -   if (day.length() != 2) {\n31 +   if day.length() != 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3u94axw4.r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].to_i\n  let day = date.split(\"-\")[1].to_i\n  let year = date.split(\"-\")[2].to_i\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 31 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsfwk2c_9.rs:22:38\n   |\n22 |   let month = date.split(\"-\")[0].to_i\n   |                                      ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpsfwk2c_9.rs:23:36\n   |\n23 |   let day = date.split(\"-\")[1].to_i\n   |                                    ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpsfwk2c_9.rs:24:37\n   |\n24 |   let year = date.split(\"-\")[2].to_i\n   |                                     ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpsfwk2c_9.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsfwk2c_9.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].to_i\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsfwk2c_9.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].to_i\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpsfwk2c_9.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].to_i\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n  if !month {\n    return false\n  }\n\n  let month_num = parseInt(month[1])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  let day = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10[0-9]|11[0-9]|12[0-9])$/)\n  if !day {\n    return false\n  }\n\n  let day_num = parseInt(day[3])\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  let year = parseInt(date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)[4])\n  if year < 1000 || year > 9999 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmpkjvy8co2.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpkjvy8co2.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpkjvy8co2.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  let day = date.match(/^(\\d{2})-(\\d{2})$/)\n  let year = date.match(/^(\\d{4})$/)\n\n  if (month.isNil() || day.isNil() || year.isNil()) {\n    return false\n  }\n\n  let month_num = month.groups()[0]\n  let day_num = day.groups()[0]\n  let year_num = year.groups()[0]\n\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n\n  if (day_num < 1 || day_num > 31) {\n    return false\n  }\n\n  if (month_num == 2) {\n    if (day_num < 1 || day_num > 29) {\n      return false\n    }\n  } else {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n\n  if (year_num < 1 || year_num > 9999) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmphec4ebts.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphec4ebts.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphec4ebts.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphec4ebts.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/)\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphec4ebts.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/)\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphec4ebts.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/)\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmphec4ebts.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmphec4ebts.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphec4ebts.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmphec4ebts.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n  if month.length != 3 || day.length != 2 || year.length != 4 {\n    return false\n  }\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpodaawlqn.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpodaawlqn.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpodaawlqn.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpodaawlqn.rs:23:27\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpodaawlqn.rs:23:35\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpodaawlqn.rs:24:28\n   |\n24 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpodaawlqn.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpodaawlqn.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpodaawlqn.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].to_i\n  let day = date.split(\"-\")[1].to_i\n  let year = date.split(\"-\")[2].to_i\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp6eq9wk6t.rs:22:38\n   |\n22 |   let month = date.split(\"-\")[0].to_i\n   |                                      ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp6eq9wk6t.rs:23:36\n   |\n23 |   let day = date.split(\"-\")[1].to_i\n   |                                    ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].to_i\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp6eq9wk6t.rs:24:37\n   |\n24 |   let year = date.split(\"-\")[2].to_i\n   |                                     ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp6eq9wk6t.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6eq9wk6t.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].to_i\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6eq9wk6t.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].to_i\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp6eq9wk6t.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].to_i\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.empty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  const month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n  const day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n  const year = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n\n  if month && day && year {\n    const month_num = month[1]\n    const day_num = day[1]\n    const year_num = year[1]\n\n    if month_num > 12 || month_num < 1 {\n      return false\n    }\n\n    if days.indexOf(day_num) < 0 || days.indexOf(day_num) > 31 {\n      return false\n    }\n\n    if months.indexOf(month_num) < 0 || months.indexOf(month_num) > 12 {\n      return false\n    }\n\n    if year_num > 9999 || year_num < 1000 {\n      return false\n    }\n\n    return true\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpzi_cbkkb.rs:26:31\n   |\n26 |   const month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzi_cbkkb.rs:26:41\n   |\n26 |   const month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzi_cbkkb.rs:26:51\n   |\n26 |   const month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzi_cbkkb.rs:27:29\n   |\n27 |   const day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzi_cbkkb.rs:27:39\n   |\n27 |   const day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                                       ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzi_cbkkb.rs:27:49\n   |\n27 |   const day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                                                 ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzi_cbkkb.rs:28:30\n   |\n28 |   const year = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                              ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzi_cbkkb.rs:28:40\n   |\n28 |   const year = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzi_cbkkb.rs:28:50\n   |\n28 |   const year = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                                                  ^\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpzi_cbkkb.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpzi_cbkkb",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.is_empty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].to_int()\n  let day = date.split(\"-\")[1].to_int()\n  let year = date.split(\"-\")[2].to_int()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    if month == 2 {\n      return day >= 1 && day <= 29\n    } else {\n      return false\n    }\n  }\n\n  if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    return day < 31\n  }\n\n  if month == 4 || month == 6 || month == 9 || month == 11 {\n    return day < 30\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkqhv150x.rs:23:42\n   |\n23 |   let month = date.split(\"-\")[0].to_int()\n   |                                          ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].to_int()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkqhv150x.rs:24:40\n   |\n24 |   let day = date.split(\"-\")[1].to_int()\n   |                                        ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].to_int()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpkqhv150x.rs:25:41\n   |\n25 |   let year = date.split(\"-\")[2].to_int()\n   |                                         ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpkqhv150x.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].to_int()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpkqhv150x.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].to_int()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpkqhv150x.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].to_int()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0608`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/)\n  if !month {\n    return false\n  }\n\n  let month_num = month.captures[0]\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  let day = date.match(/^\\d{2}-\\d{2}$/)\n  if !day {\n    return false\n  }\n\n  let day_num = day.captures[0]\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  let year = date.match(/^\\d{4}$/)\n  if !year {\n    return false\n  }\n\n  let year_num = year.captures[0]\n  if year_num < 1000 || year_num > 9999 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmptkn240b9.rs:23:28\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/)\n   |                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmptkn240b9.rs:23:34\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/)\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmptkn240b9.rs:23:40\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/)\n   |                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmptkn240b9.rs:33:26\n   |\n33 |   let day = date.match(/^\\d{2}-\\d{2}$/)\n   |                          ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmptkn240b9.rs:33:32\n   |\n33 |   let day = date.match(/^\\d{2}-\\d{2}$/)\n   |                                ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmptkn240b9.rs:43:27\n   |\n43 |   let year = date.match(/^\\d{4}$/)\n   |                           ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmptkn240b9.rs:23:20\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^\\d{2}-\\d{2}-\\d{4}$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmptkn240b9.rs:23:26\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmptkn240b9.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if !month {\n    return false\n  }\n\n  let month_num = parseInt(month[1])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  let day = parseInt(month[2])\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  let year = parseInt(month[3])\n  if year < 1 || year > 9999 {\n    return false\n  }\n\n  let month_name = month[1]\n  if month_name == \"1\" || month_name == \"3\" || month_name == \"5\" || month_name == \"7\" || month_name == \"8\" || month_name == \"10\" || month_name == \"12\" {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month_name == \"4\" || month_name == \"6\" || month_name == \"9\" || month_name == \"11\" {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_name == \"2\" {\n    if day < 1 || day > 28 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp0v0fron1.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp0v0fron1.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp0v0fron1.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp0v0fron1.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp0v0fron1.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp0v0fron1.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.empty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmprefc3dvm.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprefc3dvm.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprefc3dvm.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprefc3dvm.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprefc3dvm.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprefc3dvm.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmprefc3dvm.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmprefc3dvm.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `empty` found for struct `String` in the current scope\n  --> /tmp/tmprefc3dvm.rs:19:11\n   |\n19 |   if date.empty() {\n   |           ^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let month_num = parseInt(month[0])\n  let day = parseInt(month[1])\n  let year = parseInt(month[2])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp8juwu80u.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8juwu80u.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8juwu80u.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp8juwu80u.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp8juwu80u.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp8juwu80u.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let [month, day, year] = date.split(\"-\").map(String::toInt).to_a\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmptmay4r_q.rs:22:67\n   |\n22 |   let [month, day, year] = date.split(\"-\").map(String::toInt).to_a\n   |                                                                   ^ help: add `;` here\n23 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmptmay4r_q.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0599]: no function or associated item named `toInt` found for struct `String` in the current scope\n  --> /tmp/tmptmay4r_q.rs:22:56\n   |\n22 |   let [month, day, year] = date.split(\"-\").map(String::toInt).to_a\n   |                                                        ^^^^^ function or associated item not found in `String`\n\nerror[E0609]: no field `to_a` on type `Map<std::str::Split<'_, &str>, _>`\n  --> /tmp/tmptmay4r_q.rs:22:63\n   |\n22 |   let [month, day, year] = date.split(\"-\").map(String::toInt).to_a\n   |                                                               ^^^^ unknown field\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/).to_s\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])$/).to_s\n  let year = date.match(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])$/).to_s\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n  let month_num = month.match(/^(0[1-9]|1[0-2])$/).to_i\n  let day_num = day.match(/^(0[1-9]|[12][0-9]|3[01])$/).to_i\n  let year_num = year.match(/^(0[1-9]|[12][0-9]|3[01])$/).to_i\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmpyee2z0ni.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/).to_s\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/).to_s\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpyee2z0ni.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/).to_s\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpyee2z0ni.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  let month_num = month.to_i()\n  let day_num = day.to_i()\n  let year_num = year.to_i()\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   let month_num = month.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:25:31\n   |\n25 |   let month_num = month.to_i()\n   |                               ^ help: add `;` here\n26 |   let day_num = day.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:26:27\n   |\n26 |   let day_num = day.to_i()\n   |                           ^ help: add `;` here\n27 |   let year_num = year.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpl9u6aors.rs:27:29\n   |\n27 |   let year_num = year.to_i()\n   |                             ^ help: add `;` here\n28 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpl9u6aors.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpl9u6aors.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpl9u6aors.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  if year < 1900 || year > 2100 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpt5bt0ihb.rs:24:34\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpt5bt0ihb.rs:24:36\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpt5bt0ihb.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpt5bt0ihb.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpt5bt0ihb.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n  if month.length != 3 || day.length != 2 || year.length != 1 {\n    return false\n  }\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmphf3272qz.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphf3272qz.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphf3272qz.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphf3272qz.rs:23:27\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphf3272qz.rs:23:35\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmphf3272qz.rs:24:28\n   |\n24 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmphf3272qz.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmphf3272qz.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmphf3272qz.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if month == null {\n    return false\n  }\n\n  let month_num = parseInt(month[1])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  let day = parseInt(month[2])\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  let year = parseInt(month[3])\n  if year < 1900 || year > 2100 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpzjno5733.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzjno5733.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzjno5733.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpzjno5733.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpzjno5733.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpzjno5733.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].to_i()\n  let day = date.split(\"-\")[1].to_i()\n  let year = date.split(\"-\")[2].to_i()\n  if month < 1 || month > 12 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 31 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  }\n  if year < 1000 || year > 9999 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp10oglf9p.rs:22:40\n   |\n22 |   let month = date.split(\"-\")[0].to_i()\n   |                                        ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp10oglf9p.rs:23:38\n   |\n23 |   let day = date.split(\"-\")[1].to_i()\n   |                                      ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp10oglf9p.rs:24:39\n   |\n24 |   let year = date.split(\"-\")[2].to_i()\n   |                                       ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp10oglf9p.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp10oglf9p.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].to_i()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp10oglf9p.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].to_i()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp10oglf9p.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].to_i()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n    return false\n  }\n\n  let month_num = month.toInt()\n  let day_num = day.toInt()\n  let year_num = year.toInt()\n\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n\n  if (month_num == 2) {\n    if (day_num < 1 || day_num > 29) {\n      return false\n    }\n  } else if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day_num < 1 || day_num > 31) {\n      return false\n    }\n  } else if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpppdnkhon.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpppdnkhon.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpppdnkhon.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpppdnkhon.rs:31:32\n   |\n31 |   let month_num = month.toInt()\n   |                                ^ help: add `;` here\n32 |   let day_num = day.toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpppdnkhon.rs:32:28\n   |\n32 |   let day_num = day.toInt()\n   |                            ^ help: add `;` here\n33 |   let year_num = year.toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpppdnkhon.rs:33:30\n   |\n33 |   let year_num = year.toInt()\n   |                              ^ help: add `;` here\n34 | \n35 |   if (month_num < 1 || month_num > 12) {\n   |   -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpppdnkhon.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpppdnkhon.rs:27:6\n   |\n27 |   if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n   |      ^                                                  ^\n   |\nhelp: remove these parentheses\n   |\n27 -   if (month.isEmpty() || day",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_s\n  let year = date.match(/^(19|20)\\d\\d/).to_s\n\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n\n  let month_num = month.to_i\n  let day_num = day.to_i\n  let year_num = year.to_i\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp8moptgw8.rs:25:34\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_s\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8moptgw8.rs:25:36\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_s\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp8moptgw8.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_s\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp8moptgw8.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp8moptgw8.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].to_i()\n  let day = date.split(\"-\")[1].to_i()\n  let year = date.split(\"-\")[2].to_i()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 31 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  }\n\n  if year < 1000 || year > 9999 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvazs8fmq.rs:23:40\n   |\n23 |   let month = date.split(\"-\")[0].to_i()\n   |                                        ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpvazs8fmq.rs:24:38\n   |\n24 |   let day = date.split(\"-\")[1].to_i()\n   |                                      ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpvazs8fmq.rs:25:39\n   |\n25 |   let year = date.split(\"-\")[2].to_i()\n   |                                       ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpvazs8fmq.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpvazs8fmq.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].to_i()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpvazs8fmq.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].to_i()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpvazs8fmq.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].to_i()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  const month = date.split(\"-\")[0]\n  const day = date.split(\"-\")[1]\n  const year = date.split(\"-\")[2]\n\n  if month.length != 2 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if !(month === \"02\" && day === \"29\") {\n    return true\n  }\n\n  if !(month === \"02\" && day === \"30\") {\n    return true\n  }\n\n  if !(month === \"02\" && day === \"31\") {\n    return true\n  }\n\n  if !(month === \"04\" && day === \"30\") {\n    return true\n  }\n\n  if !(month === \"04\" && day === \"31\") {\n    return true\n  }\n\n  if !(month === \"06\" && day === \"30\") {\n    return true\n  }\n\n  if !(month === \"06\" && day === \"31\") {\n    return true\n  }\n\n  if !(month === \"09\" && day === \"30\") {\n    return true\n  }\n\n  if !(month === \"09\" && day === \"31\") {\n    return true\n  }\n\n  if !(month === \"11\" && day === \"30\") {\n    return true\n  }\n\n  if !(month === \"11\" && day === \"31\") {\n    return true\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpdnp5c55p.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpdnp5c55p.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 | \n26 |   const month = date.split(\"-\")[0]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpdnp5c55p.rs:26:35\n   |\n26 |   const month = date.split(\"-\")[0]\n   |                                   ^ help: add `;` here\n27 |   const day = date.split(\"-\")[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpdnp5c55p.rs:27:33\n   |\n27 |   const day = date.split(\"-\")[1]\n   |                                 ^ help: add `;` here\n28 |   const year = date.split(\"-\")[2]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdnp5c55p.rs:28:34\n   |\n28 |   const year = date.split(\"-\")[2]\n   |                                  ^ help: add `;` here\n29 | \n30 |   if month.length != 2 || day.length != 2 || year.length != 4 {\n   |   -- unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpdnp5c55p.rs:42:14\n   |\n42 |   if !(month === \"02\" && day === \"29\") {\n   |              ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpdnp5c55p.rs:42:30\n   |\n42 |   if !(month === \"02\" && day === \"29\") {\n   |                              ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpdnp5c55p.rs:46:14\n   |\n46 |   if !(month === \"02\" && day === \"30\") {\n   |      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if !month {\n    return false\n  }\n\n  let month_num = month[1]\n  let day = month[2]\n  let year = month[3]\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp0zqifzgb.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp0zqifzgb.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp0zqifzgb.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp0zqifzgb.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp0zqifzgb.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp0zqifzgb.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n  if !month {\n    return false\n  }\n\n  let days = month.captures[2]\n  let month_num = month.captures[1]\n  let year = month.captures[3]\n\n  let month_num_int = parseInt(month_num)\n  let days_int = parseInt(days)\n\n  if month_num_int < 1 || month_num_int > 12 {\n    return false\n  }\n\n  if days_int < 1 || days_int > 31 {\n    return false\n  }\n\n  if month_num_int == 2 {\n    if days_int < 1 || days_int > 29 {\n      return false\n    }\n  } else if month_num_int == 1 || month_num_int == 3 || month_num_int == 5 || month_num_int == 7 || month_num_int == 8 || month_num_int == 10 || month_num_int == 12 {\n    if days_int < 1 || days_int > 30 {\n      return false\n    }\n  } else {\n    if days_int < 1 || days_int > 31 {\n      return false\n    }\n  }\n\n  let year_int = parseInt(year)\n  if year_int < 1900 || year_int > 2100 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmpu8i1437g.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpu8i1437g.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpu8i1437g.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  const year = \"2000\"\n\n  const month = date.split(\"-\")[0]\n  const day = date.split(\"-\")[1]\n  const year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if !year.includes(year) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpkt5brj8l.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpkt5brj8l.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 |   const year = \"2000\"\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpkt5brj8l.rs:25:22\n   |\n25 |   const year = \"2000\"\n   |                      ^ help: add `;` here\n26 | \n27 |   const month = date.split(\"-\")[0]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpkt5brj8l.rs:27:35\n   |\n27 |   const month = date.split(\"-\")[0]\n   |                                   ^ help: add `;` here\n28 |   const day = date.split(\"-\")[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpkt5brj8l.rs:28:33\n   |\n28 |   const day = date.split(\"-\")[1]\n   |                                 ^ help: add `;` here\n29 |   const year = date.split(\"-\")[2]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpkt5brj8l.rs:29:34\n   |\n29 |   const year = date.split(\"-\")[2]\n   |                                  ^ help: add `;` here\n30 | \n31 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0428]: the name `year` is defined multiple times\n  --> /tmp/tmpkt5brj8l.rs:29:3\n   |\n25 |   const year = \"2000\"\n   |   ------------------- previous definition of the value `year` here\n...\n29 |   const year = date.split(\"-\")[2]\n   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `year` redefined here\n   |\n   = note: `year` must be defined only once in the value namespace of this block\n\nerr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  if month.length != 2 {\n    return false\n  }\n  if day.length != 2 {\n    return false\n  }\n  if year.length != 4 {\n    return false\n  }\n  let month_num = parseInt(month)\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  let day_num = parseInt(day)\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp78odn7dv.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp78odn7dv.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp78odn7dv.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp78odn7dv.rs:34:34\n   |\n34 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n35 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp78odn7dv.rs:38:30\n   |\n38 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n39 |   if month_num == 2 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp78odn7dv.rs:34:19\n   |\n34 |   let month_num = parseInt(month)\n   |                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp78odn7dv.rs:38:17\n   |\n38 |   let day_num = parseInt(day)\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp78odn7dv.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp78odn7dv.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::S",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n  let years = [\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"]\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if !years.includes(year) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdnuenlu9.rs:23:58\n   |\n23 |   let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                          ^ help: add `;` here\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21...\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdnuenlu9.rs:24:200\n   |\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n   |                                                                                                                                                                                                        ^ help: add `;` here\n25 |   let years = [\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"202...\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdnuenlu9.rs:25:343\n   |\n25 |   let years = [\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"]\n   |                                                                                                                                                                                                                                                                                                                                                       ^ help: add `;` here\n26 | \n27 |   let month = date.split(\"-\")[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyw",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.is_empty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{1,2})-(\\d{1,2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpex09_c4u.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpex09_c4u.rs:23:39\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                                       ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpex09_c4u.rs:23:49\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                                                 ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpex09_c4u.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{1,2})-(\\d{1,2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpex09_c4u.rs:24:37\n   |\n24 |   let day = date.match(/^(\\d{1,2})-(\\d{1,2})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpex09_c4u.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpex09_c4u.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpex09_c4u.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror: aborting due to 8 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let year = \"2000\"\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if !year.includes(year) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7t4q4or0.rs:23:58\n   |\n23 |   let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                          ^ help: add `;` here\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7t4q4or0.rs:24:86\n   |\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                      ^ help: add `;` here\n25 |   let year = \"2000\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7t4q4or0.rs:25:20\n   |\n25 |   let year = \"2000\"\n   |                    ^ help: add `;` here\n26 | \n27 |   let month = date.split(\"-\")[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7t4q4or0.rs:27:33\n   |\n27 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n28 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7t4q4or0.rs:28:31\n   |\n28 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n29 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp7t4q4or0.rs:29:32\n   |\n29 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n30 | \n31 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp7t4q4or0.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp7t4q4or0.rs:27:15\n   |\n27 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n  if month == nil {\n    return false\n  }\n  let month_num = parseInt(month[0])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  let day = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10[0-9]|11[0-9]|12[0-9])$/).groups()\n  if day == nil {\n    return false\n  }\n  let day_num = parseInt(day[0])\n  if month_num == 2 && day_num < 1 || month_num != 2 && day_num < 1 || month_num == 2 && day_num > 29 || month_num != 2 && day_num > 30 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmp7y5q4aka.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp7y5q4aka.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp7y5q4aka.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)\n  if month == null {\n    return false\n  }\n\n  let month_num = parseInt(month[1])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  let day = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)\n  if day == null {\n    return false\n  }\n\n  let day_num = parseInt(day[2])\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  let year = parseInt(date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)[3])\n  if year < 1000 || year > 9999 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpykszbetz.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpykszbetz.rs:23:38\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpykszbetz.rs:23:47\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)\n   |                                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpykszbetz.rs:33:27\n   |\n33 |   let day = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpykszbetz.rs:33:36\n   |\n33 |   let day = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)\n   |                                    ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpykszbetz.rs:33:45\n   |\n33 |   let day = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpykszbetz.rs:43:37\n   |\n43 |   let year = parseInt(date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)[3])\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpykszbetz.rs:43:46\n   |\n43 |   let year = parseInt(date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)[3])\n   |                                              ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpykszbetz.rs:43:55\n   |\n43 |   let year = parseInt(date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)[3])\n   |                                                       ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpykszbetz.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{1,2})(\\D{1,2})(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpyk",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n  if month.length() != 2 {\n    return false\n  }\n  if day.length() != 2 {\n    return false\n  }\n  if year.length() != 4 {\n    return false\n  }\n  if !is_valid_month(month) {\n    return false\n  }\n  if !is_valid_day(day) {\n    return false\n  }\n  if !is_valid_year(year) {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2_4f_c1k.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2_4f_c1k.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2_4f_c1k.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `is_valid_month` in this scope\n  --> /tmp/tmp2_4f_c1k.rs:37:7\n   |\n37 |   if !is_valid_month(month) {\n   |       ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_day` in this scope\n  --> /tmp/tmp2_4f_c1k.rs:40:7\n   |\n40 |   if !is_valid_day(day) {\n   |       ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_year` in this scope\n  --> /tmp/tmp2_4f_c1k.rs:43:7\n   |\n43 |   if !is_valid_year(year) {\n   |       ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp2_4f_c1k.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp2_4f_c1k.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp2_4f_c1k.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp2_4f_c1k.rs:24:14\n   |\n24 |   let year = date.sp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpkz_sma6d.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpkz_sma6d.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpkz_sma6d.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:22:41\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:23:39\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdgkl7sss.rs:24:40\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpdgkl7sss.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.is_empty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i()\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[0-1])/).to_i()\n  let year = date.match(/^(19|20)\\d\\d/).to_i()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    if month == 2 {\n      if day < 1 || day > 29 {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n\n  if year < 1900 || year > 2100 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpzcm20ran.rs:25:34\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i()\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpzcm20ran.rs:25:36\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i()\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpzcm20ran.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpzcm20ran.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i()\n   |                          ^ expected expression\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let [month, day, year] = date.split(\"-\")\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcfbnxmtj.rs:22:43\n   |\n22 |   let [month, day, year] = date.split(\"-\")\n   |                                           ^ help: add `;` here\n23 |   let month_num = parseInt(month)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpcfbnxmtj.rs:23:34\n   |\n23 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n24 |   let day_num = parseInt(day)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpcfbnxmtj.rs:24:30\n   |\n24 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n25 |   let year_num = parseInt(year)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpcfbnxmtj.rs:25:32\n   |\n25 |   let year_num = parseInt(year)\n   |                                ^ help: add `;` here\n26 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpcfbnxmtj.rs:23:19\n   |\n23 |   let month_num = parseInt(month)\n   |                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpcfbnxmtj.rs:24:17\n   |\n24 |   let day_num = parseInt(day)\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpcfbnxmtj.rs:25:18\n   |\n25 |   let year_num = parseInt(year)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpcfbnxmtj.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0529]: expected an array or slice, found `std::str::Split<'_, &str>`\n  --> /tmp/tmpcfbnxmtj.rs:22:7\n   |\n22 |   let [month, day, year] = date.split(\"-\")\n   |       ^^^^^^^^^^^^^^^^^^ pattern cannot match with input type `std::str::Split<'_, &str>`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:22:41\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:23:39\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdgkl7sss.rs:24:40\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpdgkl7sss.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  if year < 1900 || year > 2100 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp_td10o9o.rs:25:34\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp_td10o9o.rs:25:36\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp_td10o9o.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp_td10o9o.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp_td10o9o.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  if year < 1900 || year > 2100 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpyuhl80er.rs:25:34\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpyuhl80er.rs:25:36\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpyuhl80er.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpyuhl80er.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpyuhl80er.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:23:41\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:24:39\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoccak8xg.rs:25:40\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpoccak8xg.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n  if (month < 1 || month > 12) {\n    return false\n  }\n  if (day < 1 || day > 31) {\n    return false\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpp3j3h5x_.rs:24:34\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpp3j3h5x_.rs:24:36\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpp3j3h5x_.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpp3j3h5x_.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpp3j3h5x_.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpp3j3h5x_.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n  let day = date.match(/^\\d{2}-\\d{2}$/).to_s\n  let year = date.match(/^\\d{4}$/).to_s\n\n  let month_num = month.match(/^\\d{2}$/).to_i\n  let day_num = day.match(/^\\d{2}$/).to_i\n  let year_num = year.match(/^\\d{4}$/).to_i\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  if year_num < 1000 || year_num > 9999 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpy7vqn_tq.rs:23:28\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpy7vqn_tq.rs:23:34\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpy7vqn_tq.rs:23:40\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpy7vqn_tq.rs:24:26\n   |\n24 |   let day = date.match(/^\\d{2}-\\d{2}$/).to_s\n   |                          ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpy7vqn_tq.rs:24:32\n   |\n24 |   let day = date.match(/^\\d{2}-\\d{2}$/).to_s\n   |                                ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpy7vqn_tq.rs:25:27\n   |\n25 |   let year = date.match(/^\\d{4}$/).to_s\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpy7vqn_tq.rs:27:33\n   |\n27 |   let month_num = month.match(/^\\d{2}$/).to_i\n   |                                 ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpy7vqn_tq.rs:28:29\n   |\n28 |   let day_num = day.match(/^\\d{2}$/).to_i\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpy7vqn_tq.rs:29:31\n   |\n29 |   let year_num = year.match(/^\\d{4}$/).to_i\n   |                               ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpy7vqn_tq.rs:23:20\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpy7vqn_tq.rs:23:26\n   |\n23 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).to_s\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:22:19\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:22:25\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:22:31\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:25:19\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:25:25\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:25:31\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:28:19\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:28:25\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:28:31\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:31:19\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:31:25\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:31:31\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:34:19\n   |\n34 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknow",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  if month.length != 2 {\n    return false\n  }\n  if day.length != 2 {\n    return false\n  }\n  if year.length != 4 {\n    return false\n  }\n  if !is_valid_month(month) {\n    return false\n  }\n  if !is_valid_day(day) {\n    return false\n  }\n  if !is_valid_year(year) {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp1gtpl7zg.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp1gtpl7zg.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1gtpl7zg.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `is_valid_month` in this scope\n  --> /tmp/tmp1gtpl7zg.rs:34:7\n   |\n34 |   if !is_valid_month(month) {\n   |       ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_day` in this scope\n  --> /tmp/tmp1gtpl7zg.rs:37:7\n   |\n37 |   if !is_valid_day(day) {\n   |       ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_year` in this scope\n  --> /tmp/tmp1gtpl7zg.rs:40:7\n   |\n40 |   if !is_valid_year(year) {\n   |       ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp1gtpl7zg.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp1gtpl7zg.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp1gtpl7zg.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp1gtpl7zg.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2]\n   |              ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n  let year = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n\n  if (month.length != 3 || day.length != 3 || year.length != 3) {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n\n  if (month_num == 2) {\n    if (day_num < 1 || day_num > 29) {\n      return false\n    }\n  } else if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day_num < 1 || day_num > 31) {\n      return false\n    }\n  } else if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n\n  if (year_num < 1000 || year_num > 9999) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmprr1l3nbi.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprr1l3nbi.rs:23:39\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                                       ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprr1l3nbi.rs:23:49\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                                                 ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprr1l3nbi.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprr1l3nbi.rs:24:37\n   |\n24 |   let day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprr1l3nbi.rs:24:47\n   |\n24 |   let day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprr1l3nbi.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprr1l3nbi.rs:25:38\n   |\n25 |   let year = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmprr1l3nbi.rs:25:48\n   |\n25 |   let year = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                                                ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmprr1l3nbi.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/).groups()\n   |              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if (month == null) {\n    return false\n  }\n  let month_num = month[1]\n  let day = month[2]\n  let year = month[3]\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n  if (day < 1 || day > 31) {\n    return false\n  }\n  if (month_num == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  } else if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  } else if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  if (year < 1000 || year > 9999) {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpeza8dz7b.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpeza8dz7b.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpeza8dz7b.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpeza8dz7b.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpeza8dz7b.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpeza8dz7b.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpeza8dz7b.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let year = \"2000\"\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !(months.includes(month) && days.includes(day)) {\n    return false\n  }\n\n  if !(month >= 1 && month <= 12) {\n    return false\n  }\n\n  if !(day >= 1 && day <= 31) {\n    return false\n  }\n\n  if !(year >= \"2000\" && year <= \"2099\") {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpotvu17vn.rs:23:58\n   |\n23 |   let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                          ^ help: add `;` here\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpotvu17vn.rs:24:86\n   |\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                      ^ help: add `;` here\n25 |   let year = \"2000\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpotvu17vn.rs:25:20\n   |\n25 |   let year = \"2000\"\n   |                    ^ help: add `;` here\n26 | \n27 |   let month = date.split(\"-\")[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpotvu17vn.rs:27:33\n   |\n27 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n28 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpotvu17vn.rs:28:31\n   |\n28 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n29 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpotvu17vn.rs:29:32\n   |\n29 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n30 | \n31 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpotvu17vn.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpotvu17vn.rs:27:15\n   |\n27 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpkz_sma6d.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpkz_sma6d.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpkz_sma6d.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let [month, day, year] = date.split(\"-\")\n  let [_, _, _] = year.split(\"-\")\n  let [_, _, _] = month.split(\"-\")\n  if month.length != 2 {\n    return false\n  }\n  if day.length != 2 {\n    return false\n  }\n  if month.to_i < 1 || month.to_i > 12 {\n    return false\n  }\n  if day.to_i < 1 || day.to_i > 31 {\n    return false\n  }\n  if month.to_i == 2 {\n    if day.to_i < 1 || day.to_i > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpty127wfv.rs:22:43\n   |\n22 |   let [month, day, year] = date.split(\"-\")\n   |                                           ^ help: add `;` here\n23 |   let [_, _, _] = year.split(\"-\")\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpty127wfv.rs:23:34\n   |\n23 |   let [_, _, _] = year.split(\"-\")\n   |                                  ^ help: add `;` here\n24 |   let [_, _, _] = month.split(\"-\")\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpty127wfv.rs:24:35\n   |\n24 |   let [_, _, _] = month.split(\"-\")\n   |                                   ^ help: add `;` here\n25 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpty127wfv.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0529]: expected an array or slice, found `std::str::Split<'_, &str>`\n  --> /tmp/tmpty127wfv.rs:22:7\n   |\n22 |   let [month, day, year] = date.split(\"-\")\n   |       ^^^^^^^^^^^^^^^^^^ pattern cannot match with input type `std::str::Split<'_, &str>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0529, E0599.\nFor more information about an error, try `rustc --explain E0529`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n  let day = date.match(/^(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n  let year = date.match(/^(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n\n  if month[0] < 1 || month[0] > 12 {\n    return false\n  }\n\n  if month[1] < 1 || month[1] > 31 {\n    return false\n  }\n\n  if month[2] < 1 || month[2] > 31 {\n    return false\n  }\n\n  if month[3] < 1 || month[3] > 12 {\n    return false\n  }\n\n  if day[0] < 1 || day[0] > 31 {\n    return false\n  }\n\n  if day[1] < 1 || day[1] > 30 {\n    return false\n  }\n\n  if day[2] < 1 || day[2] > 29 {\n    return false\n  }\n\n  if year[0] < 1 || year[0] > 9999 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmp8a36jwyi.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp8a36jwyi.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp8a36jwyi.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:23:41\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:24:39\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoccak8xg.rs:25:40\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpoccak8xg.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n\n  if (month < 1 || month > 12) {\n    return false\n  }\n\n  if (day < 1 || day > 31) {\n    return false\n  }\n\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n\n  if (year < 1900 || year > 2100) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmputg_j1u2.rs:25:34\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmputg_j1u2.rs:25:36\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmputg_j1u2.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmputg_j1u2.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmputg_j1u2.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmputg_j1u2.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpd9u8phyh.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpd9u8phyh.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpd9u8phyh.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpd9u8phyh.rs:39:34\n   |\n39 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n40 |   let day_num = parseInt(day)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpd9u8phyh.rs:40:30\n   |\n40 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n41 |   let year_num = parseInt(year)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpd9u8phyh.rs:41:32\n   |\n41 |   let year_num = parseInt(year)\n   |                                ^ help: add `;` here\n42 | \n43 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpd9u8phyh.rs:39:19\n   |\n39 |   let month_num = parseInt(month)\n   |                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpd9u8phyh.rs:40:17\n   |\n40 |   let day_num = parseInt(day)\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpd9u8phyh.rs:41:18\n   |\n41 |   let year_num = parseInt(year)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-9]\\d|20\\d{2})/)\n  if !month {\n    return false\n  }\n  let month_num = parseInt(month[1])\n  let day = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/)\n  if !day {\n    return false\n  }\n  let day_num = parseInt(day[1])\n  let year = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-9]\\d|20\\d{2})/)\n  if !year {\n    return false\n  }\n  let year_num = parseInt(year[3])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpki8owm0o.rs:22:84\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-9]\\d|20\\d{2})/)\n   |                                                                                    ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpki8owm0o.rs:22:89\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-9]\\d|20\\d{2})/)\n   |                                                                                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpki8owm0o.rs:32:83\n   |\n32 |   let year = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-9]\\d|20\\d{2})/)\n   |                                                                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpki8owm0o.rs:32:88\n   |\n32 |   let year = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-9]\\d|20\\d{2})/)\n   |                                                                                        ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpki8owm0o.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-9]\\d|20\\d{2})/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-9]\\d|20\\d{2})/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpki8owm0o.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-9]\\d|20\\d{2})/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpki8owm0o.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 7 previous errors\n\nFor more information about th",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n  if (month.length != 3) {\n    return false\n  }\n  let month_num = parseInt(month[0])\n  let day = parseInt(month[1])\n  let year = parseInt(month[2])\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n  if (day < 1 || day > 31) {\n    return false\n  }\n  if (month_num == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  }\n  if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmp6gdnjcou.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp6gdnjcou.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6gdnjcou.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp6gdnjcou.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.is_empty() {\n    return false\n  }\n  let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n  let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n  let year = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[4]\n  if month.is_empty() || day.is_empty() || year.is_empty() {\n    return false\n  }\n  let month_num = month.to_int()\n  let day_num = day.to_int()\n  let year_num = year.to_int()\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp8yelc_o_.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8yelc_o_.rs:22:40\n   |\n22 |   let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n   |                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8yelc_o_.rs:22:44\n   |\n22 |   let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n   |                                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8yelc_o_.rs:22:52\n   |\n22 |   let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n   |                                                    ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8yelc_o_.rs:22:55\n   |\n22 |   let month = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[1]\n   |                                                       ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8yelc_o_.rs:23:27\n   |\n23 |   let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8yelc_o_.rs:23:38\n   |\n23 |   let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8yelc_o_.rs:23:42\n   |\n23 |   let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n   |                                          ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8yelc_o_.rs:23:50\n   |\n23 |   let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n   |                                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8yelc_o_.rs:23:53\n   |\n23 |   let day = date.match(/^(\\d{1,2})(-|\\/)(\\d{1,2})\\2(\\d{4})$/).captures[3]\n   |                                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp8",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:22:41\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:23:39\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdgkl7sss.rs:24:40\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpdgkl7sss.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n  if month.length() != 2 {\n    return false\n  }\n  if day.length() != 2 {\n    return false\n  }\n  if year.length() != 4 {\n    return false\n  }\n  if month.to_i() < 1 || month.to_i() > 12 {\n    return false\n  }\n  if day.to_i() < 1 || day.to_i() > 31 {\n    if month.to_i() == 2 {\n      if day.to_i() < 1 || day.to_i() > 29 {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n  if month.to_i() == 4 || month.to_i() == 6 || month.to_i() == 9 || month.to_i() == 11 {\n    if day.to_i() < 1 || day.to_i() > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzs5u70to.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzs5u70to.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpzs5u70to.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpzs5u70to.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpzs5u70to.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpzs5u70to.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpzs5u70to.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2]\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n  if !month {\n    return false\n  }\n\n  let month_num = month[1]\n  let month_name = month[2]\n  let year = month[3]\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_name == \"1\" || month_name == \"3\" || month_name == \"5\" || month_name == \"7\" || month_name == \"8\" || month_name == \"10\" || month_name == \"12\" {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_name == \"4\" || month_name == \"6\" || month_name == \"9\" || month_name == \"11\" {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else if month_name == \"2\" {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  }\n\n  if year < 1900 || year > 2020 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmptdsg9fiz.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmptdsg9fiz.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmptdsg9fiz.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const date_parts = date.split(\"-\")\n  const month = parseInt(date_parts[0])\n  const day = parseInt(date_parts[1])\n  const year = parseInt(date_parts[2])\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpgued75ca.rs:23:37\n   |\n23 |   const date_parts = date.split(\"-\")\n   |                                     ^ help: add `;` here\n24 |   const month = parseInt(date_parts[0])\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpgued75ca.rs:24:40\n   |\n24 |   const month = parseInt(date_parts[0])\n   |                                        ^ help: add `;` here\n25 |   const day = parseInt(date_parts[1])\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpgued75ca.rs:25:38\n   |\n25 |   const day = parseInt(date_parts[1])\n   |                                      ^ help: add `;` here\n26 |   const year = parseInt(date_parts[2])\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpgued75ca.rs:26:39\n   |\n26 |   const year = parseInt(date_parts[2])\n   |                                       ^ help: add `;` here\n27 | \n28 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpgued75ca.rs:23:22\n   |\n23 |   const date_parts = date.split(\"-\")\n   |   ----------------   ^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let date_parts`\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpgued75ca.rs:24:17\n   |\n24 |   const month = parseInt(date_parts[0])\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpgued75ca.rs:25:15\n   |\n25 |   const day = parseInt(date_parts[1])\n   |               ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpgued75ca.rs:26:16\n   |\n26 |   const year = parseInt(date_parts[2])\n   |                ^^^^^^^^ not found in this scope\n\nerror: missing type for `const` item\n  --> /tmp/tmpgued75ca.rs:23:9\n   |\n23 |   const date_parts = date.split(\"-\")\n   |         ^^^^^^^^^^ help: prov",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  const year = \"2000\"\n  const month = date.split(\"-\")[0]\n  const day = date.split(\"-\")[1]\n  if month.length != 2 || day.length != 2 || year.length != 4 {\n    return false\n  }\n  if !months.includes(month) {\n    return false\n  }\n  if !days.includes(day) {\n    return false\n  }\n  if month == \"02\" {\n    if day < \"01\" || day > \"29\" {\n      return false\n    }\n  } else {\n    if day < \"01\" || day > \"30\" {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpicc6ssj_.rs:22:60\n   |\n22 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n23 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpicc6ssj_.rs:23:88\n   |\n23 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n24 |   const year = \"2000\"\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpicc6ssj_.rs:24:22\n   |\n24 |   const year = \"2000\"\n   |                      ^ help: add `;` here\n25 |   const month = date.split(\"-\")[0]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpicc6ssj_.rs:25:35\n   |\n25 |   const month = date.split(\"-\")[0]\n   |                                   ^ help: add `;` here\n26 |   const day = date.split(\"-\")[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpicc6ssj_.rs:26:33\n   |\n26 |   const day = date.split(\"-\")[1]\n   |                                 ^ help: add `;` here\n27 |   if month.length != 2 || day.length != 2 || year.length != 4 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpicc6ssj_.rs:25:17\n   |\n25 |   const month = date.split(\"-\")[0]\n   |   -----------   ^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let month`\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpicc6ssj_.rs:26:15\n   |\n26 |   const day = date.split(\"-\")[1]\n   |   ---------   ^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let day`\n\nerror: missing type for `const` item\n  --> /tmp/tmpicc6ssj_.rs:22:9\n   |\n22 |   const mo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n  let year = \"20\"\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  if month.length != 2 {\n    return false\n  }\n  if day.length != 2 {\n    return false\n  }\n  if month.to_i() < 1 || month.to_i() > 12 {\n    return false\n  }\n  if days.indexOf(day) == -1 {\n    return false\n  }\n  if months.indexOf(month) == -1 {\n    return false\n  }\n  if year.length != 4 {\n    return false\n  }\n  if year.to_i() < 1000 || year.to_i() > 9999 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0lh4l1zz.rs:22:58\n   |\n22 |   let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                          ^ help: add `;` here\n23 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21...\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp0lh4l1zz.rs:23:200\n   |\n23 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n   |                                                                                                                                                                                                        ^ help: add `;` here\n24 |   let year = \"20\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp0lh4l1zz.rs:24:18\n   |\n24 |   let year = \"20\"\n   |                  ^ help: add `;` here\n25 |   let month = date.split(\"-\")[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp0lh4l1zz.rs:25:33\n   |\n25 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n26 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp0lh4l1zz.rs:26:31\n   |\n26 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp0lh4l1zz.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp0lh4l1zz.rs:25:15\n   |\n25 |   let month = date.split(\"-\")[0]\n   |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(1)\n  let day = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(2)\n  let year = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(3)\n  let month_num = month.match(/^\\d{2}$/).get(0)\n  let day_num = day.match(/^\\d{2}$/).get(0)\n  let year_num = year.match(/^\\d{4}$/).get(0)\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  }\n  if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:22:19\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:22:25\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:22:31\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:25:28\n   |\n25 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(1)\n   |                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:25:34\n   |\n25 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(1)\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:25:40\n   |\n25 |   let month = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(1)\n   |                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:26:26\n   |\n26 |   let day = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(2)\n   |                          ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:26:32\n   |\n26 |   let day = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(2)\n   |                                ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:26:38\n   |\n26 |   let day = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(2)\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:27:27\n   |\n27 |   let year = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(3)\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:27:33\n   |\n27 |   let year = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(3)\n   |                                 ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.rs:27:39\n   |\n27 |   let year = date.match(/^\\d{2}-\\d{2}-\\d{4}$/).get(3)\n   |                                       ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpizavatvx.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if (month) {\n    let month_num = parseInt(month[1])\n    let day = parseInt(month[2])\n    let year = parseInt(month[3])\n\n    if (month_num < 1 || month_num > 12) {\n      return false\n    }\n\n    if (day < 1 || day > 31) {\n      return false\n    }\n\n    if (month_num == 2) {\n      if (day < 1 || day > 29) {\n        return false\n      }\n    } else if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n      if (day < 1 || day > 30) {\n        return false\n      }\n    } else {\n      if (day < 1 || day > 31) {\n        return false\n      }\n    }\n\n    if (year < 1900 || year > 2100) {\n      return false\n    }\n  } else {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpeb1goffa.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpeb1goffa.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpeb1goffa.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpeb1goffa.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpeb1goffa.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpeb1goffa.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpeb1goffa.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  let year = date.split(\"-\")[2]\n  let month = date.split(\"-\")[1]\n  let day = date.split(\"-\")[0]\n  if (month.length != 2) {\n    return false\n  }\n  if (day.length != 2) {\n    return false\n  }\n  if (month.to_i() < 1 || month.to_i() > 12) {\n    return false\n  }\n  if (day.to_i() < 1 || day.to_i() > 31) {\n    return false\n  }\n  if (months.includes(month)) {\n    return true\n  }\n  if (days.includes(day)) {\n    return true\n  }\n  if (month.to_i() == 2) {\n    if (day.to_i() < 1 || day.to_i() > 29) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjt2lx7zy.rs:22:58\n   |\n22 |   let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                          ^ help: add `;` here\n23 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjt2lx7zy.rs:23:86\n   |\n23 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                      ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjt2lx7zy.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   let month = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjt2lx7zy.rs:25:33\n   |\n25 |   let month = date.split(\"-\")[1]\n   |                                 ^ help: add `;` here\n26 |   let day = date.split(\"-\")[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjt2lx7zy.rs:26:31\n   |\n26 |   let day = date.split(\"-\")[0]\n   |                               ^ help: add `;` here\n27 |   if (month.length != 2) {\n   |   -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjt2lx7zy.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjt2lx7zy.rs:27:6\n   |\n27 |   if (month.length != 2) {\n   |      ^                 ^\n   |\nhelp: remove these parentheses\n   |\n27 -   if (month.length != 2) {\n27 +   if month.length != 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjt2lx7zy.rs:30:6\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.length() == 0) {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n  if (month) {\n    let days = month[2].match(/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/)\n    if (days) {\n      let month_num = parseInt(month[1])\n      let days_num = parseInt(days[1])\n      if (month_num < 1 || month_num > 12) {\n        return false\n      }\n      if (days_num < 1 || days_num > 31) {\n        return false\n      }\n      if (month_num == 2 && days_num < 29) {\n        return false\n      }\n      if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n        if (days_num < 1 || days_num > 30) {\n          return false\n        }\n      }\n      if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n        if (days_num < 1 || days_num > 29) {\n          return false\n        }\n      }\n      return true\n    }\n  }\n  return false\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmpu3jfomrb.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpu3jfomrb.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/)\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpu3jfomrb.rs:19:6\n   |\n19 |   if (date.length() == 0) {\n   |      ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.length() == 0) {\n19 +   if date.length() == 0 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpu3jfomrb.rs:19:12\n   |\n19 |   if (date.length() == 0) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpkz_sma6d.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpkz_sma6d.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpkz_sma6d.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  let day = date.match(/^(\\d{2})-(\\d{2})$/)\n  let year = date.match(/^(\\d{4})$/)\n\n  if (month.isNone()) {\n    return false\n  }\n\n  if (month.size() != 3) {\n    return false\n  }\n\n  if (day.isNone()) {\n    return false\n  }\n\n  if (day.size() != 2) {\n    return false\n  }\n\n  if (year.isNone()) {\n    return false\n  }\n\n  if (year.size() != 4) {\n    return false\n  }\n\n  let month_num = month.captured(1)\n  let day_num = day.captured(1)\n  let year_num = year.captured(1)\n\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n\n  if (day_num < 1 || day_num > 31) {\n    return false\n  }\n\n  if (month_num == 2) {\n    if (day_num < 1 || day_num > 29) {\n      return false\n    }\n  } else {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n\n  if (year_num < 1 || year_num > 9999) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpkuab1jf1.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkuab1jf1.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkuab1jf1.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkuab1jf1.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/)\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkuab1jf1.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/)\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkuab1jf1.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/)\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpkuab1jf1.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpkuab1jf1.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkuab1jf1.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpkuab1jf1.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  const year = \"2000\"\n\n  const [month, day, year] = date.split(\"-\")\n\n  if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n    return false\n  }\n\n  if (month.length() != 2) {\n    return false\n  }\n\n  if (day.length() != 2) {\n    return false\n  }\n\n  if (year.length() != 4) {\n    return false\n  }\n\n  if (months.indexOf(month) == -1) {\n    return false\n  }\n\n  if (days.indexOf(day) == -1) {\n    return false\n  }\n\n  if (year.length() != 4) {\n    return false\n  }\n\n  if (year.length() != 4) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpzrakbsv5.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpzrakbsv5.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 |   const year = \"2000\"\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpzrakbsv5.rs:25:22\n   |\n25 |   const year = \"2000\"\n   |                      ^ help: add `;` here\n26 | \n27 |   const [month, day, year] = date.split(\"-\")\n   |   ----- unexpected token\n\nerror: expected identifier, found `[`\n  --> /tmp/tmpzrakbsv5.rs:27:9\n   |\n27 |   const [month, day, year] = date.split(\"-\")\n   |         ^ expected identifier\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzrakbsv5.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror: missing type for `const` item\n  --> /tmp/tmpzrakbsv5.rs:23:9\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |         ^^^^^^ help: provide a type for the constant: `months: [&str; 7]`\n\nerror: missing type for `const` item\n  --> /tmp/tmpzrakbsv5.rs:24:9\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |         ^^^^ help: provide a type for the constant: `days: [&str; 12]`\n\nerror: missing type for `const` item\n  --> /tmp/tmpzrakbsv5.rs:25:9\n   |\n25 |   const year = \"2000\"\n   |         ^^^^ help: provide a type for the constant: `year: &str`\n\nerror[E0599]: no",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:22:19\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:22:25\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:22:31\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:25:19\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:25:25\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:25:31\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:28:19\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:28:25\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:28:31\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:31:19\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:31:25\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:31:31\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{2}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpd02edy00.rs:34:19\n   |\n34 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknow",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = month[0]\n  let day_num = day[0]\n  let year_num = year[0]\n\n  if month_num < \"0\" || month_num > \"9\" {\n    return false\n  }\n\n  if day_num < \"0\" || day_num > \"9\" {\n    return false\n  }\n\n  if year_num < \"0\" || year_num > \"9\" {\n    return false\n  }\n\n  let month_num_int = month_num - \"0\"\n  let day_num_int = day_num - \"0\"\n  let year_num_int = year_num - \"0\"\n\n  if month_num_int < 1 || month_num_int > 12 {\n    return false\n  }\n\n  if day_num_int < 1 || day_num_int > 31 {\n    return false\n  }\n\n  if month_num_int == 2 {\n    if day_num_int < 1 || day_num_int > 29 {\n      return false\n    }\n  } else if month_num_int == 1 || month_num_int == 3 || month_num_int == 5 || month_num_int == 7 || month_num_int == 8 || month_num_int == 10 || month_num_int == 12 {\n    if day_num_int < 1 || day_num_int > 30 {\n      return false\n    }\n  } else if month_num_int == 4 || month_num_int == 6 || month_num_int == 9 || month_num_int == 11 {\n    if day_num_int < 1 || day_num_int > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmptjcljdp5.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptjcljdp5.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmptjcljdp5.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptjcljdp5.rs:39:27\n   |\n39 |   let month_num = month[0]\n   |                           ^ help: add `;` here\n40 |   let day_num = day[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptjcljdp5.rs:40:23\n   |\n40 |   let day_num = day[0]\n   |                       ^ help: add `;` here\n41 |   let year_num = year[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmptjcljdp5.rs:41:25\n   |\n41 |   let year_num = year[0]\n   |                         ^ help: add `;` here\n42 | \n43 |   if month_num < \"0\" || month_num > \"9\" {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptjcljdp5.rs:55:38\n   |\n55 |   let month_num_int = month_num - \"0\"\n   |                                      ^ help: add `;` here\n56 |   let day_num_int = day_num - \"0\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmptjcljdp5.rs:56:34\n   |\n56 |   let day_num_int = day_num - \"0\"\n   |                                  ^ help: add `;` here\n57 |   let year_num_int = year_num - \"0\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmptjcljdp5.rs:57:36\n   |\n57 |   let year_num_int = year_num - \"0\"\n   |                                    ^ help: add ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.length() == 0) {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if (month == null) {\n    return false\n  }\n  let month_num = parseInt(month[1])\n  let day = parseInt(month[2])\n  let year = parseInt(month[3])\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n  if (day < 1 || day > 31) {\n    return false\n  }\n  if (month_num == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  }\n  if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp99bt8or0.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp99bt8or0.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp99bt8or0.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp99bt8or0.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp99bt8or0.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp99bt8or0.rs:19:6\n   |\n19 |   if (date.length() == 0) {\n   |      ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.length() == 0) {\n19 +   if date.length() == 0 {\n   | \n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmp99bt8or0.rs:19:12\n   |\n19 |   if (date.length() == 0) {\n   |            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n  let day = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$/).groups()\n  let year = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$/).groups()\n\n  if month.length != 3 {\n    return false\n  }\n\n  if day.length != 3 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 ||\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmpih18pqb8.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpih18pqb8.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpih18pqb8.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let [month, day, year] = date.split(\"-\").map(x => x.toInt())\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 31 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpok4e6929.rs:22:50\n   |\n22 |   let [month, day, year] = date.split(\"-\").map(x => x.toInt())\n   |                                                  ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n  if (month < 1 || month > 12) {\n    return false\n  }\n  if (day < 1 || day > 31) {\n    return false\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n  if (year < 1900 || year > 2020) {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp95mi83d3.rs:24:34\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp95mi83d3.rs:24:36\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp95mi83d3.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp95mi83d3.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp95mi83d3.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp95mi83d3.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:22:41\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:23:39\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdgkl7sss.rs:24:40\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpdgkl7sss.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{1,2})(\\d{1,2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp72xi2k77.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp72xi2k77.rs:23:38\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp72xi2k77.rs:23:47\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp72xi2k77.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{1,2})(\\d{1,2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp72xi2k77.rs:24:36\n   |\n24 |   let day = date.match(/^(\\d{1,2})(\\d{1,2})$/).groups()\n   |                                    ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp72xi2k77.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp72xi2k77.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp72xi2k77.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp72xi2k77.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n  if !month {\n    return false\n  }\n\n  let month_num = month[1]\n  let day = month[2]\n  let year = month[3]\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpgxif9rva.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgxif9rva.rs:23:38\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgxif9rva.rs:23:47\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                                               ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpgxif9rva.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpgxif9rva.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpgxif9rva.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let [_, month, day, year] = date.split(\"-\")\n  let [_, month, _, _] = month.split(\"/\")\n\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.isEmpty() || month.isEmpty() {\n    return false\n  }\n\n  if month.isEmpty() || month.\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpihj5o1g7.rs:23:46\n   |\n23 |   let [_, month, day, year] = date.split(\"-\")\n   |                                              ^ help: add `;` here\n24 |   let [_, month, _, _] = month.split(\"/\")\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpihj5o1g7.rs:24:42\n   |\n24 |   let [_, month, _, _] = month.split(\"/\")\n   |                                          ^ help: add `;` here\n25 | \n26 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror: unexpected token: `}`\n  --> /tmp/tmpihj5o1g7.rs:91:1\n   |\n91 | }\n   | ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpihj5o1g7.rs:91:1\n   |\n90 |   if month.isEmpty() || month.\n   |   -- this `if` expression has a condition, but no block\n91 | }\n   | ^ expected `{`\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpihj5o1g7.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0529]: expected an array or slice, found `std::str::Split<'_, &str>`\n  --> /tmp/tmpihj5o1g7.rs:23:7\n   |\n23 |   let [_, month, day, year] = date.split(\"-\")\n   |       ^^^^^^^^^^^^^^^^^^^^^ pattern cannot match with input type `std::str::Split<'_, &str>`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0529, E0599.\nFor more information about an error, try `rustc --explain E0529`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const date_parts = date.split(\"-\")\n  const month = parseInt(date_parts[0])\n  const day = parseInt(date_parts[1])\n  const year = parseInt(date_parts[2])\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpgued75ca.rs:23:37\n   |\n23 |   const date_parts = date.split(\"-\")\n   |                                     ^ help: add `;` here\n24 |   const month = parseInt(date_parts[0])\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpgued75ca.rs:24:40\n   |\n24 |   const month = parseInt(date_parts[0])\n   |                                        ^ help: add `;` here\n25 |   const day = parseInt(date_parts[1])\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpgued75ca.rs:25:38\n   |\n25 |   const day = parseInt(date_parts[1])\n   |                                      ^ help: add `;` here\n26 |   const year = parseInt(date_parts[2])\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpgued75ca.rs:26:39\n   |\n26 |   const year = parseInt(date_parts[2])\n   |                                       ^ help: add `;` here\n27 | \n28 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpgued75ca.rs:23:22\n   |\n23 |   const date_parts = date.split(\"-\")\n   |   ----------------   ^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let date_parts`\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpgued75ca.rs:24:17\n   |\n24 |   const month = parseInt(date_parts[0])\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpgued75ca.rs:25:15\n   |\n25 |   const day = parseInt(date_parts[1])\n   |               ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmpgued75ca.rs:26:16\n   |\n26 |   const year = parseInt(date_parts[2])\n   |                ^^^^^^^^ not found in this scope\n\nerror: missing type for `const` item\n  --> /tmp/tmpgued75ca.rs:23:9\n   |\n23 |   const date_parts = date.split(\"-\")\n   |         ^^^^^^^^^^ help: prov",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.empty()) {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  const date_parts = date.split(\"-\")\n  if (date_parts.length != 3) {\n    return false\n  }\n\n  const month = date_parts[0]\n  const day = date_parts[1]\n  const year = date_parts[2]\n\n  if (month.length != 2) {\n    return false\n  }\n\n  if (day.length != 2) {\n    return false\n  }\n\n  if (year.length != 4) {\n    return false\n  }\n\n  if (!months.includes(month)) {\n    return false\n  }\n\n  if (!days.includes(day)) {\n    return false\n  }\n\n  if (!(month === \"02\" && day.length === 2)) {\n    if (!(month === \"04\" && day.length === 2)) {\n      if (!(month === \"06\" && day.length === 2)) {\n        if (!(month === \"09\" && day.length === 2)) {\n          if (!(month === \"11\" && day.length === 2)) {\n            if (!(month === \"12\" && day.length === 2)) {\n              return false\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpao7ma1rh.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpao7ma1rh.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 | \n26 |   const date_parts = date.split(\"-\")\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpao7ma1rh.rs:26:37\n   |\n26 |   const date_parts = date.split(\"-\")\n   |                                     ^ help: add `;` here\n27 |   if (date_parts.length != 3) {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpao7ma1rh.rs:31:30\n   |\n31 |   const month = date_parts[0]\n   |                              ^ help: add `;` here\n32 |   const day = date_parts[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpao7ma1rh.rs:32:28\n   |\n32 |   const day = date_parts[1]\n   |                            ^ help: add `;` here\n33 |   const year = date_parts[2]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpao7ma1rh.rs:33:29\n   |\n33 |   const year = date_parts[2]\n   |                             ^ help: add `;` here\n34 | \n35 |   if (month.length != 2) {\n   |   -- unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpao7ma1rh.rs:55:15\n   |\n55 |   if (!(month === \"02\" && day.length === 2)) {\n   |               ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpao7ma1rh.rs:55:38\n   |\n55 |   if (!(month === \"02\" && day.length === 2)) {\n   |                                      ^^^ ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[0-1])-([0-9]{4})$/).groups()\n  let day = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[0-1])-([0-9]{4})$/).groups()\n  let year = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[0-1])-([0-9]{4})$/).groups()\n\n  if month[0] < 1 || month[0] > 12 {\n    return false\n  }\n\n  if month[1] < 1 || month[1] > 31 {\n    return false\n  }\n\n  if month[2] < 1 || month[2] > 31 {\n    return false\n  }\n\n  if month[3] < 1 || month[3] > 12 {\n    return false\n  }\n\n  if day[0] < 1 || day[0] > 31 {\n    return false\n  }\n\n  if day[1] < 1 || day[1] > 30 {\n    return false\n  }\n\n  if day[2] < 1 || day[2] > 29 {\n    return false\n  }\n\n  if year[0] < 1 || year[0] > 9999 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmpoo518hz9.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpoo518hz9.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpoo518hz9.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.length == 0) {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[0-1])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n\n  if (month < 1 || month > 12) {\n    return false\n  }\n\n  if (day < 1 || day > 31) {\n    return false\n  }\n\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  } else {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n\n  if (year < 1900 || year > 2100) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpo68453xk.rs:25:34\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpo68453xk.rs:25:36\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpo68453xk.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpo68453xk.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpo68453xk.rs:19:6\n   |\n19 |   if (date.length == 0) {\n   |      ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.length == 0) {\n19 +   if date.length == 0 {\n   | \n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpo68453xk.rs:19:12\n   |\n19 |   if (date.length == 0) {\n   |            ^^^^^^ unknown field\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  const month = date.split(\"-\")[0]\n  const day = date.split(\"-\")[1]\n  const year = date.split(\"-\")[2]\n\n  if month.length != 2 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if month == \"02\" && day == \"29\" {\n    return false\n  }\n\n  if !(month == \"02\" || month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpwwqs8nbf.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpwwqs8nbf.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 | \n26 |   const month = date.split(\"-\")[0]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpwwqs8nbf.rs:26:35\n   |\n26 |   const month = date.split(\"-\")[0]\n   |                                   ^ help: add `;` here\n27 |   const day = date.split(\"-\")[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpwwqs8nbf.rs:27:33\n   |\n27 |   const day = date.split(\"-\")[1]\n   |                                 ^ help: add `;` here\n28 |   const year = date.split(\"-\")[2]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpwwqs8nbf.rs:28:34\n   |\n28 |   const year = date.split(\"-\")[2]\n   |                                  ^ help: add `;` here\n29 | \n30 |   if month.length != 2 || day.length != 2 || year.length != 4 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpwwqs8nbf.rs:26:17\n   |\n26 |   const month = date.split(\"-\")[0]\n   |   -----------   ^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let month`\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpwwqs8nbf.rs:27:15\n   |\n27 |   const day = date.split(\"-\")[1]\n   |   ---------   ^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let day`\n\nerror[E0435]: attempt to use a non-const",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let [month, day, year] = date.split(\"-\")\n  let [_, _, _] = year.split(\"-\")\n  let [_, _, _] = month.split(\"-\")\n  let [_, _, _] = day.split(\"-\")\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n  let month_name = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"][month_num - 1]\n  let month_days = [\"31\", \"28\", \"31\", \"30\", \"31\", \"30\", \"31\", \"31\", \"30\", \"31\", \"30\", \"31\"]\n  let day_name = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n  let month_days_num = month_days[month_num - 1]\n  let day_name_num = day_name[day_num - 1]\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > month_days_num {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > month_days_num {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ns8ltw.rs:22:43\n   |\n22 |   let [month, day, year] = date.split(\"-\")\n   |                                           ^ help: add `;` here\n23 |   let [_, _, _] = year.split(\"-\")\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ns8ltw.rs:23:34\n   |\n23 |   let [_, _, _] = year.split(\"-\")\n   |                                  ^ help: add `;` here\n24 |   let [_, _, _] = month.split(\"-\")\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ns8ltw.rs:24:35\n   |\n24 |   let [_, _, _] = month.split(\"-\")\n   |                                   ^ help: add `;` here\n25 |   let [_, _, _] = day.split(\"-\")\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ns8ltw.rs:25:33\n   |\n25 |   let [_, _, _] = day.split(\"-\")\n   |                                 ^ help: add `;` here\n26 |   let month_num = parseInt(month)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ns8ltw.rs:26:34\n   |\n26 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n27 |   let day_num = parseInt(day)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ns8ltw.rs:27:30\n   |\n27 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n28 |   let year_num = parseInt(year)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ns8ltw.rs:28:32\n   |\n28 |   let year_num = parseInt(year)\n   |                                ^ help: add `;` here\n29 |   let month_name = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"][month_num - 1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq3ns8ltw.rs:29:119\n   |\n29 |   let month_name = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"][month_num - 1]\n   |                                                ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if (month.length != 3 || day.length != 2 || year.length != 4) {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n\n  if (month_num == 2) {\n    if (day_num < 1 || day_num > 29) {\n      return false\n    }\n  } else if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day_num < 1 || day_num > 31) {\n      return false\n    }\n  } else if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpw0pm3_va.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpw0pm3_va.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpw0pm3_va.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpw0pm3_va.rs:19:12\n   |\n19 |   if (date.i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if (month.length < 2 || month.length > 3) {\n    return false\n  }\n\n  if (day.length < 2 || day.length > 3) {\n    return false\n  }\n\n  if (month.length == 2) {\n    if (month[0] < \"1\" || month[0] > \"12\") {\n      return false\n    }\n  } else {\n    if (month[0] < \"1\" || month[0] > \"12\") {\n      return false\n    }\n    if (month[1] < \"1\" || month[1] > \"12\") {\n      return false\n    }\n  }\n\n  if (day.length == 2) {\n    if (day[0] < \"1\" || day[0] > \"30\") {\n      return false\n    }\n  } else {\n    if (day[0] < \"1\" || day[0] > \"30\") {\n      return false\n    }\n    if (day[1] < \"1\" || day[1] > \"30\") {\n      return false\n    }\n  }\n\n  if (year.length != 4) {\n    return false\n  }\n\n  if (year[0] < \"0\" || year[0] > \"9\") {\n    return false\n  }\n\n  if (year[1] < \"0\" || year[1] > \"9\") {\n    return false\n  }\n\n  if (year[2] < \"0\" || year[2] > \"9\") {\n    return false\n  }\n\n  if (year[3] < \"0\" || year[3] > \"9\") {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2bto437y.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2bto437y.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2bto437y.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if (month.length < 2 || month.length > 3) {\n   |   -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2bto437y.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2bto437y.rs:27:6\n   |\n27 |   if (month.length < 2 || month.length > 3) {\n   |      ^                                    ^\n   |\nhelp: remove these parentheses\n   |\n27 -   if (month.length < 2 || month.length > 3) {\n27 +   if month.length < 2 || month.length > 3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2bto437y.rs:31:6\n   |\n31 |   if (day.length < 2 || day.length > 3) {\n   |      ^                                ^\n   |\nhelp: remove these parentheses\n   |\n31 -   if (day.length < 2 || day.length > 3) {\n31 +   if day.length < 2 || day.length > 3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2bto437y.rs:35:6\n   |\n35 |   if (month.length == 2) {\n   |      ^                 ^\n   |\nhelp: remove these parentheses\n   |\n35 -   if (month.length == 2) {\n35 +   if month.length == 2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp2bto437y.rs:36:8\n   |\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([1-9][0-9]{4})$/)\n  if !month {\n    return false\n  }\n\n  let month_num = parseInt(month[1])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  let day = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$/)\n  if !day {\n    return false\n  }\n\n  let day_num = parseInt(day[3])\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  let year = parseInt(date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([1-9][0-9]{4})$/)[3])\n  if year < 1000 || year > 9999 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmp01tpdb90.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([1-9][0-9]{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([1-9][0-9]{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp01tpdb90.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([1-9][0-9]{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp01tpdb90.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  if month.length != 2 {\n    return false\n  }\n  if day.length != 2 {\n    return false\n  }\n  if year.length != 4 {\n    return false\n  }\n  if !(month.match(/^[1-9]$/)) {\n    return false\n  }\n  if !(day.match(/^[1-9]$/)) {\n    return false\n  }\n  if !(year.match(/^[0-9]{4}$/)) {\n    return false\n  }\n  if !(month.match(/^[1-9]$/)) {\n    return false\n  }\n  if !(day.match(/^[1-9]$/)) {\n    return false\n  }\n  if !(year.match(/^[0-9]{4}$/)) {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjz8fna11.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjz8fna11.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjz8fna11.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpjz8fna11.rs:34:14\n   |\n34 |   if !(month.match(/^[1-9]$/)) {\n   |              ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n34 |   if !(month.r#match(/^[1-9]$/)) {\n   |              ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpjz8fna11.rs:34:20\n   |\n34 |   if !(month.match(/^[1-9]$/)) {\n   |                    ^ expected expression\n\nerror: expected `{`, found `)`\n  --> /tmp/tmpjz8fna11.rs:34:30\n   |\n34 |   if !(month.match(/^[1-9]$/)) {\n   |   --                         ^ expected `{`\n   |   |\n   |   this `if` expression has a condition, but no block\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpjz8fna11.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjz8fna11.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpjz8fna11.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a va",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    if month == 2 {\n      if day < 1 || day > 29 {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n\n  if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 31 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpz8gmje55.rs:23:41\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpz8gmje55.rs:24:39\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpz8gmje55.rs:25:40\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpz8gmje55.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpz8gmje55.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpz8gmje55.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpz8gmje55.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n  let day = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-2][0-9]|3[0-1])$/).groups()\n  let year = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|[1-2][0-9]|3[0-1])$/).groups()\n  if month[0] < 1 || month[0] > 12 {\n    return false\n  }\n  if month[1] < 1 || month[1] > 31 {\n    return false\n  }\n  if month[2] < 1 || month[2] > 31 {\n    return false\n  }\n  if month[3] < 1 || month[3] > 12 {\n    return false\n  }\n  if day[0] < 1 || day[0] > 31 {\n    return false\n  }\n  if day[1] < 1 || day[1] > 30 {\n    return false\n  }\n  if day[2] < 1 || day[2] > 29 {\n    return false\n  }\n  if year[0] < 1 || year[0] > 9999 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmphgdu24f7.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmphgdu24f7.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmphgdu24f7.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:22:41\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:23:39\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdgkl7sss.rs:24:40\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpdgkl7sss.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const date_parts = date.split(\"-\")\n  const month = date_parts[0]\n  const day = date_parts[1]\n  const year = date_parts[2]\n\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n\n  const month_num = parseInt(month)\n  const day_num = parseInt(day)\n  const year_num = parseInt(year)\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmpm8b5zieu.rs:23:37\n   |\n23 |   const date_parts = date.split(\"-\")\n   |                                     ^ help: add `;` here\n24 |   const month = date_parts[0]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpm8b5zieu.rs:24:30\n   |\n24 |   const month = date_parts[0]\n   |                              ^ help: add `;` here\n25 |   const day = date_parts[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpm8b5zieu.rs:25:28\n   |\n25 |   const day = date_parts[1]\n   |                            ^ help: add `;` here\n26 |   const year = date_parts[2]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpm8b5zieu.rs:26:29\n   |\n26 |   const year = date_parts[2]\n   |                             ^ help: add `;` here\n27 | \n28 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpm8b5zieu.rs:32:36\n   |\n32 |   const month_num = parseInt(month)\n   |                                    ^ help: add `;` here\n33 |   const day_num = parseInt(day)\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpm8b5zieu.rs:33:32\n   |\n33 |   const day_num = parseInt(day)\n   |                                ^ help: add `;` here\n34 |   const year_num = parseInt(year)\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpm8b5zieu.rs:34:34\n   |\n34 |   const year_num = parseInt(year)\n   |                                  ^ help: add `;` here\n35 | \n36 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpm8b5zieu.rs:23:22\n   |\n23 |   const date_parts = date.split(\"-\")\n   |   ----------------   ^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let date_parts`\n\nerror[E0425]: cannot find function `parseInt` in t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5ldqzmw4.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:39:34\n   |\n39 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n40 |   let day_num = parseInt(day)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:40:30\n   |\n40 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n41 |   let year_num = parseInt(year)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5ldqzmw4.rs:41:32\n   |\n41 |   let year_num = parseInt(year)\n   |                                ^ help: add `;` here\n42 | \n43 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5ldqzmw4.rs:39:19\n   |\n39 |   let month_num = parseInt(month)\n   |                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5ldqzmw4.rs:40:17\n   |\n40 |   let day_num = parseInt(day)\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5ldqzmw4.rs:41:18\n   |\n41 |   let year_num = parseInt(year)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([1-9][0-9]{3})/)\n  if !month {\n    return false\n  }\n\n  let days = month.groups()[3]\n  let month_num = month.groups()[1]\n  let year = month.groups()[2]\n\n  if month_num == \"01\" || month_num == \"03\" || month_num == \"05\" || month_num == \"07\" || month_num == \"08\" || month_num == \"10\" || month_num == \"12\" {\n    if days < 1 || days > 31 {\n      return false\n    }\n  } else if month_num == \"04\" || month_num == \"06\" || month_num == \"09\" || month_num == \"11\" {\n    if days < 1 || days > 30 {\n      return false\n    }\n  } else if month_num == \"02\" {\n    if days < 1 || days > 29 {\n      return false\n    }\n  }\n\n  if !(month_num >= \"01\" && month_num <= \"12\") {\n    return false\n  }\n\n  if !(year.match(/^[1-9][0-9]{3}$/)) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmphbzfdiyx.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([1-9][0-9]{3})/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([1-9][0-9]{3})/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmphbzfdiyx.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([1-9][0-9]{3})/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmphbzfdiyx.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if month == null {\n    return false\n  }\n\n  let month_number = month[1]\n  let day = month[2]\n  let year = month[3]\n\n  if month_number < 1 || month_number > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    if month_number == 2 {\n      if day < 1 || day > 29 {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n\n  if month_number == 1 || month_number == 3 || month_number == 5 || month_number == 7 || month_number == 8 || month_number == 10 || month_number == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  }\n\n  if month_number == 4 || month_number == 6 || month_number == 9 || month_number == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpmt7kmw1l.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpmt7kmw1l.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpmt7kmw1l.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpmt7kmw1l.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpmt7kmw1l.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpmt7kmw1l.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:22:41\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdgkl7sss.rs:23:39\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdgkl7sss.rs:24:40\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpdgkl7sss.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpdgkl7sss.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5vjgiwqs.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5vjgiwqs.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5vjgiwqs.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5vjgiwqs.rs:28:34\n   |\n28 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n29 |   let day_num = parseInt(day)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5vjgiwqs.rs:29:30\n   |\n29 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n30 |   let year_num = parseInt(year)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5vjgiwqs.rs:30:32\n   |\n30 |   let year_num = parseInt(year)\n   |                                ^ help: add `;` here\n31 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5vjgiwqs.rs:28:19\n   |\n28 |   let month_num = parseInt(month)\n   |                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5vjgiwqs.rs:29:17\n   |\n29 |   let day_num = parseInt(day)\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5vjgiwqs.rs:30:18\n   |\n30 |   let year_num = parseInt(year)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  let days_in_month = [31, 30, 29, 28, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n  let days_in_month_leap_year = [31, 29, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n  if month.length() != 2 {\n    return false\n  }\n  if day.length() != 2 {\n    return false\n  }\n  if year.length() != 4 {\n    return false\n  }\n  if month.to_i() < 1 || month.to_i() > 12 {\n    return false\n  }\n  if day.to_i() < 1 || day.to_i() > days_in_month[month.to_i() - 1] {\n    return false\n  }\n  if month.to_i() == 2 && day.to_i() > 29 {\n    return false\n  }\n  if month.to_i() == 2 && day.to_i() == 29 && year.to_i() % 4 == 0 {\n    return false\n  }\n  if month.to_i() == 2 && day.to_i() == 29 && year.to_i() % 4 != 0 {\n    return false\n  }\n  if month.to_i() == 2 && day.to_i() > days_in_month_leap_year[month.to_i() - 1] {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpv4m0v68i.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv4m0v68i.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv4m0v68i.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   let days_in_month = [31, 30, 29, 28, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv4m0v68i.rs:25:75\n   |\n25 |   let days_in_month = [31, 30, 29, 28, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n   |                                                                           ^ help: add `;` here\n26 |   let days_in_month_leap_year = [31, 29, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpv4m0v68i.rs:26:85\n   |\n26 |   let days_in_month_leap_year = [31, 29, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31]\n   |                                                                                     ^ help: add `;` here\n27 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpv4m0v68i.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpv4m0v68i.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpv4m0v68i.rs:23:13\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/).captures[1]\n  let day = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})$/).captures[2]\n  let year = date.match(/^(\\d{4})$/).captures[4]\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpxr0nhkuy.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/).captures[1]\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpxr0nhkuy.rs:22:40\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/).captures[1]\n   |                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpxr0nhkuy.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/).captures[1]\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpxr0nhkuy.rs:22:56\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/).captures[1]\n   |                                                        ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpxr0nhkuy.rs:22:61\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/).captures[1]\n   |                                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpxr0nhkuy.rs:23:27\n   |\n23 |   let day = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})$/).captures[2]\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpxr0nhkuy.rs:23:38\n   |\n23 |   let day = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})$/).captures[2]\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpxr0nhkuy.rs:23:43\n   |\n23 |   let day = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})$/).captures[2]\n   |                                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpxr0nhkuy.rs:24:28\n   |\n24 |   let year = date.match(/^(\\d{4})$/).captures[4]\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpxr0nhkuy.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-\\/])(\\d{1,2})([-\\/])(\\d{4})$/).captures[1]\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an ident",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if month == \"02\" {\n    if !(day >= 1 && day <= 29) {\n      return false\n    }\n  } else {\n    if !(day >= 1 && day <= 30) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2hsldc2n.rs:23:58\n   |\n23 |   let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                          ^ help: add `;` here\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2hsldc2n.rs:24:86\n   |\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                      ^ help: add `;` here\n25 | \n26 |   let month = date.split(\"-\")[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2hsldc2n.rs:26:33\n   |\n26 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n27 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp2hsldc2n.rs:27:31\n   |\n27 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n28 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2hsldc2n.rs:28:32\n   |\n28 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n29 | \n30 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp2hsldc2n.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp2hsldc2n.rs:26:15\n   |\n26 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmp2hsldc2n.rs:27:13\n   |\n27 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let days = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let year = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  if (month.length != 3) {\n    return false\n  }\n  if (month[0] < 1 || month[0] > 12) {\n    return false\n  }\n  if (month[1] < 1 || month[1] > 31) {\n    return false\n  }\n  if (month[2] < 1 || month[2] > 31) {\n    return false\n  }\n  if (days.length != 3) {\n    return false\n  }\n  if (days[0] < 1 || days[0] > 31) {\n    return false\n  }\n  if (days[1] < 1 || days[1] > 30) {\n    return false\n  }\n  if (days[2] < 1 || days[2] > 29) {\n    return false\n  }\n  if (year.length != 3) {\n    return false\n  }\n  if (year[0] < 1 || year[0] > 12) {\n    return false\n  }\n  if (year[1] < 1 || year[1] > 31) {\n    return false\n  }\n  if (year[2] < 1 || year[2] > 31) {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp_bekp8r_.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp_bekp8r_.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp_bekp8r_.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp_bekp8r_.rs:23:28\n   |\n23 |   let days = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp_bekp8r_.rs:23:36\n   |\n23 |   let days = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                    ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp_bekp8r_.rs:23:44\n   |\n23 |   let days = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp_bekp8r_.rs:24:28\n   |\n24 |   let year = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp_bekp8r_.rs:24:36\n   |\n24 |   let year = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                    ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp_bekp8r_.rs:24:44\n   |\n24 |   let year = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp_bekp8r_.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  let month_num = month.to_i()\n  let day_num = day.to_i()\n  let year_num = year.to_i()\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   let month_num = month.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:25:31\n   |\n25 |   let month_num = month.to_i()\n   |                               ^ help: add `;` here\n26 |   let day_num = day.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpl9u6aors.rs:26:27\n   |\n26 |   let day_num = day.to_i()\n   |                           ^ help: add `;` here\n27 |   let year_num = year.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpl9u6aors.rs:27:29\n   |\n27 |   let year_num = year.to_i()\n   |                             ^ help: add `;` here\n28 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpl9u6aors.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpl9u6aors.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpl9u6aors.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.is_empty() {\n    return false\n  }\n  let month = date.split(\"-\")[0].to_int()\n  let day = date.split(\"-\")[1].to_int()\n  let year = date.split(\"-\")[2].to_int()\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpp7l74poz.rs:22:42\n   |\n22 |   let month = date.split(\"-\")[0].to_int()\n   |                                          ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1].to_int()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpp7l74poz.rs:23:40\n   |\n23 |   let day = date.split(\"-\")[1].to_int()\n   |                                        ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2].to_int()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpp7l74poz.rs:24:41\n   |\n24 |   let year = date.split(\"-\")[2].to_int()\n   |                                         ^ help: add `;` here\n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpp7l74poz.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0].to_int()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpp7l74poz.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1].to_int()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpp7l74poz.rs:24:14\n   |\n24 |   let year = date.split(\"-\")[2].to_int()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0608`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:23:41\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:24:39\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoccak8xg.rs:25:40\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpoccak8xg.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if !month {\n    return false\n  }\n  let month_num = month[1]\n  let day = month[2]\n  let year = month[3]\n  let days_in_month = days_in_month(year, month_num)\n  if month_num > 12 || month_num < 1 {\n    return false\n  }\n  if day > days_in_month || day < 1 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmp6cipt0jp.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp6cipt0jp.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmp6cipt0jp.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmp6cipt0jp.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp6cipt0jp.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp6cipt0jp.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  const month = date.split(\"-\")[0]\n  const day = date.split(\"-\")[1]\n  const year = date.split(\"-\")[2]\n\n  if month.length != 2 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if month == \"02\" {\n    if day < \"01\" || day > \"29\" {\n      return false\n    }\n  } else {\n    if day < \"01\" || day > \"30\" {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmphgof075t.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmphgof075t.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 | \n26 |   const month = date.split(\"-\")[0]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmphgof075t.rs:26:35\n   |\n26 |   const month = date.split(\"-\")[0]\n   |                                   ^ help: add `;` here\n27 |   const day = date.split(\"-\")[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmphgof075t.rs:27:33\n   |\n27 |   const day = date.split(\"-\")[1]\n   |                                 ^ help: add `;` here\n28 |   const year = date.split(\"-\")[2]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmphgof075t.rs:28:34\n   |\n28 |   const year = date.split(\"-\")[2]\n   |                                  ^ help: add `;` here\n29 | \n30 |   if month.length != 2 || day.length != 2 || year.length != 4 {\n   |   -- unexpected token\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmphgof075t.rs:26:17\n   |\n26 |   const month = date.split(\"-\")[0]\n   |   -----------   ^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let month`\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmphgof075t.rs:27:15\n   |\n27 |   const day = date.split(\"-\")[1]\n   |   ---------   ^^^^ non-constant value\n   |   |\n   |   help: consider using `let` instead of `const`: `let day`\n\nerror[E0435]: attempt to use a non-const",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n\n  if month.length() != 2 {\n    return false\n  }\n\n  if day.length() != 2 {\n    return false\n  }\n\n  if year.length() != 4 {\n    return false\n  }\n\n  let month_num = month.to_i()\n  let day_num = day.to_i()\n  let year_num = year.to_i()\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphxlq6_9j.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphxlq6_9j.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmphxlq6_9j.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphxlq6_9j.rs:43:31\n   |\n43 |   let month_num = month.to_i()\n   |                               ^ help: add `;` here\n44 |   let day_num = day.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphxlq6_9j.rs:44:27\n   |\n44 |   let day_num = day.to_i()\n   |                           ^ help: add `;` here\n45 |   let year_num = year.to_i()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmphxlq6_9j.rs:45:29\n   |\n45 |   let year_num = year.to_i()\n   |                             ^ help: add `;` here\n46 | \n47 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmphxlq6_9j.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmphxlq6_9j.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmphxlq6_9j.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1]\n   |             ^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day_num < 1 || day_num > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5ldqzmw4.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:39:34\n   |\n39 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n40 |   let day_num = parseInt(day)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5ldqzmw4.rs:40:30\n   |\n40 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n41 |   let year_num = parseInt(year)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5ldqzmw4.rs:41:32\n   |\n41 |   let year_num = parseInt(year)\n   |                                ^ help: add `;` here\n42 | \n43 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5ldqzmw4.rs:39:19\n   |\n39 |   let month_num = parseInt(month)\n   |                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5ldqzmw4.rs:40:17\n   |\n40 |   let day_num = parseInt(day)\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmp5ldqzmw4.rs:41:18\n   |\n41 |   let year_num = parseInt(year)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpkz_sma6d.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpkz_sma6d.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpkz_sma6d.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n  let month_num = month.toInt()\n  let day_num = day.toInt()\n  let year_num = year.toInt()\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpaq7volu1.rs:22:33\n   |\n22 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n23 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpaq7volu1.rs:23:31\n   |\n23 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n24 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpaq7volu1.rs:24:32\n   |\n24 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n25 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpaq7volu1.rs:28:32\n   |\n28 |   let month_num = month.toInt()\n   |                                ^ help: add `;` here\n29 |   let day_num = day.toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpaq7volu1.rs:29:28\n   |\n29 |   let day_num = day.toInt()\n   |                            ^ help: add `;` here\n30 |   let year_num = year.toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpaq7volu1.rs:30:30\n   |\n30 |   let year_num = year.toInt()\n   |                              ^ help: add `;` here\n31 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpaq7volu1.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpaq7volu1.rs:22:15\n   |\n22 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpaq7volu1.rs:23:13\n   |\n23 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if !month {\n    return false\n  }\n\n  let month_num = month[1]\n  let day = month[2]\n  let year = month[3]\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpnfaes932.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpnfaes932.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpnfaes932.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpnfaes932.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpnfaes932.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpnfaes932.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n  const year = \"2000\"\n\n  const date_parts = date.split(\"-\")\n  if date_parts.length != 3 {\n    return false\n  }\n\n  const month = date_parts[0]\n  const day = date_parts[1]\n  const year = date_parts[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if year.toInt() > year.toInt() {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `const`\n  --> /tmp/tmp0hfexqx4.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp0hfexqx4.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 |   const year = \"2000\"\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp0hfexqx4.rs:25:22\n   |\n25 |   const year = \"2000\"\n   |                      ^ help: add `;` here\n26 | \n27 |   const date_parts = date.split(\"-\")\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp0hfexqx4.rs:27:37\n   |\n27 |   const date_parts = date.split(\"-\")\n   |                                     ^ help: add `;` here\n28 |   if date_parts.length != 3 {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp0hfexqx4.rs:32:30\n   |\n32 |   const month = date_parts[0]\n   |                              ^ help: add `;` here\n33 |   const day = date_parts[1]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmp0hfexqx4.rs:33:28\n   |\n33 |   const day = date_parts[1]\n   |                            ^ help: add `;` here\n34 |   const year = date_parts[2]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp0hfexqx4.rs:34:29\n   |\n34 |   const year = date_parts[2]\n   |                             ^ help: add `;` here\n35 | \n36 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0428]: the name `year` is defined multiple times\n  --> /tmp/tmp0hfexqx4.rs:34:3\n   |\n25 |   const year = \"2000\"\n   |   ------------------- previous definition of the value ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n    return false\n  }\n  if date.match(/^\\d{2}-\\d\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:22:19\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:22:25\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:22:31\n   |\n22 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:25:19\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:25:25\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:25:31\n   |\n25 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:28:19\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:28:25\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:28:31\n   |\n28 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:31:19\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:31:25\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:31:31\n   |\n31 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpgfopp9ua.rs:34:19\n   |\n34 |   if date.match(/^\\d{2}-\\d{2}-\\d{4}$/).isNone() {\n   |                   ^\n\nerror: unknow",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).group(1)\n  let day = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).group(2)\n  let year = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).group(3)\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  }\n  if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmpnc6ika7d.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).group(1)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).group(1)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpnc6ika7d.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).group(1)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpnc6ika7d.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let [month, day, year] = date.split(\"-\")\n  let [_, _, _] = year.split(\"-\")\n  if month.length != 2 {\n    return false\n  }\n  if day.length != 2 {\n    return false\n  }\n  if month.to_i < 1 || month.to_i > 12 {\n    return false\n  }\n  if day.to_i < 1 || day.to_i > 31 {\n    return false\n  }\n  if month.to_i == 2 {\n    if day.to_i < 1 || day.to_i > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpin2ui729.rs:22:43\n   |\n22 |   let [month, day, year] = date.split(\"-\")\n   |                                           ^ help: add `;` here\n23 |   let [_, _, _] = year.split(\"-\")\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpin2ui729.rs:23:34\n   |\n23 |   let [_, _, _] = year.split(\"-\")\n   |                                  ^ help: add `;` here\n24 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpin2ui729.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0529]: expected an array or slice, found `std::str::Split<'_, &str>`\n  --> /tmp/tmpin2ui729.rs:22:7\n   |\n22 |   let [month, day, year] = date.split(\"-\")\n   |       ^^^^^^^^^^^^^^^^^^ pattern cannot match with input type `std::str::Split<'_, &str>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0529, E0599.\nFor more information about an error, try `rustc --explain E0529`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_s\n  let year = date.match(/^(19|20)\\d\\d/).to_s\n  if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n    return false\n  }\n  let month_num = month.to_i\n  let day_num = day.to_i\n  let year_num = year.to_i\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n  if (month_num == 2) {\n    if (day_num < 1 || day_num > 29) {\n      return false\n    }\n  } else {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpeopfl5jw.rs:24:34\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_s\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpeopfl5jw.rs:24:36\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_s\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpeopfl5jw.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_s\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpeopfl5jw.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpeopfl5jw.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpeopfl5jw.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let [month, day, year] = date.split(\"-\")\n  let [_, _, _] = year.split(\"-\")\n\n  if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n    return false\n  }\n\n  let month_num = parseInt(month)\n  let day_num = parseInt(day)\n  let year_num = parseInt(year)\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph30yqm1e.rs:23:43\n   |\n23 |   let [month, day, year] = date.split(\"-\")\n   |                                           ^ help: add `;` here\n24 |   let [_, _, _] = year.split(\"-\")\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmph30yqm1e.rs:24:34\n   |\n24 |   let [_, _, _] = year.split(\"-\")\n   |                                  ^ help: add `;` here\n25 | \n26 |   if month.isEmpty() || day.isEmpty() || year.isEmpty() {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph30yqm1e.rs:30:34\n   |\n30 |   let month_num = parseInt(month)\n   |                                  ^ help: add `;` here\n31 |   let day_num = parseInt(day)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmph30yqm1e.rs:31:30\n   |\n31 |   let day_num = parseInt(day)\n   |                              ^ help: add `;` here\n32 |   let year_num = parseInt(year)\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmph30yqm1e.rs:32:32\n   |\n32 |   let year_num = parseInt(year)\n   |                                ^ help: add `;` here\n33 | \n34 |   if month_num < 1 || month_num > 12 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmph30yqm1e.rs:30:19\n   |\n30 |   let month_num = parseInt(month)\n   |                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmph30yqm1e.rs:31:17\n   |\n31 |   let day_num = parseInt(day)\n   |                 ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `parseInt` in this scope\n  --> /tmp/tmph30yqm1e.rs:32:18\n   |\n32 |   let year_num = parseInt(year)\n   |                  ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmph30yqm1e.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a si",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[0-1])/).to_s\n  let year = date.match(/^(19|20)\\d\\d/).to_s\n\n  if (month.isEmpty() || day.isEmpty() || year.isEmpty()) {\n    return false\n  }\n\n  let month_num = month.to_i\n  let day_num = day.to_i\n  let year_num = year.to_i\n\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n\n  if (month_num == 2) {\n    if (day_num < 1 || day_num > 29) {\n      return false\n    }\n  } else if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day_num < 1 || day_num > 31) {\n      return false\n    }\n  } else if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpqhyfm67u.rs:25:34\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_s\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpqhyfm67u.rs:25:36\n   |\n25 |   let year = date.match(/^(19|20)\\d\\d/).to_s\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpqhyfm67u.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_s\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpqhyfm67u.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_s\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqhyfm67u.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpqhyfm67u.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  const month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n  const day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n\n  if month && month.length === 3 {\n    if month[1] < 1 || month[1] > 12 {\n      return false\n    }\n    if month[2] < 1 || month[2] > 31 {\n      return false\n    }\n  } else if month && month.length === 2 {\n    if month[1] < 1 || month[1] > 12 {\n      return false\n    }\n  } else {\n    return false\n  }\n\n  if day && day.length === 3 {\n    if day[1] < 1 || day[1] > 31 {\n      return false\n    }\n    if day[2] < 1 || day[2] > 30 {\n      return false\n    }\n  } else if day && day.length === 2 {\n    if day[1] < 1 || day[1] > 30 {\n      return false\n    }\n  } else {\n    return false\n  }\n\n  if !months.includes(month[1]) {\n    return false\n  }\n\n  if !days.includes(day[1]) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmptbdgxisd.rs:26:31\n   |\n26 |   const month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                               ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmptbdgxisd.rs:26:41\n   |\n26 |   const month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                                         ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmptbdgxisd.rs:26:51\n   |\n26 |   const month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmptbdgxisd.rs:27:29\n   |\n27 |   const day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmptbdgxisd.rs:27:39\n   |\n27 |   const day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                                       ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmptbdgxisd.rs:27:49\n   |\n27 |   const day = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                                                 ^\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmptbdgxisd.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmptbdgxisd.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 | \n26 |   const month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |   ----- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmptbdgxisd.rs:26:22\n   |\n26 |   const month = date.match(/^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/)\n   |                      ^^^^^ expected identifier, found keyword\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !is_valid_month(month) {\n    return false\n  }\n\n  if !is_valid_day(day) {\n    return false\n  }\n\n  if !is_valid_year(year) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpuq9j6e8y.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuq9j6e8y.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpuq9j6e8y.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `is_valid_month` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:39:7\n   |\n39 |   if !is_valid_month(month) {\n   |       ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_day` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:43:7\n   |\n43 |   if !is_valid_day(day) {\n   |       ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_year` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:47:7\n   |\n47 |   if !is_valid_year(year) {\n   |       ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpuq9j6e8y.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2]\n   |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if !month {\n    return false\n  }\n  let month_num = month[1]\n  let day = month[2]\n  let year = month[3]\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  }\n  if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpof04ig39.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpof04ig39.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpof04ig39.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpof04ig39.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpof04ig39.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpof04ig39.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n  if year_num < 1900 || year_num > 2100 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpvtd2cjdj.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpvtd2cjdj.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpvtd2cjdj.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpvtd2cjdj.rs:23:27\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpvtd2cjdj.rs:23:35\n   |\n23 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpvtd2cjdj.rs:24:28\n   |\n24 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpvtd2cjdj.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpvtd2cjdj.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpvtd2cjdj.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{1,2})([-/])(\\d{1,2})(\\d{4})$/).groups()\n  let month_num = parseInt(month[0])\n  let day = parseInt(month[2])\n  let year = parseInt(month[3])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day < 1 || day > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  }\n  if year < 1000 || year > 9999 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmplagp4a7h.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-/])(\\d{1,2})(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmplagp4a7h.rs:22:44\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-/])(\\d{1,2})(\\d{4})$/).groups()\n   |                                            ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmplagp4a7h.rs:22:53\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-/])(\\d{1,2})(\\d{4})$/).groups()\n   |                                                     ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmplagp4a7h.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-/])(\\d{1,2})(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{1,2})([-/])(\\d{1,2})(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmplagp4a7h.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{1,2})([-/])(\\d{1,2})(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmplagp4a7h.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let month_num = parseInt(month[0])\n  let day = parseInt(month[1])\n  let year = parseInt(month[2])\n\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n\n  if (day < 1 || day > 31) {\n    return false\n  }\n\n  if (month_num == 2) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  } else if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day < 1 || day > 30) {\n      return false\n    }\n  } else if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n    if (day < 1 || day > 29) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpje2l3smq.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpje2l3smq.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpje2l3smq.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpje2l3smq.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpje2l3smq.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpje2l3smq.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpje2l3smq.rs:19:12\n   |\n19 |   if (date.isEmpty()) {\n   |            ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n  let day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).to_i\n  let year = date.match(/^(19|20)\\d\\d/).to_i\n  if month < 1 || month > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else {\n    if day < 1 || day > 30 {\n      return false\n    }\n  }\n  if year < 1900 || year > 2100 {\n    return false\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpj6_4az04.rs:24:34\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                  ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpj6_4az04.rs:24:36\n   |\n24 |   let year = date.match(/^(19|20)\\d\\d/).to_i\n   |                                    ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpj6_4az04.rs:22:20\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(0[1-9]|1[0-2])/).to_i\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpj6_4az04.rs:22:26\n   |\n22 |   let month = date.match(/^(0[1-9]|1[0-2])/).to_i\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpj6_4az04.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.is_empty() {\n    return false\n  }\n\n  let [month, day, year] = date.split(\"-\").map(|s| s.to_int())\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    if month == 2 {\n      return day >= 1 && day <= 29\n    } else {\n      return false\n    }\n  }\n\n  if month == 2 {\n    return day >= 1 && day <= 29\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    return day >= 1 && day <= 30\n  } else {\n    return true\n  }\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpnzplxa64.rs:23:63\n   |\n23 |   let [month, day, year] = date.split(\"-\").map(|s| s.to_int())\n   |                                                               ^ help: add `;` here\n24 | \n25 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `to_int` found for reference `&str` in the current scope\n  --> /tmp/tmpnzplxa64.rs:23:54\n   |\n23 |   let [month, day, year] = date.split(\"-\").map(|s| s.to_int())\n   |                                                      ^^^^^^ method not found in `&str`\n\nerror[E0529]: expected an array or slice, found `Map<std::str::Split<'_, &str>, _>`\n  --> /tmp/tmpnzplxa64.rs:23:7\n   |\n23 |   let [month, day, year] = date.split(\"-\").map(|s| s.to_int())\n   |       ^^^^^^^^^^^^^^^^^^ pattern cannot match with input type `Map<std::str::Split<'_, &str>, _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0529, E0599.\nFor more information about an error, try `rustc --explain E0529`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !is_valid_month(month) {\n    return false\n  }\n\n  if !is_valid_day(day) {\n    return false\n  }\n\n  if !is_valid_year(year) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpuq9j6e8y.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuq9j6e8y.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpuq9j6e8y.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0425]: cannot find function `is_valid_month` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:39:7\n   |\n39 |   if !is_valid_month(month) {\n   |       ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_day` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:43:7\n   |\n43 |   if !is_valid_day(day) {\n   |       ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_valid_year` in this scope\n  --> /tmp/tmpuq9j6e8y.rs:47:7\n   |\n47 |   if !is_valid_year(year) {\n   |       ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpuq9j6e8y.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpuq9j6e8y.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2]\n   |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n  if !month {\n    return false\n  }\n  let month_num = parseInt(month[1])\n  let day = parseInt(month[2])\n  let year = parseInt(month[3])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpddb7a55m.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpddb7a55m.rs:22:38\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                                      ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpddb7a55m.rs:22:47\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                                               ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpddb7a55m.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpddb7a55m.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{1,2})(\\d{1,2})(\\d{4})/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpddb7a55m.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  const month = date.match(/^(0[1-9]|1[0-2])/).toString()\n  const day = date.match(/^(0[1-9]|[12][0-9]|3[01])/).toString()\n  const year = date.match(/^(19|20)\\d\\d/).toString()\n\n  if year.length != 4 {\n    return false\n  }\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpliwt24kz.rs:28:36\n   |\n28 |   const year = date.match(/^(19|20)\\d\\d/).toString()\n   |                                    ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpliwt24kz.rs:28:38\n   |\n28 |   const year = date.match(/^(19|20)\\d\\d/).toString()\n   |                                      ^\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpliwt24kz.rs:23:60\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                            ^ help: add `;` here\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `const`\n  --> /tmp/tmpliwt24kz.rs:24:88\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                        ^ help: add `;` here\n25 | \n26 |   const month = date.match(/^(0[1-9]|1[0-2])/).toString()\n   |   ----- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpliwt24kz.rs:26:22\n   |\n26 |   const month = date.match(/^(0[1-9]|1[0-2])/).toString()\n   |                      ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n26 |   const month = date.r#match(/^(0[1-9]|1[0-2])/).toString()\n   |                      ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpliwt24kz.rs:26:28\n   |\n26 |   const month = date.match(/^(0[1-9]|1[0-2])/).toString()\n   |                            ^ expected expression\n\nerror: missing type for `const` item\n  --> /tmp/tmpliwt24kz.rs:23:9\n   |\n23 |   const months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |         ^^^^^^ help: provide a type for the constant: `months: [&str; 7]`\n\nerror: missing type for `const` item\n  --> /tmp/tmpliwt24kz.rs:24:9\n   |\n24 |   const days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |         ^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let month_num = parseInt(month[0])\n  let day = parseInt(month[1])\n  let year = parseInt(month[2])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n  if month_num == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day < 1 || day > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpeg2wz60s.rs:22:29\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpeg2wz60s.rs:22:37\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpeg2wz60s.rs:22:45\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpeg2wz60s.rs:22:20\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n22 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpeg2wz60s.rs:22:26\n   |\n22 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpeg2wz60s.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length < 2 || month.length > 3 {\n    return false\n  }\n\n  if day.length < 2 || day.length > 3 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !(month.match(/^[1-9]$/)) {\n    return false\n  }\n\n  if !(day.match(/^[1-9]$/)) {\n    return false\n  }\n\n  if !(year.match(/^[0-9]{4}$/)) {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpbsjk3lcq.rs:23:33\n   |\n23 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpbsjk3lcq.rs:24:31\n   |\n24 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpbsjk3lcq.rs:25:32\n   |\n25 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n26 | \n27 |   if month.length < 2 || month.length > 3 {\n   |   -- unexpected token\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpbsjk3lcq.rs:39:14\n   |\n39 |   if !(month.match(/^[1-9]$/)) {\n   |              ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n39 |   if !(month.r#match(/^[1-9]$/)) {\n   |              ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpbsjk3lcq.rs:39:20\n   |\n39 |   if !(month.match(/^[1-9]$/)) {\n   |                    ^ expected expression\n\nerror: expected `{`, found `)`\n  --> /tmp/tmpbsjk3lcq.rs:39:30\n   |\n39 |   if !(month.match(/^[1-9]$/)) {\n   |   --                         ^ expected `{`\n   |   |\n   |   this `if` expression has a condition, but no block\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpbsjk3lcq.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbsjk3lcq.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpbsjk3lcq.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n  if !month {\n    return false\n  }\n\n  let month_num = parseInt(month[1])\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  let day = parseInt(month[2])\n  if month_num == 2 && day < 1 || month_num != 2 && day < 1 || month_num == 2 && day > 29 || month_num != 2 && day > 30 {\n    return false\n  }\n\n  let year = parseInt(month[3])\n  if year < 1 || year > 9999 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpdyxvskyt.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpdyxvskyt.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpdyxvskyt.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                                             ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpdyxvskyt.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpdyxvskyt.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/)\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpdyxvskyt.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if month.length != 3 || day.length != 2 || year.length != 4 {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if month_num < 1 || month_num > 12 {\n    return false\n  }\n\n  if month_num == 2 {\n    if day_num < 1 || day_num > 29 {\n      return false\n    }\n  } else if month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12 {\n    if day_num < 1 || day_num > 31 {\n      return false\n    }\n  } else if month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11 {\n    if day_num < 1 || day_num > 30 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpkz_sma6d.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpkz_sma6d.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpkz_sma6d.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpkz_sma6d.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.split(\"-\")[0].toInt()\n  let day = date.split(\"-\")[1].toInt()\n  let year = date.split(\"-\")[2].toInt()\n\n  if month < 1 || month > 12 {\n    return false\n  }\n\n  if day < 1 || day > 31 {\n    return false\n  }\n\n  if month == 2 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n    if day < 1 || day > 30 {\n      return false\n    }\n  } else if month == 4 || month == 6 || month == 9 || month == 11 {\n    if day < 1 || day > 29 {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:23:41\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |                                         ^ help: add `;` here\n24 |   let day = date.split(\"-\")[1].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoccak8xg.rs:24:39\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |                                       ^ help: add `;` here\n25 |   let year = date.split(\"-\")[2].toInt()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoccak8xg.rs:25:40\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |                                        ^ help: add `;` here\n26 | \n27 |   if month < 1 || month > 12 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpoccak8xg.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:23:15\n   |\n23 |   let month = date.split(\"-\")[0].toInt()\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:24:13\n   |\n24 |   let day = date.split(\"-\")[1].toInt()\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpoccak8xg.rs:25:14\n   |\n25 |   let year = date.split(\"-\")[2].toInt()\n   |              ^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n  let day = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n  let year = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n\n  if month[0] < 1 || month[0] > 12 {\n    return false\n  }\n\n  if month[1] < 1 || month[1] > 31 {\n    return false\n  }\n\n  if month[2] < 1 || month[2] > 31 {\n    return false\n  }\n\n  if month[3] < 1 || month[3] > 12 {\n    return false\n  }\n\n  if day[0] < 1 || day[0] > 31 {\n    return false\n  }\n\n  if day[1] < 1 || day[1] > 30 {\n    return false\n  }\n\n  if day[2] < 1 || day[2] > 29 {\n    return false\n  }\n\n  if year[3] < 1 || year[3] > 9999 {\n    return false\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmp_n5_3fnt.rs:23:20\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmp_n5_3fnt.rs:23:26\n   |\n23 |   let month = date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/).groups()\n   |                          ^ expected expression\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmp_n5_3fnt.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if (date.isEmpty()) {\n    return false\n  }\n\n  let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n  let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n  let year = date.match(/^(\\d{4})$/).groups()\n\n  if (month.length != 3 || day.length != 2 || year.length != 4) {\n    return false\n  }\n\n  let month_num = parseInt(month[0])\n  let day_num = parseInt(day[0])\n  let year_num = parseInt(year[0])\n\n  if (month_num < 1 || month_num > 12) {\n    return false\n  }\n\n  if (month_num == 2) {\n    if (day_num < 1 || day_num > 29) {\n      return false\n    }\n  } else if (month_num == 1 || month_num == 3 || month_num == 5 || month_num == 7 || month_num == 8 || month_num == 10 || month_num == 12) {\n    if (day_num < 1 || day_num > 31) {\n      return false\n    }\n  } else if (month_num == 4 || month_num == 6 || month_num == 9 || month_num == 11) {\n    if (day_num < 1 || day_num > 30) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:23:29\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:23:37\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                     ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:23:45\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                                             ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:24:27\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                           ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:24:35\n   |\n24 |   let day = date.match(/^(\\d{2})-(\\d{2})$/).groups()\n   |                                   ^\n\nerror: unknown start of token: \\\n  --> /tmp/tmpw0pm3_va.rs:25:28\n   |\n25 |   let year = date.match(/^(\\d{4})$/).groups()\n   |                            ^\n\nerror: expected identifier, found keyword `match`\n  --> /tmp/tmpw0pm3_va.rs:23:20\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n23 |   let month = date.r#match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                    ++\n\nerror: expected expression, found `/`\n  --> /tmp/tmpw0pm3_va.rs:23:26\n   |\n23 |   let month = date.match(/^(\\d{2})-(\\d{2})-(\\d{4})$/).groups()\n   |                          ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpw0pm3_va.rs:19:6\n   |\n19 |   if (date.isEmpty()) {\n   |      ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (date.isEmpty()) {\n19 +   if date.isEmpty() {\n   | \n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpw0pm3_va.rs:19:12\n   |\n19 |   if (date.i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(String::from(\"03-11-2000\"))\n/// true\n/// >>> valid_date(String::from(\"15-01-2012\"))\n/// false\n/// >>> valid_date(String::from(\"04-0-2040\"))\n/// false\n/// >>> valid_date(String::from(\"06-04-2020\"))\n/// true\n/// >>> valid_date(String::from(\"06/04/2020\"))\n/// false\nfn valid_date(date: String) -> bool {\n  if date.isEmpty() {\n    return false\n  }\n\n  let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n  let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n  let month = date.split(\"-\")[0]\n  let day = date.split(\"-\")[1]\n  let year = date.split(\"-\")[2]\n\n  if month.length != 2 {\n    return false\n  }\n\n  if day.length != 2 {\n    return false\n  }\n\n  if year.length != 4 {\n    return false\n  }\n\n  if !months.includes(month) {\n    return false\n  }\n\n  if !days.includes(day) {\n    return false\n  }\n\n  if month == \"02\" {\n    if day < \"01\" || day > \"29\" {\n      return false\n    }\n  } else {\n    if day < \"01\" || day > \"30\" {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")), false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")), true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")), true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"04-2003\")), false);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpz10r4uah.rs:23:58\n   |\n23 |   let months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n   |                                                          ^ help: add `;` here\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpz10r4uah.rs:24:86\n   |\n24 |   let days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n   |                                                                                      ^ help: add `;` here\n25 | \n26 |   let month = date.split(\"-\")[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpz10r4uah.rs:26:33\n   |\n26 |   let month = date.split(\"-\")[0]\n   |                                 ^ help: add `;` here\n27 |   let day = date.split(\"-\")[1]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpz10r4uah.rs:27:31\n   |\n27 |   let day = date.split(\"-\")[1]\n   |                               ^ help: add `;` here\n28 |   let year = date.split(\"-\")[2]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpz10r4uah.rs:28:32\n   |\n28 |   let year = date.split(\"-\")[2]\n   |                                ^ help: add `;` here\n29 | \n30 |   if month.length != 2 {\n   |   -- unexpected token\n\nerror[E0599]: no method named `isEmpty` found for struct `String` in the current scope\n  --> /tmp/tmpz10r4uah.rs:19:11\n   |\n19 |   if date.isEmpty() {\n   |           ^^^^^^^ help: there is an associated function with a similar name: `is_empty`\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpz10r4uah.rs:26:15\n   |\n26 |   let month = date.split(\"-\")[0]\n   |               ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `std::str::Split<'_, &str>`\n  --> /tmp/tmpz10r4uah.rs:27:13\n   |\n27 |   let day = date.split(\"-\")[1]\n   |             ^^^^^^^^^^^^^^^^^^\n\nerror[E0608]: cannot",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}