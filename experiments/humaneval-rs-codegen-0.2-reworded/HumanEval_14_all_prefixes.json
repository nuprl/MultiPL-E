{
  "name": "HumanEval_14_all_prefixes",
  "language": "rs",
  "prompt": "/// Return vector of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String) -> Vec<String> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\")]);\n}\n",
  "completions": [
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr += ch;\n    } else {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = string;\n  while (cur.len > 0) {\n    prefixes.push(cur);\n    cur = cur.sub(0, cur.len - 1);\n  }\n  prefixes.push(String::from(\"\"));\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let current_char = string.get(i);\n    if (current_char.is_upper()) {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += current_char;\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(0, i + 1);\n    prefixes.push(prefix);\n  }\n  prefixes",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i, string.len());\n    prefixes.push(prefix);\n  }\n  prefixes",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    prefixes.push(prefix);\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (i in string) {\n    if (current.len() == 0) {\n      current += i;\n    } else {\n      current += i;\n      prefixes.push(current);\n      current = String::from(\"\");\n    }\n  }\n  if (current.len() > 0) {\n    prefixes.push(current);\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\"));\n      cur = cur.concat(String::from(\"\")",
    "  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current_prefix);\n      current_prefix = String::from(\"\");\n    } else {\n      current_prefix += string.get(i);\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == ' ') {\n      if (current_prefix.len() > 0) {\n        prefixes.push(current_prefix);\n        current_prefix = String::from(\"\");\n      }\n    } else {\n      current_prefix += string.get(i);\n    }\n  }\n  if (current_prefix.len() > 0) {\n    prefixes.push(current_prefix);\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr_prefix = curr_prefix.concat(ch);\n      prefixes.push(curr_prefix);\n      curr_prefix = String::from(\"\");\n    } else {\n      curr_prefix = curr_prefix.concat(ch);\n    }\n  }\n  prefixes.push(curr_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(String::from(\"\"));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i, string.len());\n    prefixes.push(prefix);\n  }\n  prefixes",
    "  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    prefixes.push(prefix);\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    prefixes.push(prefix);\n  }\n  prefixes.push(prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i, string.len());\n    if prefix.len() > 0 {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i, string.len());\n    if prefix.len() > 0 {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes.sort();\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  prefixes.sort();\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let c of string) {\n    if (current_prefix.len() == 0) {\n      current_prefix += c;\n    } else if (current_prefix.ends_with(c)) {\n      current_prefix += c;\n    } else {\n      prefixes.push(current_prefix);\n      current_prefix = String::from(c);\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut result = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    result.push(prefix);\n    prefix = prefix.concat(String::from(\"\"));\n  }\n  result.push(prefix);\n  return result;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (curr.len() == 0 || curr.get(curr.len() - 1) != c) {\n      curr += c;\n      prefixes.push(curr);\n    }\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.cat(string.get(i));\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut result = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      result.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(String::from(\"\"));\n      current = current.cat(string.get(i));\n    }\n  }\n  result.push(current);\n  return result;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut result = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur += ch;\n      result.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur += ch.to_lower();\n    }\n  }\n  result.push(cur);\n  return result;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (i in 0..string.len()) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    prefixes.push(prefix);\n  }\n  prefixes",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i := 0; i < string.len(); i++) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  prefixes",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (cur.len() == 0 || cur.get(cur.len() - 1) != c) {\n      cur = cur.concat(c);\n      prefixes.push(cur);\n    }\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current_prefix);\n      current_prefix = String::from(\"\");\n    } else {\n      current_prefix += string.get(i);\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (let i = 0; i < string.len(); i++) {\n    let prefix = string.sub(i);\n    if (prefix.len() > 0) {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes.sort();\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  if (current.len() > 0) {\n    prefixes.push(current);\n  }\n  return prefixes;",
    "  let mut result = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      result.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(string.get(i));\n    }\n  }\n  result.push(current);\n  return result;",
    "  let mut result = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i).is_upper()) {\n      current = current.concat(String::from(string.get(i).to_lower()));\n    } else {\n      result.push(current);\n      current = String::from(\"\");\n    }\n  }\n  result.push(current);\n  return result;",
    "  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  let mut i = 0;\n\n  while (i < string.len()) {\n    prefix = prefix + string[i];\n    prefixes.push(prefix);\n    i += 1;\n  }\n\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i := 0; i < string.len(); i++) {\n    let prefix = string.sub(0, i + 1);\n    if prefixes.contains(prefix) {\n      continue;\n    }\n    prefixes.push(prefix);\n  }\n  prefixes.sort();\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(String::from(string.get(i)));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string[i] == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string[i];\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string[i] == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string[i];\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let c of string) {\n    if (current_prefix.len() == 0) {\n      current_prefix = String::from(c);\n    } else {\n      if (c == current_prefix.data()[current_prefix.len() - 1]) {\n        current_prefix = current_prefix.drop_back();\n      } else {\n        prefixes.push(current_prefix);\n        current_prefix = String::from(c);\n      }\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(string.get(i));\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(string.get(i));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    let prefix = string.sub(0, i + 1);\n    if prefixes.contains(prefix) {\n      continue;\n    }\n    prefixes.push(prefix);\n  }\n  prefixes",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let current_char = string.get(i);\n    if (current_char.is_upper()) {\n      current = current.concat(current_char.to_lower());\n    } else {\n      prefixes.push(current);\n      current = String::from(\"\");\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (cur.len() == 0 || cur.get(cur.len() - 1) != c) {\n      cur = cur.concat(String::from(c));\n      prefixes.push(cur);\n    }\n  }\n  return prefixes;",
    "  let mut result = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    result.push(prefix);\n  }\n  return result;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current_prefix);\n      current_prefix = String::from(\"\");\n    } else {\n      current_prefix += string.get(i);\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch.to_lower());\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i, string.len());\n    if prefix.len() > 0 {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (i in 0..string.len()) {\n    prefix = prefix.concat(string.sub(i, string.len()));\n    prefixes.push(prefix);\n  }\n  prefixes",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string[i] == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string[i];\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    prefix = prefix.concat(String::from(string.get(i)));\n    prefixes.push(prefix);\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(String::from(string.get(i)));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (curr.len() == 0 || curr.get(curr.len() - 1) != c) {\n      curr += c;\n      prefixes.push(curr);\n    }\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(string.get(i));\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr_prefix = curr_prefix.concat(ch);\n      prefixes.push(curr_prefix);\n      curr_prefix = String::from(\"\");\n    } else {\n      curr_prefix = curr_prefix.concat(ch);\n    }\n  }\n  prefixes.push(curr_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(string.get(i));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  if (current.len() > 0) {\n    prefixes.push(current);\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  prefixes.sort();\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i);\n    if prefix.len() > 0 {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(string.get(i));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string[i] == '.') {\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur += string[i];\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(String::from(\"\"));\n      current = current.cat(String::from(string.get(i)));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr = curr.concat(ch);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(curr_prefix);\n      curr_prefix = String::from(\"\");\n    } else {\n      curr_prefix = curr_prefix.concat(c);\n    }\n  }\n  prefixes.push(curr_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string[i] == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string[i];\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current_prefix);\n      current_prefix = String::from(\"\");\n    } else {\n      current_prefix += string.get(i);\n    }\n  }\n  prefixes.push(current_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  if (current.len() > 0) {\n    prefixes.push(current);\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut cur = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      cur = cur.concat(ch);\n      prefixes.push(cur);\n      cur = String::from(\"\");\n    } else {\n      cur = cur.concat(ch);\n    }\n  }\n  prefixes.push(cur);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.sub(0, i));\n  }\n  prefixes.sort();\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.cat(string.get(i));\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += c;\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr_prefix = curr_prefix.concat(ch);\n      prefixes.push(curr_prefix);\n      curr_prefix = String::from(\"\");\n    } else {\n      curr_prefix = curr_prefix.concat(ch);\n    }\n  }\n  prefixes.push(curr_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    let prefix = string.sub(i);\n    if prefix.len() > 0 {\n      prefixes.push(prefix);\n    }\n  }\n  prefixes.sort();\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.substr(0, i + 1));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let current_char = string.get(i);\n    if (current_char.is_upper()) {\n      current = current.concat(current_char.to_lower());\n    } else {\n      prefixes.push(current);\n      current = String::from(\"\");\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i + 1));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '.') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current += string.get(i);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr_prefix = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr_prefix = curr_prefix.concat(ch);\n      prefixes.push(curr_prefix);\n      curr_prefix = String::from(\"\");\n    } else {\n      curr_prefix = curr_prefix.concat(ch);\n    }\n  }\n  prefixes.push(curr_prefix);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.length()) {\n    prefixes.push(string.substr(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      curr = curr.concat(ch);\n    } else {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let ch = string.get(i);\n    if (ch.is_upper()) {\n      current = current.concat(ch);\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(ch);\n    }\n  }\n  if (current.len() > 0) {\n    prefixes.push(current);\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  for (i in 0..string.len()) {\n    prefixes.push(string.sub(0, i));\n  }\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut curr = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    if (string.get(i) == '\\0') {\n      prefixes.push(curr);\n      curr = String::from(\"\");\n    } else {\n      curr += string.get(i);\n    }\n  }\n  prefixes.push(curr);\n  return prefixes;",
    "  let mut prefixes = Vec::new();\n  let mut current = String::from(\"\");\n  for (let i = 0; i < string.len(); i++) {\n    let c = string.get(i);\n    if (c == '\\0') {\n      prefixes.push(current);\n      current = String::from(\"\");\n    } else {\n      current = current.concat(c);\n    }\n  }\n  prefixes.push(current);\n  return prefixes;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}