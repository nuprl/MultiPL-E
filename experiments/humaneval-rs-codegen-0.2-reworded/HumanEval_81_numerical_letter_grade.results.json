{
  "name": "HumanEval_81_numerical_letter_grade",
  "language": "rs",
  "prompt": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_increment = 1;\n    let grade_table_value_increment = 0.1;\n    let grade_table_letter_increment = \"A\";\n    let grade_table_grade_increment = \"A\";\n    let grade_table_index_decrement = 0;\n    let grade_table_value_decrement = 0.0;\n    let grade_table_letter_decrement = \"A\";\n    let grade_table_grade_decrement = \"A\";\n    let grade_table_index_decrement_increment = 1;\n    let grade_table_value_decrement_increment = 0.1;\n    let grade_table_letter_decrement_increment = \"A\";\n    let grade_table_grade_decrement_increment = \"A\";\n    let grade_table_index_increment_decrement = 1;\n    let grade_table_value_increment_decrement = 0.1;\n    let grade_table_letter_increment_decrement = \"A\";\n    let grade_table_grade_increment_decrement = \"A\";\n    let grade_table_index_decrement_decrement = 0;\n    let grade_table_value_decrement_decrement = 0.0;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsydurabw.rs:37:15\n   |\n37 |         [\"E\", 0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    let grades_sum_len = 0;\n    let grades_sum_len_len = 0;\n    let grades_sum_len_sum = 0.0;\n    let grades_sum_len_sum_len = 0;\n    let grades_sum_len_sum_len_sum = 0.0;\n    let grades_sum_len_sum_len_sum_len = 0;\n    let grades_sum_len_sum_len_sum_len_sum = 0.0;\n    let grades_sum_len_sum_len_sum_len_sum_len = 0;\n    let grades_sum_len_sum_len_sum_len_sum_len_sum = 0.0;\n    let grades_sum_len_sum_len_sum_len_sum_len_sum_len = 0;\n    let grades_sum_len_sum_len_sum_len_sum_len_sum_len_sum = 0.0;\n    let grades_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len = 0;\n    let grades_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = 0.0;\n    let grades_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len = 0;\n    let grades_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = 0.0;\n    let grades_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len = 0;\n    let grades_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = 0.0;\n    let grades_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len = 0;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmp_0mcguzg.rs:45:1\n   |\n45 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp6tm9y26u.rs:42:52\n   |\n42 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n   |                                                    ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0599]: no method named `vec` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmp6tm9y26u.rs:25:29\n   |\n25 |     let grades_vec = grades.vec();\n   |                             ^^^ help: there is an associated function with a similar name: `to_vec`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6tm9y26u.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_next_index - 1;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmptryjapv4.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmptryjapv4.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_letter = grade_table_letter;\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_letter = grade_table_value_letter;\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_letter = grade_table_value_value_letter;\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_letter = grade_table_value_value_value_letter;\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp22onqgna.rs:56:44\n   |\n56 |     let grade_table_value_value_value_value\n   |                                            ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_letter = grade_table_letter;\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_letter = grade_table_value_letter;\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_letter = grade_table_value_value_letter;\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_letter = grade_table_value_value_value_letter;\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpfyzugumi.rs:56:44\n   |\n56 |     let grade_table_value_value_value_value\n   |                                            ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_next_index - 1;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmptryjapv4.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmptryjapv4.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_increment = 0;\n    let grade_table_value_increment = 0.0;\n    let grade_table_letter_increment = \"\";\n    let grade_table_grade_increment = \"\";\n    let grade_table_index_decrement = 0;\n    let grade_table_value_decrement = 0.0;\n    let grade_table_letter_decrement = \"\";\n    let grade_table_grade_decrement = \"\";\n    let grade_table_index_decrement_increment = 0;\n    let grade_table_value_decrement_increment = 0.0;\n    let grade_table_letter_decrement_increment = \"\";\n    let grade_table_grade_decrement_increment = \"\";\n    let grade_table_index_increment_decrement = 0;\n    let grade_table_value_increment_decrement = 0.0;\n    let grade_table_letter_increment_decrement = \"\";\n    let grade_table_grade_increment_decrement = \"\";\n    let grade_table_index_decrement_decrement = 0;\n    let grade_table_value_decrement_decrement = 0.0;\n    let grade_table_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmptk_eh7fy.rs:62:27\n   |\n62 |     let grade_table_letter\n   |                           ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:36:16\n   |\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = grades.map(|g| {\n        let grade = g;\n        if (grade < 0.7) {\n            return \"D-\";\n        } else if (grade < 1.3) {\n            return \"C-\";\n        } else if (grade < 2.0) {\n            return \"B-\";\n        } else if (grade < 2.7) {\n            return \"B\";\n        } else if (grade < 3.0) {\n            return \"A-\";\n        } else if (grade < 3.3) {\n            return \"A\";\n        } else if (grade < 3.7) {\n            return \"A+\";\n        } else {\n            return \"C+\";\n        }\n    });\n    return grades_map.map(|g| String::from(g));\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:26:12\n   |\n26 |         if (grade < 0.7) {\n   |            ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n26 -         if (grade < 0.7) {\n26 +         if grade < 0.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:28:19\n   |\n28 |         } else if (grade < 1.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n28 -         } else if (grade < 1.3) {\n28 +         } else if grade < 1.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:30:19\n   |\n30 |         } else if (grade < 2.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n30 -         } else if (grade < 2.0) {\n30 +         } else if grade < 2.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:32:19\n   |\n32 |         } else if (grade < 2.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n32 -         } else if (grade < 2.7) {\n32 +         } else if grade < 2.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:34:19\n   |\n34 |         } else if (grade < 3.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n34 -         } else if (grade < 3.0) {\n34 +         } else if grade < 3.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:36:19\n   |\n36 |         } else if (grade < 3.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n36 -         } else if (grade < 3.3) {\n36 +         } else if grade < 3.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:38:19\n   |\n38 |         } else if (grade < 3.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n38 -         } else if (grade < 3.7) {\n38 +         } else if gra",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let grade_table = [\n        [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"],\n        [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"],\n        [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"],\n        [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"],\n        [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"],\n        [\"A+\",\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpky3tl8b5.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpky3tl8b5.rs:59:9\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n59 |         [\"A+\",\n   |         ^ unclosed delimiter\n60 | }\n   | ^ mismatched closing delimiter\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp6tm9y26u.rs:42:52\n   |\n42 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n   |                                                    ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0599]: no method named `vec` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmp6tm9y26u.rs:25:29\n   |\n25 |     let grades_vec = grades.vec();\n   |                             ^^^ help: there is an associated function with a similar name: `to_vec`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6tm9y26u.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_letter = grade_table_letter;\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_letter = grade_table_value_letter;\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_letter = grade_table_value_value_letter;\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_letter = grade_table_value_value_value_letter;\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpfyzugumi.rs:56:44\n   |\n56 |     let grade_table_value_value_value_value\n   |                                            ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa) {\n        if gpa >= 4.0 {\n            \"A+\"\n        } else if gpa >= 3.7 {\n            \"A\"\n        } else if gpa >= 3.3 {\n            \"A-\"\n        } else if gpa >= 3.0 {\n            \"B+\"\n        } else if gpa >= 2.7 {\n            \"B\"\n        } else if gpa >= 2.3 {\n            \"B-\"\n        } else if gpa >= 2.0 {\n            \"C+\"\n        } else if gpa >= 1.7 {\n            \"C\"\n        } else if gpa >= 1.3 {\n            \"C-\"\n        } else if gpa >= 1.0 {\n            \"D+\"\n        } else if gpa >= 0.7 {\n            \"D\"\n        } else if gpa >= 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n        }\n    }\n    let letter_grades = grades.map(grade_equation)\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpsmek80tk.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn(gpa) {\n        if gpa > 4.0 {\n            \"A+\"\n        } else if gpa > 3.7 {\n            \"A\"\n        } else if gpa > 3.3 {\n            \"A-\"\n        } else if gpa > 3.0 {\n            \"B+\"\n        } else if gpa > 2.7 {\n            \"B\"\n        } else if gpa > 2.3 {\n            \"B-\"\n        } else if gpa > 2.0 {\n            \"C+\"\n        } else if gpa > 1.7 {\n            \"C\"\n        } else if gpa > 1.3 {\n            \"C-\"\n        } else if gpa > 1.0 {\n            \"D+\"\n        } else if gpa > 0.7 {\n            \"D\"\n        } else if gpa > 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n        }\n    }\n    let grades_string = grades.map(grade_equation)\n    return grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpcjr3r6k5.rs:24:26\n   |\n24 |     let grade_equation = fn(gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_letter = grade_table_letter;\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_letter = grade_table_value_letter;\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_letter = grade_table_value_value_letter;\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_letter = grade_table_value_value_value_letter;\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp22onqgna.rs:56:44\n   |\n56 |     let grade_table_value_value_value_value\n   |                                            ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_letter = grade_table_letter;\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_letter = grade_table_value_letter;\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_letter = grade_table_value_value_letter;\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_letter = grade_table_value_value_value_letter;\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpfyzugumi.rs:56:44\n   |\n56 |     let grade_table_value_value_value_value\n   |                                            ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        [\"A+\", \"A\"],\n        [\"A\", \"A-\"],\n        [\"B+\", \"B\"],\n        [\"B\", \"B-\"],\n        [\"C+\", \"C\"],\n        [\"C\", \"C-\"],\n        [\"D+\", \"D\"],\n        [\"D\", \"D-\"],\n        [\"E\", \"E\"]\n    ];\n    let letter_grades = vec![];\n    for (i in grades) {\n        let grade = grades[i];\n        let letter_grade = grades_to_letter_grade[grade];\n        letter_grades = vec![letter_grades, letter_grade];\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmplzet7su7.rs:36:12\n   |\n36 |     for (i in grades) {\n   |            ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmplzet7su7.rs:36:9\n   |\n36 |     for (i in grades) {\n   |         ^           ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n36 -     for (i in grades) {\n36 +     for i in grades {\n   | \n\nerror[E0277]: the type `[f64]` cannot be indexed by `f64`\n  --> /tmp/tmplzet7su7.rs:37:21\n   |\n37 |         let grade = grades[i];\n   |                     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[f64]>` is not implemented for `f64`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<f64>` for `Vec<f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplzet7su7.rs:39:25\n   |\n39 |         letter_grades = vec![letter_grades, letter_grade];\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n   |\n   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_grade = grade_table_value[0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[1];\n    let grade_table_next_grade = grade_table_next_value[0];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[1];\n    let grade_table_next_next_grade = grade_table_next_next_value[0];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[1];\n    let grade_table_next_next_next_grade = grade_table_next_next_next_value[\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found `]`\n  --> /tmp/tmp3__mllf3.rs:56:1\n   |\n56 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp3__mllf3.rs:55:76\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n55 |     let grade_table_next_next_next_grade = grade_table_next_next_next_value[\n   |                                                                            ^ unclosed delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_value_index];\n    let grade_table_value_value_value_value_value_value_index = 6;\n    let grade_table_value_value_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpbzie4n2u.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpbzie4n2u.rs:54:82\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_value_value_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_value_value\n   |                                                                                  ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbzie4n2u.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbzie4n2u.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbzie4n2u.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbzie4n2u.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbzie4n2u.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbzie4n2u.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbzie4n2u.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbzie4n2u.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatche",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_gpa = grade_table_value[0];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[1];\n    let grade_table_gpa_next = grade_table_value_next[0];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[1];\n    let grade_table_gpa_prev = grade_table_value_prev[0];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpth2nzji5.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpth2nzji5.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"\n    ];\n    let letter_grades = Vec::new();\n    for (grade in grades) {\n        let grade_index = grades_to_letter_grade.indexOf(grade);\n        letter_grades.push(grades_to_letter_grade[grade_index]);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmp23k74xz6.rs:28:16\n   |\n28 |     for (grade in grades) {\n   |                ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp23k74xz6.rs:28:9\n   |\n28 |     for (grade in grades) {\n   |         ^               ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n28 -     for (grade in grades) {\n28 +     for grade in grades {\n   | \n\nerror[E0599]: no method named `indexOf` found for array `[&str; 13]` in the current scope\n  --> /tmp/tmp23k74xz6.rs:29:50\n   |\n29 |         let grade_index = grades_to_letter_grade.indexOf(grade);\n   |                                                  ^^^^^^^ method not found in `[&str; 13]`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[0];\n    let grade_table_next_gpa = grade_table_next_value[1];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[0];\n    let grade_table_next_next_gpa = grade_table_next_next_value[1];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[0];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpiouucm6g.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmpiouucm6g.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn(gpa) {\n        if gpa >= 4.0 {\n            \"A+\"\n        } else if gpa >= 3.7 {\n            \"A\"\n        } else if gpa >= 3.3 {\n            \"A-\"\n        } else if gpa >= 3.0 {\n            \"B+\"\n        } else if gpa >= 2.7 {\n            \"B\"\n        } else if gpa >= 2.3 {\n            \"B-\"\n        } else if gpa >= 2.0 {\n            \"C+\"\n        } else if gpa >= 1.7 {\n            \"C\"\n        } else if gpa >= 1.3 {\n            \"C-\"\n        } else if gpa >= 1.0 {\n            \"D+\"\n        } else if gpa >= 0.7 {\n            \"D\"\n        } else if gpa >= 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n        }\n    }\n    let grades_string = grades.map(grade_equation).join(\" \")\n    let grades_vector = grades_string.split(\" \")\n    return grades_vector\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpttnmaao4.rs:24:26\n   |\n24 |     let grade_equation = fn(gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_index + 2;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpm55a6li_.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpm55a6li_.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm55a6li_.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm55a6li_.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm55a6li_.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm55a6li_.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm55a6li_.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm55a6li_.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm55a6li_.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm55a6li_.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm55a6li_.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = grades.map(|g| {\n        let grade = g;\n        if (grade < 0.7) {\n            return \"D-\";\n        } else if (grade < 1.3) {\n            return \"C-\";\n        } else if (grade < 2.0) {\n            return \"B-\";\n        } else if (grade < 2.7) {\n            return \"B\";\n        } else if (grade < 3.0) {\n            return \"A-\";\n        } else if (grade < 3.3) {\n            return \"A\";\n        } else if (grade < 3.7) {\n            return \"A+\";\n        } else {\n            return \"C+\";\n        }\n    });\n    return grades_map.map(|g| String::from(g));\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:26:12\n   |\n26 |         if (grade < 0.7) {\n   |            ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n26 -         if (grade < 0.7) {\n26 +         if grade < 0.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:28:19\n   |\n28 |         } else if (grade < 1.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n28 -         } else if (grade < 1.3) {\n28 +         } else if grade < 1.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:30:19\n   |\n30 |         } else if (grade < 2.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n30 -         } else if (grade < 2.0) {\n30 +         } else if grade < 2.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:32:19\n   |\n32 |         } else if (grade < 2.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n32 -         } else if (grade < 2.7) {\n32 +         } else if grade < 2.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:34:19\n   |\n34 |         } else if (grade < 3.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n34 -         } else if (grade < 3.0) {\n34 +         } else if grade < 3.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:36:19\n   |\n36 |         } else if (grade < 3.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n36 -         } else if (grade < 3.3) {\n36 +         } else if grade < 3.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:38:19\n   |\n38 |         } else if (grade < 3.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n38 -         } else if (grade < 3.7) {\n38 +         } else if gra",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        [\"A+\", \"A\"],\n        [\"A\", \"A-\"],\n        [\"B+\", \"B\"],\n        [\"B\", \"B-\"],\n        [\"C+\", \"C\"],\n        [\"C\", \"C-\"],\n        [\"D+\", \"D\"],\n        [\"D\", \"D-\"],\n        [\"E\", \"E\"]\n    ];\n    let letter_grades = grades_to_letter_grade.map(\n        (grade, letter_grade) =>\n            grade.to_s + \" \" + letter_grade\n    );\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmptqzcxq1k.rs:36:31\n   |\n36 |         (grade, letter_grade) =>\n   |                               ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[0];\n    let grade_table_gpa_next = grade_table_value_next[1];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[0];\n    let grade_table_gpa_prev = grade_table_value_prev[1];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpi57gpls3.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_index - 2;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpcrcx4sxj.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpcrcx4sxj.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let grade_table = [\n        [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"],\n        [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"],\n        [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"],\n        [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"],\n        [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"],\n        [\"A+\",\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpky3tl8b5.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpky3tl8b5.rs:59:9\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n59 |         [\"A+\",\n   |         ^ unclosed delimiter\n60 | }\n   | ^ mismatched closing delimiter\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"\n    ];\n    let letter_grades = Vec::new();\n    for (i in 0..grades.len()) {\n        let grade = grades[i];\n        let letter_grade = grades_to_letter_grade[i];\n        letter_grades.push(letter_grade);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmptob92zaq.rs:28:12\n   |\n28 |     for (i in 0..grades.len()) {\n   |            ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmptob92zaq.rs:28:9\n   |\n28 |     for (i in 0..grades.len()) {\n   |         ^                    ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n28 -     for (i in 0..grades.len()) {\n28 +     for i in 0..grades.len() {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmptob92zaq.rs:33:12\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                ----------- expected `Vec<String>` because of return type\n...\n33 |     return letter_grades;\n   |            ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_len_minus_1 = grades_len - 1;\n    let grades_len_minus_2 = grades_len - 2;\n    let grades_len_minus_3 = grades_len - 3;\n    let grades_len_minus_4 = grades_len - 4;\n    let grades_len_minus_5 = grades_len - 5;\n    let grades_len_minus_6 = grades_len - 6;\n    let grades_len_minus_7 = grades_len - 7;\n    let grades_len_minus_8 = grades_len - 8;\n    let grades_len_minus_9 = grades_len - 9;\n    let grades_len_minus_10 = grades_len - 10;\n    let grades_len_minus_11 = grades_len - 11;\n    let grades_len_minus_12 = grades_len - 12;\n    let grades_len_minus_13 = grades_len - 13;\n    let grades_len_minus_14 = grades_len - 14;\n    let grades_len_minus_15 = grades_len - 15;\n    let grades_len_minus_16 = grades_len - 16;\n    let grades_len_minus_17 = grades_len - 17;\n    let grades_len_minus_18 = grades_len - 18;\n    let grades_len_minus_19 = grades_len - 19;\n    let grades_len_minus_20 = grades_len - 20;\n    let grades_len_minus_21 = grades_len - 21;\n    let grades_len_minus_22 = grades_len - 22;\n    let grades_len_minus_23 = grades_len - 23;\n    let grades_len_minus_24 = grades_len - 24;\n    let grades_len_minus_25 = grades_len - 25;\n    let grades_len_minus_26 = grades_len - 26;\n    let grades_len_minus_27 = grades_len - 27;\n    let grades_len_minus_28 = grades_len - 28;\n    let grades_len_minus_29 = grades_len - 29;\n    let grades_len_minus_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpw_hipkfb.rs:54:26\n   |\n54 |     let grades_len_minus_\n   |                          ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_hipkfb.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next][1];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev][1];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev][1];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let grade_table_value_next_next = grade_table[grade_table_index_next_next][1];\n    let grade_table_index_next_next_next = grade_table_index_next_next + 1;\n    let grade_table_value_next_next_next = grade_table[grade_table_index_next_next_next][1];\n    let grade_table_index_next_next_next_next = grade_table_index_next_next_next + 1;\n    let grade_table_value_next_next_next_next = grade_table[grade_table_index_next_next_next_next][1];\n    let grade_table_index_next\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp7ootx5fz.rs:54:31\n   |\n54 |     let grade_table_index_next\n   |                               ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ootx5fz.rs:36:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"\n    ];\n    let letter_grades = vec![];\n    for (let grade of grades) {\n        let letter_grade = grades_to_letter_grade[grade];\n        letter_grades = vec![letter_grades, letter_grade];\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp1e0q7j_6.rs:28:10\n   |\n28 |     for (let grade of grades) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grade`\n  --> /tmp/tmp1e0q7j_6.rs:28:14\n   |\n28 |     for (let grade of grades) {\n   |             -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp1e0q7j_6.rs:28:20\n   |\n28 |     for (let grade of grades) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grades`\n  --> /tmp/tmp1e0q7j_6.rs:28:23\n   |\n28 |     for (let grade of grades) {\n   |                      -^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp1e0q7j_6.rs:28:30\n   |\n28 |     for (let grade of grades) {\n   |                              ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp1e0q7j_6.rs:32:5\n   |\n32 |     return letter_grades;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n32 |     { return letter_grades; }\n   |     +                       +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_previous_previous_index = grade_table_previous_index - 1;\n    let grade_table_previous_previous_value = grade_table[grade_table_previous_previous_index][1];\n    let grade_table_previous_previous_letter = grade_table[grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpd5z_3oo8.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpd5z_3oo8.rs:54:59\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_previous_previous_letter = grade_table[grade\n   |                                                           ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_increment = 0;\n    let grade_table_value_increment = 0.0;\n    let grade_table_letter_increment = \"\";\n    let grade_table_grade_increment = \"\";\n    let grade_table_index_decrement = 0;\n    let grade_table_value_decrement = 0.0;\n    let grade_table_letter_decrement = \"\";\n    let grade_table_grade_decrement = \"\";\n    let grade_table_index_decrement_increment = 0;\n    let grade_table_value_decrement_increment = 0.0;\n    let grade_table_letter_decrement_increment = \"\";\n    let grade_table_grade_decrement_increment = \"\";\n    let grade_table_index_increment_decrement = 0;\n    let grade_table_value_increment_decrement = 0.0;\n    let grade_table_letter_increment_decrement = \"\";\n    let grade_table_grade_increment_decrement = \"\";\n    let grade_table_index_decrement_decrement = 0;\n    let grade_table_value_decrement_decrement = 0.0;\n    let grade_table_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmptk_eh7fy.rs:62:27\n   |\n62 |     let grade_table_letter\n   |                           ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:36:16\n   |\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_grade = grade_table_value[0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[1];\n    let grade_table_next_grade = grade_table_next_value[0];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[1];\n    let grade_table_next_next_grade = grade_table_next_next_value[0];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[1];\n    let grade_table_next_next_next_grade = grade_table_next_next_next_value[\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found `]`\n  --> /tmp/tmp82fovftp.rs:56:1\n   |\n56 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp82fovftp.rs:55:76\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n55 |     let grade_table_next_next_next_grade = grade_table_next_next_next_value[\n   |                                                                            ^ unclosed delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp82fovftp.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp82fovftp.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp82fovftp.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp82fovftp.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp82fovftp.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp82fovftp.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp82fovftp.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp82fovftp.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp82fovftp.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn(gpa) {\n        if gpa >= 4.0 {\n            \"A+\"\n        } else if gpa >= 3.7 {\n            \"A\"\n        } else if gpa >= 3.3 {\n            \"A-\"\n        } else if gpa >= 3.0 {\n            \"B+\"\n        } else if gpa >= 2.7 {\n            \"B\"\n        } else if gpa >= 2.3 {\n            \"B-\"\n        } else if gpa >= 2.0 {\n            \"C+\"\n        } else if gpa >= 1.7 {\n            \"C\"\n        } else if gpa >= 1.3 {\n            \"C-\"\n        } else if gpa >= 1.0 {\n            \"D+\"\n        } else if gpa >= 0.7 {\n            \"D\"\n        } else if gpa >= 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n        }\n    }\n    let letter_grades = grades.map(grade_equation)\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmp1szcgt9g.rs:24:26\n   |\n24 |     let grade_equation = fn(gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_next = 0;\n    let grade_table_value_next = 0.0;\n    let grade_table_letter_next = \"\";\n    let grade_table_grade_next = \"\";\n    let grade_table_index_previous = 0;\n    let grade_table_value_previous = 0.0;\n    let grade_table_letter_previous = \"\";\n    let grade_table_grade_previous = \"\";\n    let grade_table_index_previous_previous = 0;\n    let grade_table_value_previous_previous = 0.0;\n    let grade_table_letter_previous_previous = \"\";\n    let grade_table_grade_previous_previous = \"\";\n    let grade_table_index_previous_previous_previous = 0;\n    let grade_table_value_previous_previous_previous = 0.0;\n    let grade_table_letter_previous_previous_previous = \"\";\n    let grade_table_grade_previous_previous_previous = \"\";\n    let grade_table_index_previous_previous_previous_previous = 0;\n    let grade_table_value_previous_previous_previous_previous = 0.0;\n    let grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp3thu2egk.rs:62:14\n   |\n62 |     let grade\n   |              ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[0];\n    let grade_table_next_gpa = grade_table_next_value[1];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[0];\n    let grade_table_next_next_gpa = grade_table_next_next_value[1];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[0];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpoo11xtjq.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmpoo11xtjq.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_index_end = grade_table_length - 1;\n    let grade_table_index_start = 0;\n    let grade_table_index_end_minus_1 = grade_table_length - 2;\n    let grade_table_index_start_minus_1 = 0;\n    let grade_table_index_end_minus_2 = grade_table_length - 3;\n    let grade_table_index_start_minus_2 = 0;\n    let grade_table_index_end_minus_3 = grade_table_length - 4;\n    let grade_table_index_start_minus_3 = 0;\n    let grade_table_index_end_minus_4 = grade_table_length - 5;\n    let grade_table_index_start_minus_4 = 0;\n    let grade_table_index_end_minus_5 = grade_table_length - 6;\n    let grade_table_index_start_minus_5 = 0;\n    let grade_table_index_end_minus_6 = grade_table_length - 7;\n    let grade_table_index_start_minus_6 = 0;\n    let grade_table_index_end_minus_7 = grade_table_length - 8;\n    let grade_table_index_start_minus_7 = 0;\n    let grade_table_index_end_minus_8 = grade_table_length - 9;\n    let grade_table_index_start_minus_8 = 0\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpusrfwzsa.rs:58:44\n   |\n58 |     let grade_table_index_start_minus_8 = 0\n   |                                            ^ help: add `;` here\n59 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpusrfwzsa.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_as_f32 = grades.map(|g| g as f32);\n    let grades_as_f64 = grades.map(|g| g as f64);\n    let grades_as_i32 = grades.map(|g| g as i32);\n    let grades_as_i64 = grades.map(|g| g as i64);\n    let grades_as_u32 = grades.map(|g| g as u32);\n    let grades_as_u64 = grades.map(|g| g as u64);\n    let grades_as_str = grades.map(|g| String::from(g));\n    let grades_as_char = grades.map(|g| String::from(g).charAt(0));\n    let grades_as_bool = grades.map(|g| g as bool);\n    let grades_as_u8 = grades.map(|g| g as u8);\n    let grades_as_i8 = grades.map(|g| g as i8);\n    let grades_as_u16 = grades.map(|g| g as u16);\n    let grades_as_i16 = grades.map(|g| g as i16);\n    let grades_as_u32 = grades.map(|g| g as u32);\n    let grades_as_i32 = grades.map(|g| g as i32);\n    let grades_as_u64 = grades.map(|g| g as u64);\n    let grades_as_i64 = grades.map(|g| g as i64);\n    let grades_as_f32 = grades.map(|g| g as f32);\n    let grades_as_f64 = grades.map(|g| g as f64);\n    let grades_as_str = grades.map(|g| String::from(g));\n    let grades_as_char = grades.map(|g| String::from(g).charAt(0));\n    let grades_as_bool = grades.map(|g| g as bool);\n    let grades_as_u8 = grades.map(|g| g as u8);\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmprwoaru0y.rs:24:32\n    |\n24  |       let grades_as_f32 = grades.map(|g| g as f32);\n    |                                  ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmprwoaru0y.rs:25:32\n    |\n25  |       let grades_as_f64 = grades.map(|g| g as f64);\n    |                                  ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmprwoaru0y.rs:26:32\n    |\n26  |       let grades_as_i32 = grades.map(|g| g as i32);\n    |                                  ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmprwoaru0y.rs:27:32\n    |\n27  |       let grades_as_i64 = grades.map(|g| g as i64);\n    |                                  ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmprwoaru0y.rs:28:32\n    |\n28  |       let grades_as_u32 = grades.map(|g| g as u32);\n    |                                  ^^^ `Vec<f64>` is not an iterator\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        [\"A+\", \"A\"],\n        [\"A\", \"A-\"],\n        [\"B+\", \"B\"],\n        [\"B\", \"B-\"],\n        [\"C+\", \"C\"],\n        [\"C\", \"C-\"],\n        [\"D+\", \"D\"],\n        [\"D\", \"D-\"],\n        [\"E\", \"E\"]\n    ];\n    let letter_grades = grades_to_letter_grade.map(\n        (grade, letter_grade) => String::from(grade) + \" \" + letter_grade\n    );\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpa45ar4p3.rs:36:31\n   |\n36 |         (grade, letter_grade) => String::from(grade) + \" \" + letter_grade\n   |                               ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_letter = grade_table_letter;\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_letter = grade_table_value_letter;\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_letter = grade_table_value_value_letter;\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_letter = grade_table_value_value_value_letter;\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpfyzugumi.rs:56:44\n   |\n56 |     let grade_table_value_value_value_value\n   |                                            ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    for i in 0..grades_len {\n        grades_sum += grades[i];\n    }\n    let grades_average = grades_sum / grades_len;\n    let grades_grades = [\n        \"A+\" if grades_average >= 4.0 else\n        \"A\" if grades_average >= 3.7 else\n        \"A-\" if grades_average >= 3.3 else\n        \"B+\" if grades_average >= 3.0 else\n        \"B\" if grades_average >= 2.7 else\n        \"B-\" if grades_average >= 2.3 else\n        \"C+\" if grades_average >= 2.0 else\n        \"C\" if grades_average >= 1.7 else\n        \"C-\" if grades_average >= 1.3 else\n        \"D+\" if grades_average >= 1.0 else\n        \"D\" if grades_average >= 0.7 else\n        \"D-\" if grades_average >= 0.3 else\n        \"E\"\n    ];\n    return grades_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `,`, `.`, `;`, `?`, `]`, or an operator, found keyword `if`\n  --> /tmp/tmp_d_flkh3.rs:31:14\n   |\n31 |         \"A+\" if grades_average >= 4.0 else\n   |              ^^ expected one of `,`, `.`, `;`, `?`, `]`, or an operator\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp_d_flkh3.rs:29:37\n   |\n29 |     let grades_average = grades_sum / grades_len;\n   |                                     ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        let grade = if gpa >= 4.0 {\n            \"A+\"\n        } else if gpa >= 3.7 {\n            \"A\"\n        } else if gpa >= 3.3 {\n            \"A-\"\n        } else if gpa >= 3.0 {\n            \"B+\"\n        } else if gpa >= 2.7 {\n            \"B\"\n        } else if gpa >= 2.3 {\n            \"B-\"\n        } else if gpa >= 2.0 {\n            \"C+\"\n        } else if gpa >= 1.7 {\n            \"C\"\n        } else if gpa >= 1.3 {\n            \"C-\"\n        } else if gpa >= 1.0 {\n            \"D+\"\n        } else if gpa >= 0.7 {\n            \"D\"\n        } else if gpa >= 0.3 {\n            \"D-\"\n        } else if gpa >= 0.0 {\n            \"E\"\n        } else {\n            \"F\"\n        }\n        return grade\n    }\n    let letter_grades = vec![grade_equation(gpa) for gpa in grades]\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmphym_vcix.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_gpa = grade_table_value[0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[1];\n    let grade_table_next_gpa = grade_table_next_value[0];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[1];\n    let grade_table_next_next_gpa = grade_table_next_next_value[0];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[1];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp77iegl95.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmp77iegl95.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_index_next = 0;\n    let grade_table_index_prev = 0;\n    let grade_table_index_prev_prev = 0;\n    let grade_table_index_next_next = 0;\n    let grade_table_index_prev_prev_prev = 0;\n    let grade_table_index_next_next_next = 0;\n    let grade_table_index_prev_prev_next = 0;\n    let grade_table_index_prev_next_next = 0;\n    let grade_table_index_prev_next_prev = 0;\n    let grade_table_index_next_prev_prev = 0;\n    let grade_table_index_prev_prev_prev_prev = 0;\n    let grade_table_index_next_prev_prev_prev = 0;\n    let grade_table_index_prev_prev_prev_next = 0;\n    let grade_table_index_prev_prev_next_prev = 0;\n    let grade_table_index_prev_prev_next_next = 0;\n    let grade_table_index_prev_prev_next_next_next = 0;\n    let grade_table_index_prev_prev_next_next_next_next = 0;\n    let grade_table_index_prev_prev_next_next_next_next_next = 0;\n    let grade_table_index_prev_prev_next_next_next_next_next_next = 0;\n    \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme5xj5vr.rs:37:15\n   |\n37 |         [\"E\", 0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"\n    ];\n    let letter_grades = Vec::new();\n    for (let grade of grades) {\n        let letter_grade = grades_to_letter_grade[(grade * 10) - 10];\n        letter_grades.push(letter_grade);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp_ubvkd1k.rs:28:10\n   |\n28 |     for (let grade of grades) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grade`\n  --> /tmp/tmp_ubvkd1k.rs:28:14\n   |\n28 |     for (let grade of grades) {\n   |             -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp_ubvkd1k.rs:28:20\n   |\n28 |     for (let grade of grades) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grades`\n  --> /tmp/tmp_ubvkd1k.rs:28:23\n   |\n28 |     for (let grade of grades) {\n   |                      -^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp_ubvkd1k.rs:28:30\n   |\n28 |     for (let grade of grades) {\n   |                              ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp_ubvkd1k.rs:32:5\n   |\n32 |     return letter_grades;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n32 |     { return letter_grades; }\n   |     +                       +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn(gpa) {\n        if gpa > 4.0 {\n            \"A+\"\n        } else if gpa > 3.7 {\n            \"A\"\n        } else if gpa > 3.3 {\n            \"A-\"\n        } else if gpa > 3.0 {\n            \"B+\"\n        } else if gpa > 2.7 {\n            \"B\"\n        } else if gpa > 2.3 {\n            \"B-\"\n        } else if gpa > 2.0 {\n            \"C+\"\n        } else if gpa > 1.7 {\n            \"C\"\n        } else if gpa > 1.3 {\n            \"C-\"\n        } else if gpa > 1.0 {\n            \"D+\"\n        } else if gpa > 0.7 {\n            \"D\"\n        } else if gpa > 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n        }\n    }\n    let grades_string = grades.map(grade_equation).join(\" \")\n    let grades_array = grades_string.split(\" \")\n    let grades_vec = Vec::new(grades_array)\n    return grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpqwbns_yx.rs:24:26\n   |\n24 |     let grade_equation = fn(gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_array = grades.to_array();\n    let grades_array_len = grades_array.len();\n    let grades_array_array = grades_array.to_array();\n    let grades_array_array_len = grades_array_array.len();\n    let grades_array_array_array = grades_array_array.to_array();\n    let grades_array_array_array_len = grades_array_array_array.len();\n    let grades_array_array_array_array = grades_array_array_array.to_array();\n    let grades_array_array_array_array_len = grades_array_array_array_array.len();\n    let grades_array_array_array_array_array = grades_array_array_array_array.to_array();\n    let grades_array_array_array_array_array_len = grades_array_array_array_array_array.len();\n    let grades_array_array_array_array_array_array = grades_array_array_array_array_array.to_array();\n    let grades_array_array_array_array_array_array_len = grades_array_array_array_array_array_array.len();\n    let grades_array_array_array_array_array_array_array = grades_array_array_array_array_array_array.to_array();\n    let grades_array_array_array_array_array_array_array_len = grades_array_array_array_array_array_array_array.len();\n    let grades_array_array_array_array_array_array_array_array = grades_array_array_array_array_array_array_array.to_array();\n    let grades_array_array_array_array_array_array_array_array_len = grades_array_array_array_array_array_array_array_array.len();\n    let grades_array_array_array_array_array_array_array_array_array = grades_array_array_array_array_array_array_array_array.to_array();\n    let grades_array_array_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmppq0m2tmc.rs:42:28\n   |\n42 |     let grades_array_array_\n   |                            ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0599]: no method named `to_array` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmppq0m2tmc.rs:25:31\n   |\n25 |     let grades_array = grades.to_array();\n   |                               ^^^^^^^^ method not found in `Vec<f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppq0m2tmc.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    let grades_sum_square = 0.0;\n    let grades_mean = 0.0;\n    let grades_mean_square = 0.0;\n    let grades_standard_deviation = 0.0;\n    let grades_standard_deviation_square = 0.0;\n    let grades_minimum = 0.0;\n    let grades_minimum_square = 0.0;\n    let grades_maximum = 0.0;\n    let grades_maximum_square = 0.0;\n    let grades_minimum_mean = 0.0;\n    let grades_minimum_mean_square = 0.0;\n    let grades_maximum_mean = 0.0;\n    let grades_maximum_mean_square = 0.0;\n    let grades_minimum_standard_deviation = 0.0;\n    let grades_minimum_standard_deviation_square = 0.0;\n    let grades_maximum_standard_deviation = 0.0;\n    let grades_maximum_standard_deviation_square = 0.0;\n    let grades_minimum_minimum = 0.0;\n    let grades_minimum_minimum_square = 0.0;\n    let grades_maximum_maximum = 0.0;\n    let grades_maximum_maximum_square = 0.0;\n    let grades_minimum_maximum = 0.0;\n    let grades_minimum_maximum_square = 0.0;\n    let grades_maximum_minimum = 0.0;\n    let grades_maximum_minimum_square = 0.0;\n    let grades_minimum_maximum_mean = 0.0;\n    let grades_minimum_maximum_mean_square = 0.0;\n    let grades_maximum_minimum_mean = 0.0;\n    let grades_maximum_minimum_mean_square = 0.0;\n    let grades_minimum_maximum_standard_deviation = 0.0;\n    let grades_minimum_maximum_standard_deviation_square = 0.0;\n    let grades_maximum_minimum_standard_deviation = 0.0;\n    let grades_maximum_minimum_standard_deviation_square = 0.0;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpmtd354b9.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    let grades_avg = 0.0;\n    let grades_min = 0.0;\n    let grades_max = 0.0;\n    let grades_min_index = 0;\n    let grades_max_index = 0;\n    let grades_min_value = 0.0;\n    let grades_max_value = 0.0;\n    let grades_min_value_index = 0;\n    let grades_max_value_index = 0;\n    for i in 0..grades_len {\n        grades_sum += grades[i];\n        if (grades_min_value == 0.0 || grades[i] < grades_min_value) {\n            grades_min_value = grades[i];\n            grades_min_value_index = i;\n        }\n        if (grades_max_value == 0.0 || grades[i] > grades_max_value) {\n            grades_max_value = grades[i];\n            grades_max_value_index = i;\n        }\n    }\n    grades_avg = grades_sum / grades_len;\n    if (grades_min_value == 0.0) {\n        grades_min = \"E\";\n    } else if (grades_avg >= 4.0) {\n        grades_min = \"A+\";\n    } else if (grades_avg >= 3.7) {\n        grades_min = \"A\";\n    } else if (grades_avg >= 3.3) {\n        grades_min = \"A-\";\n    } else if (grades_avg >= 3.0) {\n        grades_min = \"B+\";\n    } else if (grades_avg >= 2.7) {\n        grades_min = \"B\";\n    } else if (grades_avg >= 2.3) {\n        grades_min = \"B-\";\n    } else if (grades_avg >= 2.0) {\n        grades_min = \"C+\";\n    } else if (grades_avg >= 1.7) {\n        grades_min = \"C\";\n    } else if (grades_av\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `{`, found `}`\n  --> /tmp/tmpse_lmndr.rs:66:1\n   |\n65 |     } else if (grades_av\n   |            -- this `if` expression has a condition, but no block\n66 | }\n   | ^ expected `{`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpse_lmndr.rs:65:15\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n65 |     } else if (grades_av\n   |               ^ unclosed delimiter\n66 | }\n   | ^ mismatched closing delimiter\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpse_lmndr.rs:37:12\n   |\n37 |         if (grades_min_value == 0.0 || grades[i] < grades_min_value) {\n   |            ^                                                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n37 -         if (grades_min_value == 0.0 || grades[i] < grades_min_value) {\n37 +         if grades_min_value == 0.0 || grades[i] < grades_min_value {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpse_lmndr.rs:41:12\n   |\n41 |         if (grades_max_value == 0.0 || grades[i] > grades_max_value) {\n   |            ^                                                       ^\n   |\nhelp: remove these parentheses\n   |\n41 -         if (grades_max_value == 0.0 || grades[i] > grades_max_value) {\n41 +         if grades_max_value == 0.0 || grades[i] > grades_max_value {\n   | \n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpse_lmndr.rs:46:29\n   |\n46 |     grades_avg = grades_sum / grades_len;\n   |                             ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[0];\n    let grade_table_gpa_next = grade_table_value_next[1];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[0];\n    let grade_table_gpa_prev = grade_table_value_prev[1];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpi57gpls3.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"\n    ];\n    let letter_grades = vec![];\n    for (let grade of grades) {\n        let letter_grade = grades_to_letter_grade[grade];\n        letter_grades = vec![letter_grades, letter_grade];\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp1e0q7j_6.rs:28:10\n   |\n28 |     for (let grade of grades) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grade`\n  --> /tmp/tmp1e0q7j_6.rs:28:14\n   |\n28 |     for (let grade of grades) {\n   |             -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp1e0q7j_6.rs:28:20\n   |\n28 |     for (let grade of grades) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grades`\n  --> /tmp/tmp1e0q7j_6.rs:28:23\n   |\n28 |     for (let grade of grades) {\n   |                      -^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp1e0q7j_6.rs:28:30\n   |\n28 |     for (let grade of grades) {\n   |                              ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp1e0q7j_6.rs:32:5\n   |\n32 |     return letter_grades;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n32 |     { return letter_grades; }\n   |     +                       +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_gpa = grade_table_value[0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[1];\n    let grade_table_next_gpa = grade_table_next_value[0];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[1];\n    let grade_table_next_next_gpa = grade_table_next_next_value[0];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[1];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp77iegl95.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmp77iegl95.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = map!(grades, f64 => String::from(f64));\n    let grades_map_keys = map!(grades_map, String::from);\n    let grades_map_values = map!(grades_map, String);\n    let grades_map_keys_sorted = sort!(grades_map_keys);\n    let grades_map_values_sorted = sort!(grades_map_values);\n    let grades_map_keys_sorted_sorted = sort!(grades_map_keys_sorted);\n    let grades_map_values_sorted_sorted = sort!(grades_map_values_sorted);\n    let grades_map_keys_sorted_sorted_sorted = sort!(grades_map_keys_sorted_sorted);\n    let grades_map_values_sorted_sorted_sorted = sort!(grades_map_values_sorted_sorted);\n    let grades_map_keys_sorted_sorted_sorted_sorted = sort!(grades_map_keys_sorted_sorted_sorted);\n    let grades_map_values_sorted_sorted_sorted_sorted = sort!(grades_map_values_sorted_sorted_sorted);\n    let grades_map_keys_sorted_sorted_sorted_sorted_sorted = sort!(grades_map_keys_sorted_sorted_sorted_sorted);\n    let grades_map_values_sorted_sorted_sorted_sorted_sorted = sort!(grades_map_values_sorted_sorted_sorted_sorted);\n    let grades_map_keys_sorted_sorted_sorted_sorted_sorted_sorted = sort!(grades_map_keys_sorted_sorted_sorted_sorted_sorted);\n    let grades_map_values_sorted_sorted_sorted_sorted_sorted_sorted = sort!(grades_map_values_sorted_sorted_sorted_sorted_sorted);\n    let grades_map_keys_sorted_sorted_sorted_sorted_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpq_tnw7m6.rs:39:53\n   |\n39 |     let grades_map_keys_sorted_sorted_sorted_sorted_\n   |                                                     ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror: cannot find macro `map` in this scope\n  --> /tmp/tmpq_tnw7m6.rs:24:22\n   |\n24 |     let grades_map = map!(grades, f64 => String::from(f64));\n   |                      ^^^\n\nerror: cannot find macro `map` in this scope\n  --> /tmp/tmpq_tnw7m6.rs:25:27\n   |\n25 |     let grades_map_keys = map!(grades_map, String::from);\n   |                           ^^^\n\nerror: cannot find macro `map` in this scope\n  --> /tmp/tmpq_tnw7m6.rs:26:29\n   |\n26 |     let grades_map_values = map!(grades_map, String);\n   |                             ^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpq_tnw7m6.rs:27:34\n   |\n27 |     let grades_map_keys_sorted = sort!(grades_map_keys);\n   |                                  ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpq_tnw7m6.rs:28:36\n   |\n28 |     let grades_map_values_sorted = sort!(grades_map_values);\n   |                                    ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpq_tnw7m6.rs:29:41\n   |\n29 |     let grades_map_keys_sorted_sorted = sort!(grades_map_keys_sorted);\n   |                                         ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpq_tnw7m6.rs:30:43\n   |\n30 |     let grades_map_values_sorted_sorted = sort!(grades_map_values_sorted);\n   |                                           ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpq_tnw7m6.rs:31:48\n   |\n31 |     let grades_map_keys_sorted_sorted_sorted = sort!(grades_map_keys_sorted_sorted);\n   |                                                ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpq_tnw7m6.rs:32:50\n   |\n32 |     let grades_map_values_sorted_sorted_sorted = sort!(grades_map_values_sorted_sorted);\n   |                                                  ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_previous_index - 1;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpr1zx3r8_.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpr1zx3r8_.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = grades.map(|g| {\n        let grade = g;\n        if (grade < 0.7) {\n            return \"D-\";\n        } else if (grade < 1.3) {\n            return \"C-\";\n        } else if (grade < 2.0) {\n            return \"B-\";\n        } else if (grade < 2.7) {\n            return \"A-\";\n        } else if (grade < 3.0) {\n            return \"A\";\n        } else if (grade < 3.3) {\n            return \"A+\";\n        } else if (grade < 3.7) {\n            return \"B\";\n        } else if (grade < 4.0) {\n            return \"B+\";\n        } else {\n            return \"A+\";\n        }\n    });\n    return grades_map.map(|g| String::from(g));\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsifeod0r.rs:26:12\n   |\n26 |         if (grade < 0.7) {\n   |            ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n26 -         if (grade < 0.7) {\n26 +         if grade < 0.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsifeod0r.rs:28:19\n   |\n28 |         } else if (grade < 1.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n28 -         } else if (grade < 1.3) {\n28 +         } else if grade < 1.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsifeod0r.rs:30:19\n   |\n30 |         } else if (grade < 2.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n30 -         } else if (grade < 2.0) {\n30 +         } else if grade < 2.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsifeod0r.rs:32:19\n   |\n32 |         } else if (grade < 2.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n32 -         } else if (grade < 2.7) {\n32 +         } else if grade < 2.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsifeod0r.rs:34:19\n   |\n34 |         } else if (grade < 3.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n34 -         } else if (grade < 3.0) {\n34 +         } else if grade < 3.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsifeod0r.rs:36:19\n   |\n36 |         } else if (grade < 3.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n36 -         } else if (grade < 3.3) {\n36 +         } else if grade < 3.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsifeod0r.rs:38:19\n   |\n38 |         } else if (grade < 3.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n38 -         } else if (grade < 3.7) {\n38 +         } else if gra",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let grade_table = [\n        [\"A+\", \"B\", \"C-\", \"C\", \"A-\"],\n        [\"A\", \"B\", \"C\", \"C-\", \"B-\"],\n        [\"A-\", \"B\", \"C\", \"C-\", \"B-\"],\n        [\"B+\", \"B\", \"C\", \"C\", \"A-\"],\n        [\"B\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"B-\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"C+\", \"B\", \"C\", \"C\", \"A-\"],\n        [\"C\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"C-\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"D+\", \"B\", \"C\", \"C\", \"A-\"],\n        [\"D\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"D-\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"E\", \"B\", \"C\", \"C\", \"B-\"],\n    ]\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpjo40i5yt.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_grade = \"\";\n    let grade_table_grade_grade_index = 0;\n    let grade_table_grade_grade_value = 0.0;\n    let grade_table_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpiv_hir0a.rs:62:26\n   |\n62 |     let grade_table_grade\n   |                          ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:36:16\n   |\n36",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_sorted = sort_by(grades, &f64::cmp);\n    let grades_sorted_rev = reverse(grades_sorted);\n    let grades_sorted_rev_sorted = sort_by(grades_sorted_rev, &f64::cmp);\n    let grades_sorted_rev_sorted_rev = reverse(grades_sorted_rev_sorted);\n    let grades_sorted_rev_sorted_rev_sorted = sort_by(grades_sorted_rev_sorted_rev, &f64::cmp);\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted = reverse(grades_sorted_rev_sorted_rev_sorted);\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted = sort_by(grades_sorted_rev_sorted_rev_sorted_rev_sorted, &f64::cmp);\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted = reverse(grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted);\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted = sort_by(grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted, &f64::cmp);\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted = reverse(grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted);\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted = sort_by(grades_sorted_rev_sorted_rev\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmps1chuvk3.rs:35:1\n   |\n35 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmps1chuvk3.rs:34:120\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n34 |     let grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted = sort_by(grades_sorted_rev...\n   |                                                                                                                        ^ unclosed delimiter\n35 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmps1chuvk3.rs:24:25\n   |\n24 |     let grades_sorted = sort_by(grades, &f64::cmp);\n   |                         ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmps1chuvk3.rs:25:29\n   |\n25 |     let grades_sorted_rev = reverse(grades_sorted);\n   |                             ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmps1chuvk3.rs:26:36\n   |\n26 |     let grades_sorted_rev_sorted = sort_by(grades_sorted_rev, &f64::cmp);\n   |                                    ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmps1chuvk3.rs:27:40\n   |\n27 |     let grades_sorted_rev_sorted_rev = reverse(grades_sorted_rev_sorted);\n   |                                        ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmps1chuvk3.rs:28:47\n   |\n28 |     let grades_sorted_rev_sorted_rev_sorted = sort_by(grades_sorted_rev_sorted_rev, &f64::cmp);\n   |                                               ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n  -->",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[0];\n    let grade_table_gpa_next = grade_table_value_next[1];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[0];\n    let grade_table_gpa_prev = grade_table_value_prev[1];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpcsj8udvr.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_letter = grade_table_letter;\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_letter = grade_table_value_letter;\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_letter = grade_table_value_value_letter;\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_letter = grade_table_value_value_value_letter;\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp22onqgna.rs:56:44\n   |\n56 |     let grade_table_value_value_value_value\n   |                                            ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22onqgna.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = map!(grades, f64 => f64.to_f());\n    let grades_map_keys = map!(grades_map, String::from);\n    let grades_map_values = map!(grades_map, String::from);\n    let grades_map_keys_sorted = sort!(grades_map_keys);\n    let grades_map_values_sorted = sort!(grades_map_values);\n    let grades_map_keys_sorted_rev = reverse!(grades_map_keys_sorted);\n    let grades_map_values_sorted_rev = reverse!(grades_map_values_sorted);\n    let grades_map_keys_sorted_rev_sorted = sort!(grades_map_keys_sorted_rev);\n    let grades_map_values_sorted_rev_sorted = sort!(grades_map_values_sorted_rev);\n    let grades_map_keys_sorted_rev_sorted_rev = reverse!(grades_map_keys_sorted_rev_sorted);\n    let grades_map_values_sorted_rev_sorted_rev = reverse!(grades_map_values_sorted_rev_sorted);\n    let grades_map_keys_sorted_rev_sorted_rev_sorted = sort!(grades_map_keys_sorted_rev_sorted_rev);\n    let grades_map_values_sorted_rev_sorted_rev_sorted = sort!(grades_map_values_sorted_rev_sorted_rev);\n    let grades_map_keys_sorted_rev_sorted_rev_sorted_rev = reverse!(grades_map_keys_sorted_rev_sorted_rev_sorted);\n    let grades_map_values_sorted_rev_sorted_rev_sorted_rev = reverse!(grades_map_values_sorted_rev_sorted_rev_sorted);\n    let grades_map_keys_sorted_rev_sorted_rev_sorted_rev_sorted = sort!(grades_map_keys_sorted_rev_sorted_rev_sorted_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpeewg8u9j.rs:40:1\n   |\n40 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpeewg8u9j.rs:39:72\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n39 |     let grades_map_keys_sorted_rev_sorted_rev_sorted_rev_sorted = sort!(grades_map_keys_sorted_rev_sorted_rev_sorted_\n   |                                                                        ^ unclosed delimiter\n40 | }\n   | ^ mismatched closing delimiter\n\nerror: cannot find macro `map` in this scope\n  --> /tmp/tmpeewg8u9j.rs:24:22\n   |\n24 |     let grades_map = map!(grades, f64 => f64.to_f());\n   |                      ^^^\n\nerror: cannot find macro `map` in this scope\n  --> /tmp/tmpeewg8u9j.rs:25:27\n   |\n25 |     let grades_map_keys = map!(grades_map, String::from);\n   |                           ^^^\n\nerror: cannot find macro `map` in this scope\n  --> /tmp/tmpeewg8u9j.rs:26:29\n   |\n26 |     let grades_map_values = map!(grades_map, String::from);\n   |                             ^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpeewg8u9j.rs:27:34\n   |\n27 |     let grades_map_keys_sorted = sort!(grades_map_keys);\n   |                                  ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpeewg8u9j.rs:28:36\n   |\n28 |     let grades_map_values_sorted = sort!(grades_map_values);\n   |                                    ^^^^\n\nerror: cannot find macro `reverse` in this scope\n  --> /tmp/tmpeewg8u9j.rs:29:38\n   |\n29 |     let grades_map_keys_sorted_rev = reverse!(grades_map_keys_sorted);\n   |                                      ^^^^^^^\n\nerror: cannot find macro `reverse` in this scope\n  --> /tmp/tmpeewg8u9j.rs:30:40\n   |\n30 |     let grades_map_values_sorted_rev = reverse!(grades_map_values_sorted);\n   |                                        ^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = grades.map(|g| {\n        let grade = g;\n        if (grade < 0.7) {\n            return \"D-\";\n        } else if (grade < 1.3) {\n            return \"C-\";\n        } else if (grade < 2.0) {\n            return \"B-\";\n        } else if (grade < 2.7) {\n            return \"B\";\n        } else if (grade < 3.0) {\n            return \"A-\";\n        } else if (grade < 3.3) {\n            return \"A\";\n        } else if (grade < 3.7) {\n            return \"A+\";\n        } else {\n            return \"A+\";\n        }\n    });\n    return grades_map.map(|g| String::from(g));\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjmo6hwzn.rs:26:12\n   |\n26 |         if (grade < 0.7) {\n   |            ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n26 -         if (grade < 0.7) {\n26 +         if grade < 0.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjmo6hwzn.rs:28:19\n   |\n28 |         } else if (grade < 1.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n28 -         } else if (grade < 1.3) {\n28 +         } else if grade < 1.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjmo6hwzn.rs:30:19\n   |\n30 |         } else if (grade < 2.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n30 -         } else if (grade < 2.0) {\n30 +         } else if grade < 2.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjmo6hwzn.rs:32:19\n   |\n32 |         } else if (grade < 2.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n32 -         } else if (grade < 2.7) {\n32 +         } else if grade < 2.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjmo6hwzn.rs:34:19\n   |\n34 |         } else if (grade < 3.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n34 -         } else if (grade < 3.0) {\n34 +         } else if grade < 3.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjmo6hwzn.rs:36:19\n   |\n36 |         } else if (grade < 3.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n36 -         } else if (grade < 3.3) {\n36 +         } else if grade < 3.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjmo6hwzn.rs:38:19\n   |\n38 |         } else if (grade < 3.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n38 -         } else if (grade < 3.7) {\n38 +         } else if gra",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[0];\n    let grade_table_next_gpa = grade_table_next_value[1];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[0];\n    let grade_table_next_next_gpa = grade_table_next_next_value[1];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[0];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpoo11xtjq.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmpoo11xtjq.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn(gpa) {\n        if gpa >= 4.0 {\n            \"A+\"\n        } else if gpa >= 3.7 {\n            \"A\"\n        } else if gpa >= 3.3 {\n            \"A-\"\n        } else if gpa >= 3.0 {\n            \"B+\"\n        } else if gpa >= 2.7 {\n            \"B\"\n        } else if gpa >= 2.3 {\n            \"B-\"\n        } else if gpa >= 2.0 {\n            \"C+\"\n        } else if gpa >= 1.7 {\n            \"C\"\n        } else if gpa >= 1.3 {\n            \"C-\"\n        } else if gpa >= 1.0 {\n            \"D+\"\n        } else if gpa >= 0.7 {\n            \"D\"\n        } else if gpa >= 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n        }\n    }\n    let grades_string = grades.map(grade_equation)\n    return grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpcp2zz25x.rs:24:26\n   |\n24 |     let grade_equation = fn(gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        [\"A+\", \"A\"], [\"A-\", \"A\"], [\"B+\", \"B\"], [\"B\", \"B\"], [\"C-\", \"C\"], [\"C\", \"C\"], [\"D+\", \"D\"], [\"D\", \"D\"], [\"E\", \"E\"]\n    ];\n    let letter_grades = Vec::new();\n    for (grade in grades) {\n        let grade_index = grades_to_letter_grade.indexOf(grade);\n        letter_grades.push(grades_to_letter_grade[grade_index][1]);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmp46cf_o_7.rs:28:16\n   |\n28 |     for (grade in grades) {\n   |                ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp46cf_o_7.rs:28:9\n   |\n28 |     for (grade in grades) {\n   |         ^               ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n28 -     for (grade in grades) {\n28 +     for grade in grades {\n   | \n\nerror[E0599]: no method named `indexOf` found for array `[[&str; 2]; 9]` in the current scope\n  --> /tmp/tmp46cf_o_7.rs:29:50\n   |\n29 |         let grade_index = grades_to_letter_grade.indexOf(grade);\n   |                                                  ^^^^^^^ method not found in `[[&str; 2]; 9]`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp6tm9y26u.rs:42:52\n   |\n42 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n   |                                                    ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0599]: no method named `vec` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmp6tm9y26u.rs:25:29\n   |\n25 |     let grades_vec = grades.vec();\n   |                             ^^^ help: there is an associated function with a similar name: `to_vec`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6tm9y26u.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[0];\n    let grade_table_next_gpa = grade_table_next_value[1];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[0];\n    let grade_table_next_next_gpa = grade_table_next_next_value[1];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[0];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpiouucm6g.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmpiouucm6g.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp6tm9y26u.rs:42:52\n   |\n42 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n   |                                                    ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0599]: no method named `vec` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmp6tm9y26u.rs:25:29\n   |\n25 |     let grades_vec = grades.vec();\n   |                             ^^^ help: there is an associated function with a similar name: `to_vec`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6tm9y26u.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let letter_grades = vec![grade_equation(gpa) for gpa in grades]\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpp9qqq_70.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_len_minus_one = grades_len - 1;\n    let grades_len_minus_two = grades_len - 2;\n    let grades_len_minus_three = grades_len - 3;\n    let grades_len_minus_four = grades_len - 4;\n    let grades_len_minus_five = grades_len - 5;\n    let grades_len_minus_six = grades_len - 6;\n    let grades_len_minus_seven = grades_len - 7;\n    let grades_len_minus_eight = grades_len - 8;\n    let grades_len_minus_nine = grades_len - 9;\n    let grades_len_minus_ten = grades_len - 10;\n    let grades_len_minus_eleven = grades_len - 11;\n    let grades_len_minus_twelve = grades_len - 12;\n    let grades_len_minus_thirteen = grades_len - 13;\n    let grades_len_minus_fourteen = grades_len - 14;\n    let grades_len_minus_fifteen = grades_len - 15;\n    let grades_len_minus_sixteen = grades_len - 16;\n    let grades_len_minus_seventeen = grades_len - 17;\n    let grades_len_minus_eighteen = grades_len - 18;\n    let grades_len_minus_nineteen = grades_len - 19;\n    let grades_len_minus_twenty = grades_len - 20;\n    let grades_len_minus_twenty_one = grades_len - 21;\n    let grades_len_minus_twenty_two = grades_len - 22;\n    let grades_len_minus_twenty_three = grades_len - 23;\n    let grades_len_minus_twenty_four = grades_len - 24;\n    let grades_len_minus_twenty_five = grades_len - 25;\n    let grades_len_minus_twenty_six = grades_len - 26;\n    let grades_len_minus_twenty_seven = grades_len - 27;\n    let grades_len_minus_twenty\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpanlozjdn.rs:52:32\n   |\n52 |     let grades_len_minus_twenty\n   |                                ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpanlozjdn.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_next_index - 1;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmptryjapv4.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmptryjapv4.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next][1];\n    let grade_table_letter_next = grade_table[grade_table_index_next][0];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev][1];\n    let grade_table_letter_prev = grade_table[grade_table_index_prev][0];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev][1];\n    let grade_table_letter_prev_prev = grade_table[grade_table_index_prev_prev][0];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let grade_table_value_next_next = grade_table[grade_table_index_next_next][1];\n    let grade_table_letter_next_next = grade_table[grade_table_index_next_next][0];\n    let grade_table_index_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpz0pdh141.rs:55:27\n   |\n55 |     let grade_table_index_\n   |                           ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:36:16\n   |\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = grades.map(|g| {\n        let grade = g;\n        if (grade < 0.7) {\n            return \"D-\";\n        } else if (grade < 1.3) {\n            return \"C\";\n        } else if (grade < 2.0) {\n            return \"B\";\n        } else if (grade < 2.7) {\n            return \"A\";\n        } else {\n            return \"A+\";\n        }\n    });\n    return grades_map.map(|g| String::from(g));\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmutikqxx.rs:26:12\n   |\n26 |         if (grade < 0.7) {\n   |            ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n26 -         if (grade < 0.7) {\n26 +         if grade < 0.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmutikqxx.rs:28:19\n   |\n28 |         } else if (grade < 1.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n28 -         } else if (grade < 1.3) {\n28 +         } else if grade < 1.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmutikqxx.rs:30:19\n   |\n30 |         } else if (grade < 2.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n30 -         } else if (grade < 2.0) {\n30 +         } else if grade < 2.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmutikqxx.rs:32:19\n   |\n32 |         } else if (grade < 2.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n32 -         } else if (grade < 2.7) {\n32 +         } else if grade < 2.7 {\n   | \n\nerror[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmpmutikqxx.rs:24:29\n    |\n24  |       let grades_map = grades.map(|g| {\n    |                               ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror: aborting due to previous error; 4 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let letter_grades = grades.map(grade_equation)\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmp08v4fu2g.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let grade_table = [\n        [\"A+\", \"B\", \"C-\", \"C\", \"A-\"],\n        [\"A\", \"B\", \"C\", \"C-\", \"B-\"],\n        [\"A-\", \"B\", \"C\", \"C-\", \"B-\"],\n        [\"B+\", \"B\", \"C\", \"C\", \"A-\"],\n        [\"B\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"B-\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"C+\", \"B\", \"C\", \"C\", \"A-\"],\n        [\"C\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"C-\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"D+\", \"B\", \"C\", \"C\", \"A-\"],\n        [\"D\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"D-\", \"B\", \"C\", \"C\", \"B-\"],\n        [\"E\", \"B\", \"C\", \"C\", \"B-\"],\n    ]\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpjo40i5yt.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[0];\n    let grade_table_next_gpa = grade_table_next_value[1];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[0];\n    let grade_table_next_next_gpa = grade_table_next_next_value[1];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[0];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpiouucm6g.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmpiouucm6g.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade: Vec<String> = vec![];\n    for (i, g in grades) {\n        let grade_to_letter_grade: String = \"\";\n        if (g >= 4.0) {\n            grade_to_letter_grade = \"A+\";\n        } else if (g >= 3.7) {\n            grade_to_letter_grade = \"A\";\n        } else if (g >= 3.3) {\n            grade_to_letter_grade = \"A-\";\n        } else if (g >= 3.0) {\n            grade_to_letter_grade = \"B+\";\n        } else if (g >= 2.7) {\n            grade_to_letter_grade = \"B\";\n        } else if (g >= 2.3) {\n            grade_to_letter_grade = \"B-\";\n        } else if (g >= 2.0) {\n            grade_to_letter_grade = \"C+\";\n        } else if (g >= 1.7) {\n            grade_to_letter_grade = \"C\";\n        } else if (g >= 1.3) {\n            grade_to_letter_grade = \"C-\";\n        } else if (g >= 1.0) {\n            grade_to_letter_grade = \"D+\";\n        } else if (g >= 0.7) {\n            grade_to_letter_grade = \"D\";\n        } else if (g >= 0.0) {\n            grade_to_letter_grade = \"D-\";\n        } else {\n            grade_to_letter_grade = \"E\";\n        }\n        grades_to_letter_grade = grades_to_letter_grade.push(grade_to_letter_grade);\n    }\n    return grades_to_letter_grade;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmptaojr7c8.rs:25:15\n   |\n25 |     for (i, g in grades) {\n   |               ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmptaojr7c8.rs:25:9\n   |\n25 |     for (i, g in grades) {\n   |         ^              ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n25 -     for (i, g in grades) {\n25 +     for i, g in grades {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptaojr7c8.rs:27:12\n   |\n27 |         if (g >= 4.0) {\n   |            ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n27 -         if (g >= 4.0) {\n27 +         if g >= 4.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptaojr7c8.rs:29:19\n   |\n29 |         } else if (g >= 3.7) {\n   |                   ^        ^\n   |\nhelp: remove these parentheses\n   |\n29 -         } else if (g >= 3.7) {\n29 +         } else if g >= 3.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptaojr7c8.rs:31:19\n   |\n31 |         } else if (g >= 3.3) {\n   |                   ^        ^\n   |\nhelp: remove these parentheses\n   |\n31 -         } else if (g >= 3.3) {\n31 +         } else if g >= 3.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptaojr7c8.rs:33:19\n   |\n33 |         } else if (g >= 3.0) {\n   |                   ^        ^\n   |\nhelp: remove these parentheses\n   |\n33 -         } else if (g >= 3.0) {\n33 +         } else if g >= 3.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptaojr7c8.rs:35:19\n   |\n35 |         } else if (g >= 2.7) {\n   |                   ^        ^\n   |\nhelp: remove these parentheses\n   |\n35 -         } else if (g >= 2.7) {\n35 +         } else if g >= 2.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptaojr7c8.rs:37:19\n   |\n37 |         } else if (g >= 2.3) {\n   |                   ^     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_grade = \"\";\n    let grade_table_grade_grade_index = 0;\n    let grade_table_grade_grade_value = 0.0;\n    let grade_table_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpiv_hir0a.rs:62:26\n   |\n62 |     let grade_table_grade\n   |                          ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:36:16\n   |\n36",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_letter_index = 0;\n    let grade_table_grade_letter_value = 0.0;\n    let grade_table_grade_letter_letter = \"\";\n    let grade_table_grade_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_letter_letter_value = 0.0;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpz9_ouuyp.rs:62:1\n   |\n62 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"\n    ];\n    let letter_grades = Vec::new();\n    for (grade in grades) {\n        let grade_index = grades_to_letter_grade.indexOf(grade);\n        letter_grades.push(grades_to_letter_grade[grade_index]);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmp23k74xz6.rs:28:16\n   |\n28 |     for (grade in grades) {\n   |                ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp23k74xz6.rs:28:9\n   |\n28 |     for (grade in grades) {\n   |         ^               ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n28 -     for (grade in grades) {\n28 +     for grade in grades {\n   | \n\nerror[E0599]: no method named `indexOf` found for array `[&str; 13]` in the current scope\n  --> /tmp/tmp23k74xz6.rs:29:50\n   |\n29 |         let grade_index = grades_to_letter_grade.indexOf(grade);\n   |                                                  ^^^^^^^ method not found in `[&str; 13]`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let grades_to_letter_grades = fn (grades: Vec<f64>) -> Vec<String> {\n        let letter_grades = Vec<String>::new()\n        for grade in grades {\n            let grade_letter = grade_equation(grade)\n            letter_grades.push(grade_letter)\n        }\n        return letter_grades\n    }\n    return grades_to_letter_grades(grades)\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpm7c_f5ad.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let letter_grades = vec![grade_equation(gpa) for gpa in grades]\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpp9qqq_70.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let letter_grades = vec![grade_equation(gpa) for gpa in grades]\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpp9qqq_70.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_gpa = grade_table_value[0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[1];\n    let grade_table_next_gpa = grade_table_next_value[0];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[1];\n    let grade_table_next_next_gpa = grade_table_next_next_value[0];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[1];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp77iegl95.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmp77iegl95.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[0];\n    let grade_table_gpa_next = grade_table_value_next[1];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[0];\n    let grade_table_gpa_prev = grade_table_value_prev[1];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpi57gpls3.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let letter_grades = []\n    for grade in grades {\n        letter_grades.push(grade_equation(grade))\n    }\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpo6125v7j.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_grade = \"\";\n    let grade_table_grade_grade_index = 0;\n    let grade_table_grade_grade_value = 0.0;\n    let grade_table_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpiv_hir0a.rs:62:26\n   |\n62 |     let grade_table_grade\n   |                          ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:36:16\n   |\n36",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    let grades_sum_len = 0;\n    let grades_sum_len_len = 0;\n    let grades_sum_len_len_len = 0;\n    let grades_sum_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpbu4zdfhv.rs:43:71\n   |\n43 |     let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len\n   |                                                                       ^ help: add `;` here\n44 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbu4zdfhv.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_sorted = sort_by(grades, |&f64| f64.cmp(|&f64|));\n    let grades_sorted_by_gpa = sort_by(grades_sorted, |&f64| f64.cmp(|&f64|));\n    let grades_sorted_by_gpa_and_letter = sort_by(grades_sorted_by_gpa, |&f64| f64.cmp(|&f64|));\n    let grades_sorted_by_gpa_and_letter_and_name = sort_by(grades_sorted_by_gpa_and_letter, |&f64| f64.cmp(|&f64|));\n    let grades_sorted_by_gpa_and_letter_and_name_and_name = sort_by(grades_sorted_by_gpa_and_letter_and_name, |&f64| f64.cmp(|&f64|));\n    let grades_sorted_by_gpa_and_letter_and_name_and_name_and_name = sort_by(grades_sorted_by_gpa_and_letter_and_name_and_name, |&f64| f64.cmp(|&f64|));\n    let grades_sorted_by_gpa_and_letter_and_name_and_name_and_name_and_name = sort_by(grades_sorted_by_gpa_and_letter_and_name_and_name_and_name, |&f64| f64.cmp(|&f64|));\n    let grades_sorted_by_gpa_and_letter_and_name_and_name_and_name_and_name_and_name = sort_by(grades_sorted_by_gpa_and_letter_and_name_and_name_and_name_and_name, |&f64| f64.cmp(|&f64|));\n    let grades_sorted_by_gpa_and_letter_and_name_and_name_and_name_and_name_and_name_and_name = sort_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found `)`\n  --> /tmp/tmpmp54g75k.rs:24:62\n   |\n24 |     let grades_sorted = sort_by(grades, |&f64| f64.cmp(|&f64|));\n   |                                                              ^ expected expression\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found `)`\n  --> /tmp/tmpmp54g75k.rs:24:63\n   |\n24 |     let grades_sorted = sort_by(grades, |&f64| f64.cmp(|&f64|));\n   |                                                               ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_gpa = grade_table_value[0];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[1];\n    let grade_table_gpa_next = grade_table_value_next[0];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[1];\n    let grade_table_gpa_prev = grade_table_value_prev[0];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmps6oex_75.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let letter_grades = []\n    for grade in grades {\n        let grade_string = grade_equation(grade)\n        letter_grades.append(grade_string)\n    }\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmp24xa2bti.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[0];\n    let grade_table_next_gpa = grade_table_next_value[1];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[0];\n    let grade_table_next_next_gpa = grade_table_next_next_value[1];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[0];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpiouucm6g.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmpiouucm6g.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiouucm6g.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_last_index = grade_table_index + grade_table_length - 1;\n    let grade_table_last_value = grade_table[grade_table_last_index][1];\n    let grade_table_last_letter = grade_table[grade_table_last_index][0];\n    let grade_table_first_index = 0;\n    let grade_table_first_value = grade_table[grade_table_first_index][1];\n    let grade_table_first_letter = grade_table[grade_table_first_index][0];\n    let grade_table_first_last_index = grade_table_first_index + grade_table_length - 1\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpd4v350kz.rs:55:88\n   |\n55 |     let grade_table_first_last_index = grade_table_first_index + grade_table_length - 1\n   |                                                                                        ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_previous_index - 1;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpr1zx3r8_.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpr1zx3r8_.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1zx3r8_.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_increment = 1;\n    let grade_table_value_increment = 0.1;\n    let grade_table_letter_increment = \"A\";\n    let grade_table_grade_increment = \"A\";\n    let grade_table_index_decrement = 0;\n    let grade_table_value_decrement = 0.0;\n    let grade_table_letter_decrement = \"A\";\n    let grade_table_grade_decrement = \"A\";\n    let grade_table_index_decrement_increment = 1;\n    let grade_table_value_decrement_increment = 0.1;\n    let grade_table_letter_decrement_increment = \"A\";\n    let grade_table_grade_decrement_increment = \"A\";\n    let grade_table_index_increment_decrement = 0;\n    let grade_table_value_increment_decrement = 0.1;\n    let grade_table_letter_increment_decrement = \"A\";\n    let grade_table_grade_increment_decrement = \"A\";\n    let grade_table_index_decrement_decrement = 0;\n    let grade_table_value_decrement_decrement = 0.1;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8h4ahgb0.rs:37:15\n   |\n37 |         [\"E\", 0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    let grades_sum_len = 0;\n    let grades_sum_max = 0.0;\n    let grades_sum_min = 0.0;\n    let grades_sum_max_len = 0;\n    let grades_sum_min_len = 0;\n    let grades_sum_max_index = 0;\n    let grades_sum_min_index = 0;\n    for i in 0..grades_len {\n        grades_sum += grades[i];\n        if (grades_sum_len == 0) {\n            grades_sum_max = grades_sum;\n            grades_sum_max_len = 1;\n            grades_sum_max_index = i;\n        } else {\n            if (grades_sum > grades_sum_max) {\n                grades_sum_max = grades_sum;\n                grades_sum_max_len = 1;\n                grades_sum_max_index = i;\n            } else if (grades_sum == grades_sum_max) {\n                grades_sum_max_len++;\n            }\n        }\n        if (grades_sum_len == 0) {\n            grades_sum_min = grades_sum;\n            grades_sum_min_len = 1;\n            grades_sum_min_index = i;\n        } else {\n            if (grades_sum < grades_sum_min) {\n                grades_sum_min = grades_sum;\n                grades_sum_min_len = 1;\n                grades_sum_min_index = i;\n            } else if (grades_sum == grades_sum_min) {\n                grades_sum_min_len++;\n            }\n        }\n    }\n    let grades_sum_max_len_div_2 = grades_sum_max_len / 2;\n    let grades_sum_min_len_div_2 = grades_sum_min_len / 2;\n    let grades_sum_max_index_div_2 = grades_sum_max_index / 2;\n    let grades_sum_min_index_div_2 = grades_sum_min_index / 2;\n    \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: Rust has no postfix increment operator\n  --> /tmp/tmp3mrujpag.rs:45:35\n   |\n45 |                 grades_sum_max_len++;\n   |                                   ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n45 |                 { let tmp = grades_sum_max_len; grades_sum_max_len += 1; tmp };\n   |                 +++++++++++                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n45 -                 grades_sum_max_len++;\n45 +                 grades_sum_max_len += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmp3mrujpag.rs:58:35\n   |\n58 |                 grades_sum_min_len++;\n   |                                   ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n58 |                 { let tmp = grades_sum_min_len; grades_sum_min_len += 1; tmp };\n   |                 +++++++++++                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n58 -                 grades_sum_min_len++;\n58 +                 grades_sum_min_len += 1;\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3mrujpag.rs:35:12\n   |\n35 |         if (grades_sum_len == 0) {\n   |            ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n35 -         if (grades_sum_len == 0) {\n35 +         if grades_sum_len == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3mrujpag.rs:40:16\n   |\n40 |             if (grades_sum > grades_sum_max) {\n   |                ^                           ^\n   |\nhelp: remove these parentheses\n   |\n40 -             if (grades_sum > grades_sum_max) {\n40 +             if grades_sum > grades_sum_max {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp3mrujpag.rs:44:23\n   |\n44 |             } else if (grades_sum == grades_sum_max) {\n   |                       ^                            ^\n   |\nhelp: remove these parentheses\n   |\n44 -             } else if (grades_sum == grades_sum_max) {\n44 +             } else if grades_sum == grades_sum_m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = String::from(\"\");\n    let grade_table_letter_index = 0;\n    let grade_table_letter_value = 0.0;\n    let grade_table_letter_letter = String::from(\"\");\n    let grade_table_letter_letter_index = 0;\n    let grade_table_letter_letter_value = 0.0;\n    let grade_table_letter_letter_letter = String::from(\"\");\n    let grade_table_letter_letter_letter_index = 0;\n    let grade_table_letter_letter_letter_value = 0.0;\n    let grade_table_letter_letter_letter_letter = String::from(\"\");\n    let grade_table_letter_letter_letter_letter_index = 0;\n    let grade_table_letter_letter_letter_letter_value = 0.0;\n    let grade_table_letter_letter_letter_letter_letter = String::from(\"\");\n    let grade_table_letter_letter_letter_letter_letter_index = 0;\n    let grade_table_letter_letter_letter_letter_letter_value = 0.0;\n    let grade_table_letter_letter_letter_letter_letter_letter = String::from(\"\");\n    let grade_table_letter_letter_letter_letter_letter_letter_index = 0;\n    let grade_table_letter_letter_letter_letter_letter_letter_value =\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpubn0w4b9.rs:60:1\n   |\n60 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubn0w4b9.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found fl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"\n    ];\n    let letter_grades = Vec::new();\n    for (grade in grades) {\n        let grade_index = grades_to_letter_grade.indexOf(grade);\n        if (grade_index > -1) {\n            letter_grades.push(grades_to_letter_grade[grade_index]);\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmpfwx_nwxx.rs:28:16\n   |\n28 |     for (grade in grades) {\n   |                ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpfwx_nwxx.rs:28:9\n   |\n28 |     for (grade in grades) {\n   |         ^               ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n28 -     for (grade in grades) {\n28 +     for grade in grades {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpfwx_nwxx.rs:30:12\n   |\n30 |         if (grade_index > -1) {\n   |            ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n30 -         if (grade_index > -1) {\n30 +         if grade_index > -1 {\n   | \n\nerror[E0599]: no method named `indexOf` found for array `[&str; 13]` in the current scope\n  --> /tmp/tmpfwx_nwxx.rs:29:50\n   |\n29 |         let grade_index = grades_to_letter_grade.indexOf(grade);\n   |                                                  ^^^^^^^ method not found in `[&str; 13]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfwx_nwxx.rs:36:12\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                ----------- expected `Vec<String>` because of return type\n...\n36 |     return letter_grades;\n   |            ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    let grades_sum_squared = 0.0;\n    for i in 0..grades_len {\n        grades_sum += grades[i];\n        grades_sum_squared += grades[i] * grades[i];\n    }\n    let grades_mean = grades_sum / grades_len;\n    let grades_variance = grades_sum_squared / grades_len - grades_mean * grades_mean;\n    let grades_standard_deviation = grades_variance ** 0.5;\n    let grades_lower_limit = grades_mean - grades_standard_deviation;\n    let grades_upper_limit = grades_mean + grades_standard_deviation;\n    let grades_letter_grades = vec![];\n    for i in 0..grades_len {\n        let grade = grades[i];\n        if grade < grades_lower_limit {\n            grades_letter_grades = grades_letter_grades.append(String::from(\"D-\"));\n        } else if grade < grades_upper_limit {\n            grades_letter_grades = grades_letter_grades.append(String::from(\"C\"));\n        } else {\n            grades_letter_grades = grades_letter_grades.append(String::from(\"A\"));\n        }\n    }\n    return grades_letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp632ybfxw.rs:31:34\n   |\n31 |     let grades_mean = grades_sum / grades_len;\n   |                                  ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp632ybfxw.rs:32:46\n   |\n32 |     let grades_variance = grades_sum_squared / grades_len - grades_mean * grades_mean;\n   |                                              ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0614]: type `{float}` cannot be dereferenced\n  --> /tmp/tmp632ybfxw.rs:33:54\n   |\n33 |     let grades_standard_deviation = grades_variance ** 0.5;\n   |                                                      ^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp632ybfxw.rs:40:64\n   |\n40 |             grades_letter_grades = grades_letter_grades.append(String::from(\"D-\"));\n   |                                                                ^^^^^^^^^^^^^^^^^^ expected `&mut Vec<_>`, found struct `String`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                         found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp632ybfxw.rs:40:36\n   |\n36 |    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[0];\n    let grade_table_gpa_next = grade_table_value_next[1];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[0];\n    let grade_table_gpa_prev = grade_table_value_prev[1];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpi57gpls3.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_max = 0;\n    let grade_table_value_max = 0.0;\n    let grade_table_letter_max = \"\";\n    let grade_table_grade_max = \"\";\n    let grade_table_index_min = 0;\n    let grade_table_value_min = 0.0;\n    let grade_table_letter_min = \"\";\n    let grade_table_grade_min = \"\";\n    let grade_table_index_min = 0;\n    let grade_table_value_min = 0.0;\n    let grade_table_letter_min = \"\";\n    let grade_table_grade_min = \"\";\n    let grade_table_index_min = 0;\n    let grade_table_value_min = 0.0;\n    let grade_table_letter_min = \"\";\n    let grade_table_grade_min = \"\";\n    let grade_table_index_min = 0;\n    let grade_table_value_min = 0.0;\n    let grade_table_letter_min = \"\";\n    let grade_table_grade_min = \"\";\n    let grade_table_index_min = 0;\n    let grade_table_value_min = 0.0;\n    let grade_table_letter_min = \"\";\n    let grade_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmphjquu1hj.rs:67:15\n   |\n67 |     let grade_\n   |               ^ help: add `;` here\n68 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphjquu1hj.rs:36:16\n   |\n36 |         [\"D-\", 0.0]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next][1];\n    let grade_table_letter_next = grade_table[grade_table_index_next][0];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev][1];\n    let grade_table_letter_prev = grade_table[grade_table_index_prev][0];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev][1];\n    let grade_table_letter_prev_prev = grade_table[grade_table_index_prev_prev][0];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let grade_table_value_next_next = grade_table[grade_table_index_next_next][1];\n    let grade_table_letter_next_next = grade_table[grade_table_index_next_next][0];\n    let grade_table_index_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpz0pdh141.rs:55:27\n   |\n55 |     let grade_table_index_\n   |                           ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0pdh141.rs:36:16\n   |\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_index - 2;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpcrcx4sxj.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpcrcx4sxj.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_grade = \"\";\n    let grade_table_grade_grade_index = 0;\n    let grade_table_grade_grade_value = 0.0;\n    let grade_table_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpiv_hir0a.rs:62:26\n   |\n62 |     let grade_table_grade\n   |                          ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:36:16\n   |\n36",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn(gpa) {\n        if gpa >= 4.0 {\n            \"A+\"\n        } else if gpa >= 3.7 {\n            \"A\"\n        } else if gpa >= 3.3 {\n            \"A-\"\n        } else if gpa >= 3.0 {\n            \"B+\"\n        } else if gpa >= 2.7 {\n            \"B\"\n        } else if gpa >= 2.3 {\n            \"B-\"\n        } else if gpa >= 2.0 {\n            \"C+\"\n        } else if gpa >= 1.7 {\n            \"C\"\n        } else if gpa >= 1.3 {\n            \"C-\"\n        } else if gpa >= 1.0 {\n            \"D+\"\n        } else if gpa >= 0.7 {\n            \"D\"\n        } else if gpa >= 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n        }\n    }\n    let grades_string = grades.map(grade_equation).join(\" \")\n    let grades_vec = grades_string.split(\" \")\n    return grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpa7oj0upq.rs:24:26\n   |\n24 |     let grade_equation = fn(gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[0];\n    let grade_table_gpa_next = grade_table_value_next[1];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[0];\n    let grade_table_gpa_prev = grade_table_value_prev[1];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpcsj8udvr.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_array = grades.to_a();\n    let grades_array_len = grades_array.len();\n    let grades_array_len_minus_1 = grades_array_len - 1;\n    let grades_array_len_minus_2 = grades_array_len - 2;\n    let grades_array_len_minus_3 = grades_array_len - 3;\n    let grades_array_len_minus_4 = grades_array_len - 4;\n    let grades_array_len_minus_5 = grades_array_len - 5;\n    let grades_array_len_minus_6 = grades_array_len - 6;\n    let grades_array_len_minus_7 = grades_array_len - 7;\n    let grades_array_len_minus_8 = grades_array_len - 8;\n    let grades_array_len_minus_9 = grades_array_len - 9;\n    let grades_array_len_minus_10 = grades_array_len - 10;\n    let grades_array_len_minus_11 = grades_array_len - 11;\n    let grades_array_len_minus_12 = grades_array_len - 12;\n    let grades_array_len_minus_13 = grades_array_len - 13;\n    let grades_array_len_minus_14 = grades_array_len - 14;\n    let grades_array_len_minus_15 = grades_array_len - 15;\n    let grades_array_len_minus_16 = grades_array_len - 16;\n    let grades_array_len_minus_17 = grades_array_len - 17;\n    let grades_array_len_minus_18 = grades_array_len - 18;\n    let grades_array_len_minus_19 = grades_array_len - 19;\n    let grades_array_len_minus_20 = grades_array_len - 20;\n    let grades_array_len_minus_21 = grades_array_len - 21;\n    let grades_array_len_minus_22 = grades_array_len - 22;\n    let grades_array_len_minus_23\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpdcumisa_.rs:49:34\n   |\n49 |     let grades_array_len_minus_23\n   |                                  ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0599]: no method named `to_a` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmpdcumisa_.rs:25:31\n   |\n25 |     let grades_array = grades.to_a();\n   |                               ^^^^ method not found in `Vec<f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdcumisa_.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade: fn(f64, f64) -> String = fn(f64, f64) {\n        if (grades[0] >= 4.0) {\n            return \"A+\"\n        } else if (grades[0] >= 3.7) {\n            return \"A\"\n        } else if (grades[0] >= 3.3) {\n            return \"A-\"\n        } else if (grades[0] >= 3.0) {\n            return \"B+\"\n        } else if (grades[0] >= 2.7) {\n            return \"B\"\n        } else if (grades[0] >= 2.3) {\n            return \"B-\"\n        } else if (grades[0] >= 2.0) {\n            return \"C+\"\n        } else if (grades[0] >= 1.7) {\n            return \"C\"\n        } else if (grades[0] >= 1.3) {\n            return \"C-\"\n        } else if (grades[0] >= 1.0) {\n            return \"D+\"\n        } else if (grades[0] >= 0.7) {\n            return \"D\"\n        } else if (grades[0] >= 0.0) {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let letter_grades: Vec<String> = Vec::new()\n    for (i in grades) {\n        let grade = grades_to_letter_grade(i, grades[i])\n        letter_grades.push(grade)\n    }\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpk_uujwdd.rs:24:58\n   |\n24 |     let grades_to_letter_grade: fn(f64, f64) -> String = fn(f64, f64) {\n   |                                                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn(gpa) {\n        if gpa > 4.0 {\n            \"A+\"\n        } else if gpa > 3.7 {\n            \"A\"\n        } else if gpa > 3.3 {\n            \"A-\"\n        } else if gpa > 3.0 {\n            \"B+\"\n        } else if gpa > 2.7 {\n            \"B\"\n        } else if gpa > 2.3 {\n            \"B-\"\n        } else if gpa > 2.0 {\n            \"C+\"\n        } else if gpa > 1.7 {\n            \"C\"\n        } else if gpa > 1.3 {\n            \"C-\"\n        } else if gpa > 1.0 {\n            \"D+\"\n        } else if gpa > 0.7 {\n            \"D\"\n        } else if gpa > 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n        }\n    }\n    let grades_string = grades.map(grade_equation).join(\",\")\n    let grades_string_split = grades_string.split(\",\")\n    let grades_string_split_map = grades_string_split.map(String::from)\n    return grades_string_split_map\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpat0b5ayq.rs:24:26\n   |\n24 |     let grade_equation = fn(gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade: Vec<String> = vec![];\n    let max_gpa: f64 = 0.0;\n    let min_gpa: f64 = 100.0;\n    let max_gpa_index: i32 = 0;\n    let min_gpa_index: i32 = 0;\n    for i in 0..grades.len() {\n        let gpa: f64 = grades[i];\n        if (gpa > max_gpa) {\n            max_gpa = gpa;\n            max_gpa_index = i;\n        }\n        if (gpa < min_gpa) {\n            min_gpa = gpa;\n            min_gpa_index = i;\n        }\n    }\n    let max_gpa_letter_grade: String = \"A+\";\n    let min_gpa_letter_grade: String = \"D-\";\n    if (max_gpa > 3.7) {\n        max_gpa_letter_grade = \"A\";\n    }\n    if (max_gpa > 3.3) {\n        max_gpa_letter_grade = \"A-\";\n    }\n    if (max_gpa > 3.0) {\n        max_gpa_letter_grade = \"B+\";\n    }\n    if (max_gpa > 2.7) {\n        max_gpa_letter_grade = \"B\";\n    }\n    if (max_gpa > 2.3) {\n        max_gpa_letter_grade = \"B-\";\n    }\n    if (max_gpa > 2.0) {\n        max_gpa_letter_grade = \"C+\";\n    }\n    if (max_gpa > 1.7) {\n        max_gpa_letter_grade = \"C\";\n    }\n    if (max_gpa > 1.3) {\n        max_gpa_letter_grade = \"C-\";\n    }\n    if (max_gpa > 1.0) {\n        max_gpa_letter_grade = \"D+\";\n    }\n    if (max_gpa > 0\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp9r6b37ru.rs:69:8\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n69 |     if (max_gpa > 0\n   |        ^ unclosed delimiter\n70 | }\n   | ^ mismatched closing delimiter\n\nerror: expected `{`, found `}`\n  --> /tmp/tmp9r6b37ru.rs:70:1\n   |\n69 |     if (max_gpa > 0\n   |     -- this `if` expression has a condition, but no block\n70 | }\n   | ^ expected `{`\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9r6b37ru.rs:31:12\n   |\n31 |         if (gpa > max_gpa) {\n   |            ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n31 -         if (gpa > max_gpa) {\n31 +         if gpa > max_gpa {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9r6b37ru.rs:35:12\n   |\n35 |         if (gpa < min_gpa) {\n   |            ^             ^\n   |\nhelp: remove these parentheses\n   |\n35 -         if (gpa < min_gpa) {\n35 +         if gpa < min_gpa {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9r6b37ru.rs:42:8\n   |\n42 |     if (max_gpa > 3.7) {\n   |        ^             ^\n   |\nhelp: remove these parentheses\n   |\n42 -     if (max_gpa > 3.7) {\n42 +     if max_gpa > 3.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9r6b37ru.rs:45:8\n   |\n45 |     if (max_gpa > 3.3) {\n   |        ^             ^\n   |\nhelp: remove these parentheses\n   |\n45 -     if (max_gpa > 3.3) {\n45 +     if max_gpa > 3.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9r6b37ru.rs:48:8\n   |\n48 |     if (max_gpa > 3.0) {\n   |        ^             ^\n   |\nhelp: remove these parentheses\n   |\n48 -     if (max_gpa > 3.0) {\n48 +     if max_gpa > 3.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9r6b37ru.rs:51:8\n   |\n51 |     if (max_gpa > 2.7) {\n   |        ^             ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_letter = grade_table_letter;\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_letter = grade_table_value_letter;\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_letter = grade_table_value_value_letter;\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_letter = grade_table_value_value_value_letter;\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpfyzugumi.rs:56:44\n   |\n56 |     let grade_table_value_value_value_value\n   |                                            ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = {\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\"\n    };\n    let result = vec![];\n    for (let grade of grades) {\n        let grade_string = grades_map[grade];\n        result.push(grade_string);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected type, found `\"A+\"`\n  --> /tmp/tmppbbgqu4v.rs:25:14\n   |\n25 |         4.0: \"A+\",\n   |            - ^^^^ expected type\n   |            |\n   |            tried to parse a type due to this\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmppbbgqu4v.rs:39:10\n   |\n39 |     for (let grade of grades) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grade`\n  --> /tmp/tmppbbgqu4v.rs:39:14\n   |\n39 |     for (let grade of grades) {\n   |             -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmppbbgqu4v.rs:39:20\n   |\n39 |     for (let grade of grades) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grades`\n  --> /tmp/tmppbbgqu4v.rs:39:23\n   |\n39 |     for (let grade of grades) {\n   |                      -^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmppbbgqu4v.rs:39:30\n   |\n39 |     for (let grade of grades) {\n   |                              ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmppbbgqu4v.rs:43:5\n   |\n43 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n43 |     { return result; }\n   |     +                +\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_increment = 1;\n    let grade_table_value_increment = 0.1;\n    let grade_table_letter_increment = \"A\";\n    let grade_table_grade_increment = \"A\";\n    let grade_table_index_decrement = 0;\n    let grade_table_value_decrement = 0.0;\n    let grade_table_letter_decrement = \"A\";\n    let grade_table_grade_decrement = \"A\";\n    let grade_table_index_decrement_increment = 0;\n    let grade_table_value_decrement_increment = 0.1;\n    let grade_table_letter_decrement_increment = \"A\";\n    let grade_table_grade_decrement_increment = \"A\";\n    let grade_table_index_increment_decrement = 0;\n    let grade_table_value_increment_decrement = 0.1;\n    let grade_table_letter_increment_decrement = \"A\";\n    let grade_table_grade_increment_decrement = \"A\";\n    let grade_table_index_decrement_decrement = 0;\n    let grade_table_value_decrement_decrement = 0.1;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:37:15\n   |\n37 |         [\"E\", 0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_len = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_len = 0;\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_grade = \"\";\n    let grade_table_grade_grade_len = 0;\n    let grade_table_grade_grade_index = 0;\n    let grade_table_grade_grade_value = 0.0;\n    let grade_table_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_len = 0;\n    let grade_table_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_len = 0;\n    let grade_table_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_grade_letter = \"\";\n    let grade_table_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpckpnob_q.rs:63:21\n   |\n63 |     let grade_table_\n   |                     ^ help: add `;` here\n64 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:36:16\n   |\n36 |        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        [\"A+\", \"A\"], [\"A-\", \"A\"], [\"B+\", \"B\"], [\"B\", \"B\"], [\"C-\", \"C\"], [\"C\", \"C\"], [\"D+\", \"D\"], [\"D\", \"D\"], [\"E\", \"E\"]\n    ];\n    let letter_grades = grades_to_letter_grade.map(\n        (grade, letter_grade) => String::from(grade) + String::from(letter_grade)\n    );\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmplt9itp8t.rs:28:31\n   |\n28 |         (grade, letter_grade) => String::from(grade) + String::from(letter_grade)\n   |                               ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = grades.map(|g| {\n        let grade = g;\n        if (grade < 0.7) {\n            return \"D-\";\n        } else if (grade < 1.3) {\n            return \"C-\";\n        } else if (grade < 2.0) {\n            return \"B-\";\n        } else if (grade < 2.7) {\n            return \"B\";\n        } else if (grade < 3.0) {\n            return \"A-\";\n        } else if (grade < 3.3) {\n            return \"A\";\n        } else if (grade < 3.7) {\n            return \"A+\";\n        } else {\n            return \"C+\";\n        }\n    });\n    return grades_map.map(|g| String::from(g));\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:26:12\n   |\n26 |         if (grade < 0.7) {\n   |            ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n26 -         if (grade < 0.7) {\n26 +         if grade < 0.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:28:19\n   |\n28 |         } else if (grade < 1.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n28 -         } else if (grade < 1.3) {\n28 +         } else if grade < 1.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:30:19\n   |\n30 |         } else if (grade < 2.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n30 -         } else if (grade < 2.0) {\n30 +         } else if grade < 2.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:32:19\n   |\n32 |         } else if (grade < 2.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n32 -         } else if (grade < 2.7) {\n32 +         } else if grade < 2.7 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:34:19\n   |\n34 |         } else if (grade < 3.0) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n34 -         } else if (grade < 3.0) {\n34 +         } else if grade < 3.0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:36:19\n   |\n36 |         } else if (grade < 3.3) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n36 -         } else if (grade < 3.3) {\n36 +         } else if grade < 3.3 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkk1s2zy9.rs:38:19\n   |\n38 |         } else if (grade < 3.7) {\n   |                   ^           ^\n   |\nhelp: remove these parentheses\n   |\n38 -         } else if (grade < 3.7) {\n38 +         } else if gra",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_index - 2;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpcrcx4sxj.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpcrcx4sxj.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn(gpa) {\n        if gpa > 4.0 {\n            \"A+\"\n        } else if gpa > 3.7 {\n            \"A\"\n        } else if gpa > 3.3 {\n            \"A-\"\n        } else if gpa > 3.0 {\n            \"B+\"\n        } else if gpa > 2.7 {\n            \"B\"\n        } else if gpa > 2.3 {\n            \"B-\"\n        } else if gpa > 2.0 {\n            \"C+\"\n        } else if gpa > 1.7 {\n            \"C\"\n        } else if gpa > 1.3 {\n            \"C-\"\n        } else if gpa > 1.0 {\n            \"D+\"\n        } else if gpa > 0.7 {\n            \"D\"\n        } else if gpa > 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n        }\n    }\n    let grades_string = grades.map(grade_equation).join(\" \")\n    let grades_array = grades_string.split(\" \")\n    let grades_vec = Vec::new(grades_array.length)\n    for i in 0..grades_array.length {\n        grades_vec[i] = String::from(grades_array[i])\n    }\n    return grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmp2ix6ft4s.rs:24:26\n   |\n24 |     let grade_equation = fn(gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.3 {\n            return \"D-\"\n        } else if gpa >= 0.0 {\n            return \"E\"\n        } else {\n            return \"N/A\"\n        }\n    }\n    let grades_string = vec![grade_equation(gpa) for gpa in grades]\n    return grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpyuty0xnk.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_prev = 0;\n    let grade_table_value_prev = 0.0;\n    let grade_table_letter_prev = \"\";\n    let grade_table_grade_prev = \"\";\n    let grade_table_index_next = 0;\n    let grade_table_value_next = 0.0;\n    let grade_table_letter_next = \"\";\n    let grade_table_grade_next = \"\";\n    let grade_table_index_next_prev = 0;\n    let grade_table_value_next_prev = 0.0;\n    let grade_table_letter_next_prev = \"\";\n    let grade_table_grade_next_prev = \"\";\n    let grade_table_index_next_next = 0;\n    let grade_table_value_next_next = 0.0;\n    let grade_table_letter_next_next = \"\";\n    let grade_table_grade_next_next = \"\";\n    let grade_table_index_next_next_prev = 0;\n    let grade_table_value_next_next_prev = 0.0;\n    let grade_table_letter_next_next_prev = \"\";\n    let grade_table_grade_next_next_prev = \"\";\n    let grade_table_index_next_next_next\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp8hv255s4.rs:64:41\n   |\n64 |     let grade_table_index_next_next_next\n   |                                         ^ help: add `;` here\n65 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hv255s4.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[0];\n    let grade_table_next_gpa = grade_table_next_value[1];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[0];\n    let grade_table_next_next_gpa = grade_table_next_next_value[1];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[0];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpoo11xtjq.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmpoo11xtjq.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_as_f64 = grades.map(|x| x as f64);\n    let grades_as_f32 = grades.map(|x| x as f32);\n    let grades_as_i32 = grades.map(|x| x as i32);\n    let grades_as_i64 = grades.map(|x| x as i64);\n    let grades_as_u32 = grades.map(|x| x as u32);\n    let grades_as_u64 = grades.map(|x| x as u64);\n    let grades_as_str = grades.map(|x| String::from(x));\n    let grades_as_bool = grades.map(|x| x as bool);\n    let grades_as_char = grades.map(|x| x as char);\n    let grades_as_i8 = grades.map(|x| x as i8);\n    let grades_as_u8 = grades.map(|x| x as u8);\n    let grades_as_i16 = grades.map(|x| x as i16);\n    let grades_as_u16 = grades.map(|x| x as u16);\n    let grades_as_i32_as_f32 = grades.map(|x| x as i32 as f32);\n    let grades_as_i64_as_f64 = grades.map(|x| x as i64 as f64);\n    let grades_as_u32_as_f32 = grades.map(|x| x as u32 as f32);\n    let grades_as_u64_as_f64 = grades.map(|x| x as u64 as f64);\n    let grades_as_i32_as_f64 = grades.map(|x| x as i32 as f64);\n    let grades_as_u32_as_f64 = grades.map(|x| x as u32 as f64);\n    let grades_as_i64_as_f32 = grades.map(|x| x as i64 as f32);\n    let grades_as_u64_as_f32 = grades.map(|x\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: mismatched closing delimiter: `}`\n  --> /tmp/tmphk6xs3r_.rs:44:42\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n44 |     let grades_as_u64_as_f32 = grades.map(|x\n   |                                          ^ unclosed delimiter\n45 | }\n   | ^ mismatched closing delimiter\n\nerror: expected one of `:`, `@`, or `|`, found `)`\n  --> /tmp/tmphk6xs3r_.rs:45:1\n   |\n44 |     let grades_as_u64_as_f32 = grades.map(|x\n   |                                             - expected one of `:`, `@`, or `|`\n45 | }\n   | ^ unexpected token\n\nerror[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmphk6xs3r_.rs:24:32\n    |\n24  |       let grades_as_f64 = grades.map(|x| x as f64);\n    |                                  ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmphk6xs3r_.rs:25:32\n    |\n25  |       let grades_as_f32 = grades.map(|x| x as f32);\n    |                                  ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmphk6xs3r_.rs:26:32\n    |\n26  |       let grades_as_i32 = grades.map(|x| x as i32);\n    |                                  ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_index - 2;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpcrcx4sxj.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpcrcx4sxj.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_len = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_len = 0;\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_grade = \"\";\n    let grade_table_grade_grade_len = 0;\n    let grade_table_grade_grade_index = 0;\n    let grade_table_grade_grade_value = 0.0;\n    let grade_table_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_len = 0;\n    let grade_table_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_len = 0;\n    let grade_table_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_grade_letter = \"\";\n    let grade_table_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpxxdnt6ia.rs:63:21\n   |\n63 |     let grade_table_\n   |                     ^ help: add `;` here\n64 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxdnt6ia.rs:36:16\n   |\n36 |        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_next_index - 1;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmptryjapv4.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmptryjapv4.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptryjapv4.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_gpa = grade_table_value[0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[1];\n    let grade_table_next_gpa = grade_table_next_value[0];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[1];\n    let grade_table_next_next_gpa = grade_table_next_next_value[0];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[1];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp77iegl95.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmp77iegl95.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp77iegl95.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_next_index - 1;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmphys975hy.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmphys975hy.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphys975hy.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphys975hy.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphys975hy.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphys975hy.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphys975hy.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphys975hy.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphys975hy.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphys975hy.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphys975hy.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp6tm9y26u.rs:42:52\n   |\n42 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n   |                                                    ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0599]: no method named `vec` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmp6tm9y26u.rs:25:29\n   |\n25 |     let grades_vec = grades.vec();\n   |                             ^^^ help: there is an associated function with a similar name: `to_vec`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6tm9y26u.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = map!(grades, f64 => f64.to_f()).to_map();\n    let grades_map_keys = map!(grades_map.keys(), String.from);\n    let grades_map_values = map!(grades_map.values(), String.from);\n    let grades_map_keys_sorted = sort!(grades_map_keys);\n    let grades_map_values_sorted = sort!(grades_map_values);\n    let grades_map_keys_sorted_sorted = sort!(grades_map_keys_sorted);\n    let grades_map_values_sorted_sorted = sort!(grades_map_values_sorted);\n    let grades_map_keys_sorted_sorted_sorted = sort!(grades_map_keys_sorted_sorted);\n    let grades_map_values_sorted_sorted_sorted = sort!(grades_map_values_sorted_sorted);\n    let grades_map_keys_sorted_sorted_sorted_sorted = sort!(grades_map_keys_sorted_sorted_sorted);\n    let grades_map_values_sorted_sorted_sorted_sorted = sort!(grades_map_values_sorted_sorted_sorted);\n    let grades_map_keys_sorted_sorted_sorted_sorted_sorted = sort!(grades_map_keys_sorted_sorted_sorted_sorted);\n    let grades_map_values_sorted_sorted_sorted_sorted_sorted = sort!(grades_map_values_sorted_sorted_sorted_sorted);\n    let grades_map_keys_sorted_sorted_sorted_sorted_sorted_sorted = sort!(grades_map_keys_sorted_sorted_sorted_sorted_sorted);\n    let grades_map_values_sorted_sorted_sorted_sorted_sorted_sorted = sort!(grades_map_values_sorted_sorted_sorted_sorted_sorted);\n    let grades_map_keys_s\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpd00yfjq7.rs:39:26\n   |\n39 |     let grades_map_keys_s\n   |                          ^ help: add `;` here\n40 | }\n   | - unexpected token\n\nerror: cannot find macro `map` in this scope\n  --> /tmp/tmpd00yfjq7.rs:24:22\n   |\n24 |     let grades_map = map!(grades, f64 => f64.to_f()).to_map();\n   |                      ^^^\n\nerror: cannot find macro `map` in this scope\n  --> /tmp/tmpd00yfjq7.rs:25:27\n   |\n25 |     let grades_map_keys = map!(grades_map.keys(), String.from);\n   |                           ^^^\n\nerror: cannot find macro `map` in this scope\n  --> /tmp/tmpd00yfjq7.rs:26:29\n   |\n26 |     let grades_map_values = map!(grades_map.values(), String.from);\n   |                             ^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpd00yfjq7.rs:27:34\n   |\n27 |     let grades_map_keys_sorted = sort!(grades_map_keys);\n   |                                  ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpd00yfjq7.rs:28:36\n   |\n28 |     let grades_map_values_sorted = sort!(grades_map_values);\n   |                                    ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpd00yfjq7.rs:29:41\n   |\n29 |     let grades_map_keys_sorted_sorted = sort!(grades_map_keys_sorted);\n   |                                         ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpd00yfjq7.rs:30:43\n   |\n30 |     let grades_map_values_sorted_sorted = sort!(grades_map_values_sorted);\n   |                                           ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpd00yfjq7.rs:31:48\n   |\n31 |     let grades_map_keys_sorted_sorted_sorted = sort!(grades_map_keys_sorted_sorted);\n   |                                                ^^^^\n\nerror: cannot find macro `sort` in this scope\n  --> /tmp/tmpd00yfjq7.rs:32:50\n   |\n32 |     let grades_map_values_sorted_sorted_sorted = sort!(grades_map_values_sorted_sorted);\n   |                                                  ^^^^\n\nerror: cannot find macro `s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp6tm9y26u.rs:42:52\n   |\n42 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_\n   |                                                    ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp6tm9y26u.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0599]: no method named `vec` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmp6tm9y26u.rs:25:29\n   |\n25 |     let grades_vec = grades.vec();\n   |                             ^^^ help: there is an associated function with a similar name: `to_vec`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6tm9y26u.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_increment = 0;\n    let grade_table_value_increment = 0.0;\n    let grade_table_letter_increment = \"\";\n    let grade_table_grade_increment = \"\";\n    let grade_table_index_decrement = 0;\n    let grade_table_value_decrement = 0.0;\n    let grade_table_letter_decrement = \"\";\n    let grade_table_grade_decrement = \"\";\n    let grade_table_index_decrement_increment = 0;\n    let grade_table_value_decrement_increment = 0.0;\n    let grade_table_letter_decrement_increment = \"\";\n    let grade_table_grade_decrement_increment = \"\";\n    let grade_table_index_increment_decrement = 0;\n    let grade_table_value_increment_decrement = 0.0;\n    let grade_table_letter_increment_decrement = \"\";\n    let grade_table_grade_increment_decrement = \"\";\n    let grade_table_index_decrement_decrement = 0;\n    let grade_table_value_decrement_decrement = 0.0;\n    let grade_table_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmptk_eh7fy.rs:62:27\n   |\n62 |     let grade_table_letter\n   |                           ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptk_eh7fy.rs:36:16\n   |\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_letter_index = 0;\n    let grade_table_grade_letter_value = 0.0;\n    let grade_table_grade_letter_letter = \"\";\n    let grade_table_grade_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_letter_letter_value = 0.0;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpz9_ouuyp.rs:62:1\n   |\n62 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        [\"A+\", \"A\"],\n        [\"A\", \"A-\"],\n        [\"B+\", \"B\"],\n        [\"B\", \"B-\"],\n        [\"C+\", \"C\"],\n        [\"C\", \"C-\"],\n        [\"D+\", \"D\"],\n        [\"D\", \"D-\"],\n        [\"E\", \"E\"]\n    ];\n    let letter_grades = [];\n    for (let grade of grades) {\n        let letter_grade = grades_to_letter_grade[grade];\n        letter_grades.push(letter_grade);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpe5ffrr1_.rs:36:10\n   |\n36 |     for (let grade of grades) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grade`\n  --> /tmp/tmpe5ffrr1_.rs:36:14\n   |\n36 |     for (let grade of grades) {\n   |             -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpe5ffrr1_.rs:36:20\n   |\n36 |     for (let grade of grades) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grades`\n  --> /tmp/tmpe5ffrr1_.rs:36:23\n   |\n36 |     for (let grade of grades) {\n   |                      -^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpe5ffrr1_.rs:36:30\n   |\n36 |     for (let grade of grades) {\n   |                              ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpe5ffrr1_.rs:40:5\n   |\n40 |     return letter_grades;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n40 |     { return letter_grades; }\n   |     +                       +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_len_minus_one = grades_len - 1;\n    let grades_len_minus_two = grades_len - 2;\n    let grades_len_minus_three = grades_len - 3;\n    let grades_len_minus_four = grades_len - 4;\n    let grades_len_minus_five = grades_len - 5;\n    let grades_len_minus_six = grades_len - 6;\n    let grades_len_minus_seven = grades_len - 7;\n    let grades_len_minus_eight = grades_len - 8;\n    let grades_len_minus_nine = grades_len - 9;\n    let grades_len_minus_ten = grades_len - 10;\n    let grades_len_minus_eleven = grades_len - 11;\n    let grades_len_minus_twelve = grades_len - 12;\n    let grades_len_minus_thirteen = grades_len - 13;\n    let grades_len_minus_fourteen = grades_len - 14;\n    let grades_len_minus_fifteen = grades_len - 15;\n    let grades_len_minus_sixteen = grades_len - 16;\n    let grades_len_minus_seventeen = grades_len - 17;\n    let grades_len_minus_eighteen = grades_len - 18;\n    let grades_len_minus_nineteen = grades_len - 19;\n    let grades_len_minus_twenty = grades_len - 20;\n    let grades_len_minus_twenty_one = grades_len - 21;\n    let grades_len_minus_twenty_two = grades_len - 22;\n    let grades_len_minus_twenty_three = grades_len - 23;\n    let grades_len_minus_twenty_four = grades_len - 24;\n    let grades_len_minus_twenty_five = grades_len - 25;\n    let grades_len_minus_twenty_six = grades_len - 26;\n    let grades_len_minus_twenty_seven = grades_len - 27;\n    let grades_len_minus_twenty\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpanlozjdn.rs:52:32\n   |\n52 |     let grades_len_minus_twenty\n   |                                ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpanlozjdn.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_grade = \"\";\n    let grade_table_grade_grade_index = 0;\n    let grade_table_grade_grade_value = 0.0;\n    let grade_table_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpiv_hir0a.rs:62:26\n   |\n62 |     let grade_table_grade\n   |                          ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:36:16\n   |\n36",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_sorted = sort_by(grades, |&f64| f64.abs());\n    let grades_sorted_desc = sort_by(grades_sorted, |&f64| f64.desc());\n    let grades_sorted_desc_desc = sort_by(grades_sorted_desc, |&f64| f64.desc());\n    let grades_sorted_desc_desc_desc = sort_by(grades_sorted_desc_desc, |&f64| f64.desc());\n    let grades_sorted_desc_desc_desc_desc = sort_by(grades_sorted_desc_desc_desc, |&f64| f64.desc());\n    let grades_sorted_desc_desc_desc_desc_desc = sort_by(grades_sorted_desc_desc_desc_desc, |&f64| f64.desc());\n    let grades_sorted_desc_desc_desc_desc_desc_desc = sort_by(grades_sorted_desc_desc_desc_desc_desc, |&f64| f64.desc());\n    let grades_sorted_desc_desc_desc_desc_desc_desc_desc = sort_by(grades_sorted_desc_desc_desc_desc_desc_desc, |&f64| f64.desc());\n    let grades_sorted_desc_desc_desc_desc_desc_desc_desc_desc = sort_by(grades_sorted_desc_desc_desc_desc_desc_desc_desc, |&f64| f64.desc());\n    let grades_sorted_desc_desc_desc_desc_desc_desc_desc_desc_desc = sort_by(grades_sorted_desc_desc_desc_desc_desc_desc_desc_desc, |&f64| f64.desc());\n    let grades_sorted_desc_desc_desc_desc_desc_desc_desc_desc_desc_desc = sort_by(grades_sorted_desc_desc_desc_desc_desc_desc_desc_desc_desc, |&f64| f64.desc());\n    let grades_sorted_desc_desc_desc_desc_desc_desc\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp3r0yxyhn.rs:35:52\n   |\n35 |     let grades_sorted_desc_desc_desc_desc_desc_desc\n   |                                                    ^ help: add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp3r0yxyhn.rs:24:25\n   |\n24 |     let grades_sorted = sort_by(grades, |&f64| f64.abs());\n   |                         ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp3r0yxyhn.rs:25:30\n   |\n25 |     let grades_sorted_desc = sort_by(grades_sorted, |&f64| f64.desc());\n   |                              ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp3r0yxyhn.rs:26:35\n   |\n26 |     let grades_sorted_desc_desc = sort_by(grades_sorted_desc, |&f64| f64.desc());\n   |                                   ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp3r0yxyhn.rs:27:40\n   |\n27 |     let grades_sorted_desc_desc_desc = sort_by(grades_sorted_desc_desc, |&f64| f64.desc());\n   |                                        ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp3r0yxyhn.rs:28:45\n   |\n28 |     let grades_sorted_desc_desc_desc_desc = sort_by(grades_sorted_desc_desc_desc, |&f64| f64.desc());\n   |                                             ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp3r0yxyhn.rs:29:50\n   |\n29 |     let grades_sorted_desc_desc_desc_desc_desc = sort_by(grades_sorted_desc_desc_desc_desc, |&f64| f64.desc());\n   |                                                  ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp3r0yxyhn.rs:30:55\n   |\n30 |     let grades_sorted_desc_desc_desc_desc_desc_desc = sort_by(grades_sorted_desc_desc_desc_desc_desc, |&f64| f64.desc());\n   |               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[0];\n    let grade_table_gpa_next = grade_table_value_next[1];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[0];\n    let grade_table_gpa_prev = grade_table_value_prev[1];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpcsj8udvr.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsj8udvr.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        [\"A+\", \"A\"],\n        [\"A\", \"A-\"],\n        [\"B+\", \"B\"],\n        [\"B\", \"B-\"],\n        [\"C+\", \"C\"],\n        [\"C\", \"C-\"],\n        [\"D+\", \"D\"],\n        [\"D\", \"D-\"],\n        [\"E\", \"E\"]\n    ];\n    let letter_grades = [];\n    for (let grade of grades) {\n        let letter_grade = grades_to_letter_grade[grade];\n        letter_grades.push(letter_grade);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpe5ffrr1_.rs:36:10\n   |\n36 |     for (let grade of grades) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grade`\n  --> /tmp/tmpe5ffrr1_.rs:36:14\n   |\n36 |     for (let grade of grades) {\n   |             -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpe5ffrr1_.rs:36:20\n   |\n36 |     for (let grade of grades) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grades`\n  --> /tmp/tmpe5ffrr1_.rs:36:23\n   |\n36 |     for (let grade of grades) {\n   |                      -^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpe5ffrr1_.rs:36:30\n   |\n36 |     for (let grade of grades) {\n   |                              ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpe5ffrr1_.rs:40:5\n   |\n40 |     return letter_grades;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n40 |     { return letter_grades; }\n   |     +                       +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"\n    ];\n    let letter_grades = Vec::new();\n    for grade in grades {\n        let grade_index = grades_to_letter_grade.index(grade);\n        letter_grades.push(grades_to_letter_grade[grade_index]);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error[E0599]: no method named `index` found for array `[&str; 13]` in the current scope\n  --> /tmp/tmpqoemi3rt.rs:29:50\n   |\n29 |         let grade_index = grades_to_letter_grade.index(grade);\n   |                                                  ^^^^^ method not found in `[&str; 13]`\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::ops::Index;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let letter_grades = [];\n    for (let grade of grades) {\n        let grade_index = grade_table.find(g => g[1] == grade).index;\n        letter_grades.push(grade_table[grade_index][0]);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpz35dip5z.rs:40:10\n   |\n40 |     for (let grade of grades) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grade`\n  --> /tmp/tmpz35dip5z.rs:40:14\n   |\n40 |     for (let grade of grades) {\n   |             -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpz35dip5z.rs:40:20\n   |\n40 |     for (let grade of grades) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grades`\n  --> /tmp/tmpz35dip5z.rs:40:23\n   |\n40 |     for (let grade of grades) {\n   |                      -^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpz35dip5z.rs:40:30\n   |\n40 |     for (let grade of grades) {\n   |                              ^ help: try adding `in` here\n\nerror: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpz35dip5z.rs:41:46\n   |\n41 |         let grade_index = grade_table.find(g => g[1] == grade).index;\n   |                                              ^^ expected one of 8 possible tokens\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_gpa = grade_table_value[0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[1];\n    let grade_table_next_gpa = grade_table_next_value[0];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[1];\n    let grade_table_next_next_gpa = grade_table_next_next_value[0];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[1];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpv1teuasb.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmpv1teuasb.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv1teuasb.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv1teuasb.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv1teuasb.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv1teuasb.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv1teuasb.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv1teuasb.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv1teuasb.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv1teuasb.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv1teuasb.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[0];\n    let grade_table_next_gpa = grade_table_next_value[1];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[0];\n    let grade_table_next_next_gpa = grade_table_next_next_value[1];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[0];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpoo11xtjq.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmpoo11xtjq.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        [\"A+\", \"A\"],\n        [\"A\", \"A-\"],\n        [\"B+\", \"B\"],\n        [\"B\", \"B-\"],\n        [\"C+\", \"C\"],\n        [\"C\", \"C-\"],\n        [\"D+\", \"D\"],\n        [\"D\", \"D-\"],\n        [\"E\", \"E\"]\n    ];\n    let letter_grades = grades_to_letter_grade.map(\n        (grade, letter_grade) => String::from(grade) + String::from(letter_grade)\n    );\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpvyh_pvg4.rs:36:31\n   |\n36 |         (grade, letter_grade) => String::from(grade) + String::from(letter_grade)\n   |                               ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_sorted = sort_by(grades, |&f64| f64.abs);\n    let grades_sorted_desc = sort_by(grades, |&f64| f64.abs, |&f64| f64.desc);\n    let grades_sorted_desc_desc = sort_by(grades, |&f64| f64.abs, |&f64| f64.desc, |&f64| f64.desc);\n    let grades_sorted_desc_asc = sort_by(grades, |&f64| f64.abs, |&f64| f64.desc, |&f64| f64.asc);\n    let grades_sorted_asc = sort_by(grades, |&f64| f64.abs, |&f64| f64.asc);\n    let grades_sorted_asc_asc = sort_by(grades, |&f64| f64.abs, |&f64| f64.asc, |&f64| f64.asc);\n    let grades_sorted_asc_desc = sort_by(grades, |&f64| f64.abs, |&f64| f64.asc, |&f64| f64.desc);\n    let grades_sorted_desc_asc = sort_by(grades, |&f64| f64.abs, |&f64| f64.desc, |&f64| f64.asc);\n    let grades_sorted_desc_desc = sort_by(grades, |&f64| f64.abs, |&f64| f64.desc, |&f64| f64.desc);\n    let grades_sorted_desc_desc_asc = sort_by(grades, |&f64| f64.abs, |&f64| f64.desc, |&f64| f64.desc, |&f64| f64.asc);\n    let grades_sorted_desc_desc_desc = sort_by(grades, |&f64| f64.abs, |&f64| f64.desc, |&f64| f64.desc, |&f64| f64.desc);\n    let grades_sorted_desc\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp4g55ebiy.rs:35:27\n   |\n35 |     let grades_sorted_desc\n   |                           ^ help: add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp4g55ebiy.rs:24:25\n   |\n24 |     let grades_sorted = sort_by(grades, |&f64| f64.abs);\n   |                         ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp4g55ebiy.rs:25:30\n   |\n25 |     let grades_sorted_desc = sort_by(grades, |&f64| f64.abs, |&f64| f64.desc);\n   |                              ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp4g55ebiy.rs:26:35\n   |\n26 |     let grades_sorted_desc_desc = sort_by(grades, |&f64| f64.abs, |&f64| f64.desc, |&f64| f64.desc);\n   |                                   ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp4g55ebiy.rs:27:34\n   |\n27 |     let grades_sorted_desc_asc = sort_by(grades, |&f64| f64.abs, |&f64| f64.desc, |&f64| f64.asc);\n   |                                  ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp4g55ebiy.rs:28:29\n   |\n28 |     let grades_sorted_asc = sort_by(grades, |&f64| f64.abs, |&f64| f64.asc);\n   |                             ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp4g55ebiy.rs:29:33\n   |\n29 |     let grades_sorted_asc_asc = sort_by(grades, |&f64| f64.abs, |&f64| f64.asc, |&f64| f64.asc);\n   |                                 ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp4g55ebiy.rs:30:34\n   |\n30 |     let grades_sorted_asc_desc = sort_by(grades, |&f64| f64.abs, |&f64| f64.asc, |&f64| f64.desc);\n   |                                  ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let letter_grades = vec![grade_equation(gpa) for gpa in grades]\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpp9qqq_70.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[0];\n    let grade_table_gpa_next = grade_table_value_next[1];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[0];\n    let grade_table_gpa_prev = grade_table_value_prev[1];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpi57gpls3.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi57gpls3.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_gpa = grade_table_value[0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[1];\n    let grade_table_next_gpa = grade_table_next_value[0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index];\n    let grade_table_previous_letter = grade_table_previous_value[1];\n    let grade_table_previous_gpa = grade_table_previous_value[0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index];\n    let grade_table_previous_next_letter = grade_table_previous_next_value[1];\n    let grade_table_previous_next_gpa = grade_table_previous_next_value[0];\n    let grade_table_previous_pre\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpzoowo_ya.rs:56:33\n   |\n56 |     let grade_table_previous_pre\n   |                                 ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzoowo_ya.rs",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    for i in 0..grades_len - 1 {\n        grades_sum += grades[i];\n    }\n    let grades_average = grades_sum / grades_len;\n    let grades_grades = vec![];\n    if grades_average >= 4.0 {\n        grades_grades = vec![\"A+\"];\n    } else if grades_average >= 3.7 {\n        grades_grades = vec![\"A\"];\n    } else if grades_average >= 3.3 {\n        grades_grades = vec![\"A-\"];\n    } else if grades_average >= 3.0 {\n        grades_grades = vec![\"B+\"];\n    } else if grades_average >= 2.7 {\n        grades_grades = vec![\"B\"];\n    } else if grades_average >= 2.3 {\n        grades_grades = vec![\"B-\"];\n    } else if grades_average >= 2.0 {\n        grades_grades = vec![\"C+\"];\n    } else if grades_average >= 1.7 {\n        grades_grades = vec![\"C\"];\n    } else if grades_average >= 1.3 {\n        grades_grades = vec![\"C-\"];\n    } else if grades_average >= 1.0 {\n        grades_grades = vec![\"D+\"];\n    } else if grades_average >= 0.7 {\n        grades_grades = vec![\"D\"];\n    } else if grades_average >= 0.0 {\n        grades_grades = vec![\"D-\"];\n    } else {\n        grades_grades = vec![\"E\"];\n    }\n    return grades_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpajxdof8a.rs:29:37\n   |\n29 |     let grades_average = grades_sum / grades_len;\n   |                                     ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpajxdof8a.rs:58:12\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                ----------- expected `Vec<String>` because of return type\n...\n58 |     return grades_grades;\n   |            ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_letter_index = 0;\n    let grade_table_grade_letter_value = 0.0;\n    let grade_table_grade_letter_letter = \"\";\n    let grade_table_grade_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_letter_letter_value = 0.0;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpz9_ouuyp.rs:62:1\n   |\n62 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_gpa = grade_table_value[1];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[0];\n    let grade_table_next_gpa = grade_table_next_value[1];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[0];\n    let grade_table_next_next_gpa = grade_table_next_next_value[1];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[0];\n    let grade_table_next_next_next_gpa = grade_table_next_next_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpoo11xtjq.rs:55:64\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                                                ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grade_table_next_next_` in this scope\n  --> /tmp/tmpoo11xtjq.rs:55:42\n   |\n55 |     let grade_table_next_next_next_gpa = grade_table_next_next_\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grade_table_next_next_gpa`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoo11xtjq.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point nu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_value_index];\n    let grade_table_value_value_value_value_value_value_index = 6;\n    let grade_table_value_value_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpr2ksjs8s.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpr2ksjs8s.rs:54:82\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_value_value_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_value_value\n   |                                                                                  ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2ksjs8s.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2ksjs8s.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2ksjs8s.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2ksjs8s.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2ksjs8s.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2ksjs8s.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2ksjs8s.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr2ksjs8s.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatche",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"\n    ];\n    let letter_grades = Vec::new();\n    for (grade in grades) {\n        let grade_index = grades_to_letter_grade.indexOf(grade);\n        letter_grades.push(grades_to_letter_grade[grade_index]);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmp23k74xz6.rs:28:16\n   |\n28 |     for (grade in grades) {\n   |                ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp23k74xz6.rs:28:9\n   |\n28 |     for (grade in grades) {\n   |         ^               ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n28 -     for (grade in grades) {\n28 +     for grade in grades {\n   | \n\nerror[E0599]: no method named `indexOf` found for array `[&str; 13]` in the current scope\n  --> /tmp/tmp23k74xz6.rs:29:50\n   |\n29 |         let grade_index = grades_to_letter_grade.indexOf(grade);\n   |                                                  ^^^^^^^ method not found in `[&str; 13]`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let letter_grades = [];\n    for (let grade of grades) {\n        let grade_index = grade_table.find(grade).value;\n        letter_grades.push(grade_table[grade_index][1]);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpjhhwxylr.rs:40:10\n   |\n40 |     for (let grade of grades) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grade`\n  --> /tmp/tmpjhhwxylr.rs:40:14\n   |\n40 |     for (let grade of grades) {\n   |             -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpjhhwxylr.rs:40:20\n   |\n40 |     for (let grade of grades) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `grades`\n  --> /tmp/tmpjhhwxylr.rs:40:23\n   |\n40 |     for (let grade of grades) {\n   |                      -^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpjhhwxylr.rs:40:30\n   |\n40 |     for (let grade of grades) {\n   |                              ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpjhhwxylr.rs:44:5\n   |\n44 |     return letter_grades;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n44 |     { return letter_grades; }\n   |     +                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjhhwxylr.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjhhwxylr.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjhhwxylr.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjhhwxylr.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-po",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa) {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let grades_string = grades.map(grade_equation)\n    return grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmp0uw_37an.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_grade = grade_table_value[0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[1];\n    let grade_table_next_grade = grade_table_next_value[0];\n    let grade_table_next_next_index = grade_table_next_index + 1;\n    let grade_table_next_next_value = grade_table[grade_table_next_next_index];\n    let grade_table_next_next_letter = grade_table_next_next_value[1];\n    let grade_table_next_next_grade = grade_table_next_next_value[0];\n    let grade_table_next_next_next_index = grade_table_next_next_index + 1;\n    let grade_table_next_next_next_value = grade_table[grade_table_next_next_next_index];\n    let grade_table_next_next_next_letter = grade_table_next_next_next_value[1];\n    let grade_table_next_next_next_grade = grade_table_next_next_next_value[\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found `]`\n  --> /tmp/tmp3__mllf3.rs:56:1\n   |\n56 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp3__mllf3.rs:55:76\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n55 |     let grade_table_next_next_next_grade = grade_table_next_next_next_value[\n   |                                                                            ^ unclosed delimiter\n56 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3__mllf3.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_last_index = grade_table_index + grade_table_length - 1;\n    let grade_table_last_value = grade_table[grade_table_last_index][1];\n    let grade_table_last_letter = grade_table[grade_table_last_index][0];\n    let grade_table_first_index = 0;\n    let grade_table_first_value = grade_table[grade_table_first_index][1];\n    let grade_table_first_letter = grade_table[grade_table_first_index][0];\n    let grade_table_first_last_index = grade_table_first_index + grade_table_length - 1\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpd4v350kz.rs:55:88\n   |\n55 |     let grade_table_first_last_index = grade_table_first_index + grade_table_length - 1\n   |                                                                                        ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4v350kz.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_previous_previous_index = grade_table_previous_index - 1;\n    let grade_table_previous_previous_value = grade_table[grade_table_previous_previous_index][1];\n    let grade_table_previous_previous_letter = grade_table[grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpd5z_3oo8.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpd5z_3oo8.rs:54:59\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_previous_previous_letter = grade_table[grade\n   |                                                           ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd5z_3oo8.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn(gpa) {\n        if gpa >= 4.0 {\n            \"A+\"\n        } else if gpa >= 3.7 {\n            \"A\"\n        } else if gpa >= 3.3 {\n            \"A-\"\n        } else if gpa >= 3.0 {\n            \"B+\"\n        } else if gpa >= 2.7 {\n            \"B\"\n        } else if gpa >= 2.3 {\n            \"B-\"\n        } else if gpa >= 2.0 {\n            \"C+\"\n        } else if gpa >= 1.7 {\n            \"C\"\n        } else if gpa >= 1.3 {\n            \"C-\"\n        } else if gpa >= 1.0 {\n            \"D+\"\n        } else if gpa >= 0.7 {\n            \"D\"\n        } else if gpa >= 0.0 {\n            \"D-\"\n        } else {\n            \"E\"\n        }\n    }\n    let grade_equation_vec = grades.map(grade_equation)\n    return grade_equation_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmp4dciskig.rs:24:26\n   |\n24 |     let grade_equation = fn(gpa) {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_letter = grade_table_letter;\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_letter = grade_table_value_letter;\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_letter = grade_table_value_value_letter;\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_letter = grade_table_value_value_value_letter;\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpfyzugumi.rs:56:44\n   |\n56 |     let grade_table_value_value_value_value\n   |                                            ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = map!(grades, f64 => f64.to_f())\n    let grades_map_len = len(grades_map)\n    let grades_map_keys = keys!(grades_map)\n    let grades_map_values = values!(grades_map)\n    let grades_map_keys_len = len(grades_map_keys)\n    let grades_map_values_len = len(grades_map_values)\n    let grades_map_keys_values = zip!(grades_map_keys, grades_map_values)\n    let grades_map_keys_values_len = len(grades_map_keys_values)\n    let grades_map_keys_values_keys = keys!(grades_map_keys_values)\n    let grades_map_keys_values_keys_len = len(grades_map_keys_values_keys)\n    let grades_map_keys_values_keys_values = zip!(grades_map_keys_values_keys, grades_map_values)\n    let grades_map_keys_values_keys_values_len = len(grades_map_keys_values_keys_values)\n    let grades_map_keys_values_keys_values_keys = keys!(grades_map_keys_values_keys_values)\n    let grades_map_keys_values_keys_values_keys_len = len(grades_map_keys_values_keys_values_keys)\n    let grades_map_keys_values_keys_values_keys_values = zip!(grades_map_keys_values_keys_values_keys, grades_map_values)\n    let grades_map_keys_values_keys_values_keys_values_len = len(grades_map_keys_values_keys_values_keys_values)\n    let grades_map_keys_values_keys_values_keys_values_keys = keys!(grades_map_keys_values_keys_values_keys_values_len)\n    let grades_map_keys_values_keys_values_keys_values_keys_len = len(grades_map_keys_values_keys_values_keys_values_keys)\n    let grades_map_keys\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnvzr86jb.rs:24:53\n   |\n24 |     let grades_map = map!(grades, f64 => f64.to_f())\n   |                                                     ^ help: add `;` here\n25 |     let grades_map_len = len(grades_map)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnvzr86jb.rs:25:41\n   |\n25 |     let grades_map_len = len(grades_map)\n   |                                         ^ help: add `;` here\n26 |     let grades_map_keys = keys!(grades_map)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnvzr86jb.rs:26:44\n   |\n26 |     let grades_map_keys = keys!(grades_map)\n   |                                            ^ help: add `;` here\n27 |     let grades_map_values = values!(grades_map)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnvzr86jb.rs:27:48\n   |\n27 |     let grades_map_values = values!(grades_map)\n   |                                                ^ help: add `;` here\n28 |     let grades_map_keys_len = len(grades_map_keys)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnvzr86jb.rs:28:51\n   |\n28 |     let grades_map_keys_len = len(grades_map_keys)\n   |                                                   ^ help: add `;` here\n29 |     let grades_map_values_len = len(grades_map_values)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnvzr86jb.rs:29:55\n   |\n29 |     let grades_map_values_len = len(grades_map_values)\n   |                                                       ^ help: add `;` here\n30 |     let grades_map_keys_values = zip!(grades_map_keys, grades_map_values)\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnvzr86jb.rs:30:74\n   |\n30 |     let grades_map_keys_values = zip!(grades_map_keys, grades_map_values)\n   |                                                                          ^ help: add `;` here\n31 |     let grades_map_keys_va",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_sorted = sort_by(grades, |&f64| f64.abs());\n    let grades_sorted_rev = reverse(grades_sorted);\n    let grades_sorted_rev_sorted = reverse(sort_by(grades_sorted_rev, |&f64| f64.abs()));\n    let grades_sorted_rev_sorted_rev = reverse(sort_by(grades_sorted_rev_sorted, |&f64| f64.abs()));\n    let grades_sorted_rev_sorted_rev_sorted = reverse(sort_by(grades_sorted_rev_sorted_rev, |&f64| f64.abs()));\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted = reverse(sort_by(grades_sorted_rev_sorted_rev_sorted, |&f64| f64.abs()));\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted = reverse(sort_by(grades_sorted_rev_sorted_rev_sorted, |&f64| f64.abs()));\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted = reverse(sort_by(grades_sorted_rev_sorted_rev_sorted_rev_sorted, |&f64| f64.abs()));\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted = reverse(sort_by(grades_sorted_rev_sorted_rev_sorted_rev_sorted, |&f64| f64.abs()));\n    let grades_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted_rev_sorted = reverse(sort_by(grades_sorted_rev_sorted_rev_sorted_rev_sorted, |&f64| f64.abs()));\n    let grades_s\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp3uhzvk62.rs:34:17\n   |\n34 |     let grades_s\n   |                 ^ help: add `;` here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp3uhzvk62.rs:24:25\n   |\n24 |     let grades_sorted = sort_by(grades, |&f64| f64.abs());\n   |                         ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp3uhzvk62.rs:25:29\n   |\n25 |     let grades_sorted_rev = reverse(grades_sorted);\n   |                             ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp3uhzvk62.rs:26:36\n   |\n26 |     let grades_sorted_rev_sorted = reverse(sort_by(grades_sorted_rev, |&f64| f64.abs()));\n   |                                    ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp3uhzvk62.rs:26:44\n   |\n26 |     let grades_sorted_rev_sorted = reverse(sort_by(grades_sorted_rev, |&f64| f64.abs()));\n   |                                            ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp3uhzvk62.rs:27:40\n   |\n27 |     let grades_sorted_rev_sorted_rev = reverse(sort_by(grades_sorted_rev_sorted, |&f64| f64.abs()));\n   |                                        ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by` in this scope\n  --> /tmp/tmp3uhzvk62.rs:27:48\n   |\n27 |     let grades_sorted_rev_sorted_rev = reverse(sort_by(grades_sorted_rev_sorted, |&f64| f64.abs()));\n   |                                                ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp3uhzvk62.rs:28:47\n   |\n28 |     let grades_sorted_rev_sorted_rev_sorted = reverse(sort_by(grades_sorted_rev_sorted_rev, |&f64| f64.abs()));\n   |                                               ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sort_by`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_letter_index = 0;\n    let grade_table_letter_value = 0.0;\n    let grade_table_letter_letter = \"\";\n    let grade_table_letter_letter_index = 0;\n    let grade_table_letter_letter_value = 0.0;\n    let grade_table_letter_letter_letter = \"\";\n    let grade_table_letter_letter_letter_index = 0;\n    let grade_table_letter_letter_letter_value = 0.0;\n    let grade_table_letter_letter_letter_letter = \"\";\n    let grade_table_letter_letter_letter_letter_index = 0;\n    let grade_table_letter_letter_letter_letter_value = 0.0;\n    let grade_table_letter_letter_letter_letter_letter = \"\";\n    let grade_table_letter_letter_letter_letter_letter_index = 0;\n    let grade_table_letter_letter_letter_letter_letter_value = 0.0;\n    let grade_table_letter_letter_letter_letter_letter_letter = \"\";\n    let grade_table_letter_letter_letter_letter_letter_letter_index = 0;\n    let grade_table_letter_letter_letter_letter_letter_letter_value = 0.0;\n    let grade_table_letter_letter_letter_letter\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp5hflh_ma.rs:60:48\n   |\n60 |     let grade_table_letter_letter_letter_letter\n   |                                                ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hflh_ma.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_grade = grade_table_value[0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index];\n    let grade_table_next_letter = grade_table_next_value[1];\n    let grade_table_next_grade = grade_table_next_value[0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index];\n    let grade_table_previous_letter = grade_table_previous_value[1];\n    let grade_table_previous_grade = grade_table_previous_value[0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index];\n    let grade_table_previous_next_letter = grade_table_previous_next_value[1];\n    let grade_table_previous_next_grade = grade_table_previous_next_value[0];\n    let grade_table_previous_previous_index =\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmpu9sxcirc.rs:57:1\n   |\n57 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu9sxcirc.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found fl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    let grades_sum_len = 0;\n    let grades_sum_len_len = 0;\n    let grades_sum_len_len_len = 0;\n    let grades_sum_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0;\n    let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpbu4zdfhv.rs:43:71\n   |\n43 |     let grades_sum_len_len_len_len_len_len_len_len_len_len_len_len_len\n   |                                                                       ^ help: add `;` here\n44 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbu4zdfhv.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.3 {\n            return \"D-\"\n        } else if gpa >= 0.0 {\n            return \"E\"\n        } else {\n            return \"F\"\n        }\n    }\n    let grades_with_letter_grades = grades.map(grade_equation)\n    return grades_with_letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpaxlxavto.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_to_letter_grade = [\n        [\"A+\", \"A\"],\n        [\"A\", \"A-\"],\n        [\"B+\", \"B\"],\n        [\"B\", \"B-\"],\n        [\"C+\", \"C\"],\n        [\"C\", \"C-\"],\n        [\"D+\", \"D\"],\n        [\"D\", \"D-\"],\n        [\"E\", \"E\"]\n    ];\n    let letter_grades = vec![];\n    for (grade in grades) {\n        let grade_index = grades_to_letter_grade.indexOf(grade);\n        letter_grades = letter_grades.push(grades_to_letter_grade[grade_index]);\n    }\n    return letter_grades;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmp0aybxc2w.rs:36:16\n   |\n36 |     for (grade in grades) {\n   |                ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp0aybxc2w.rs:36:9\n   |\n36 |     for (grade in grades) {\n   |         ^               ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n36 -     for (grade in grades) {\n36 +     for grade in grades {\n   | \n\nerror[E0599]: no method named `indexOf` found for array `[[&str; 2]; 9]` in the current scope\n  --> /tmp/tmp0aybxc2w.rs:37:50\n   |\n37 |         let grade_index = grades_to_letter_grade.indexOf(grade);\n   |                                                  ^^^^^^^ method not found in `[[&str; 2]; 9]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0aybxc2w.rs:38:25\n   |\n35 |     let letter_grades = vec![];\n   |                         ------ expected due to this value\n...\n38 |         letter_grades = letter_grades.push(grades_to_letter_grade[grade_index]);\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `push` modifies its receiver in-place\n  --> /tmp/tmp0aybxc2w.rs:38:39\n   |\n38 |         letter_grades = letter_grades.push(grades_to_letter_grade[grade_index]);\n   |                         ------------- ^^^^ this call modifies `letter_grades` in-place\n   |                         |\n   |                         you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `push`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter_grade = grade_table[grade_table_index][0];\n    let grade_table_index_increment = 1;\n    let grade_table_index_decrement = -1;\n    let grade_table_index_limit = grade_table_length - 1;\n    let grade_table_index_limit_increment = 1;\n    let grade_table_index_limit_decrement = -1;\n    let grade_table_index_limit_limit = grade_table_length - 2;\n    let grade_table_index_limit_limit_increment = 1;\n    let grade_table_index_limit_limit_decrement = -1;\n    let grade_table_index_limit_limit_limit = grade_table_length - 3;\n    let grade_table_index_limit_limit_limit_increment = 1;\n    let grade_table_index_limit_limit_limit_decrement = -1;\n    let grade_table_index_limit_limit_limit_limit = grade_table_length - 4;\n    let grade_table_index_limit_limit_limit_limit_increment = 1;\n    let grade_table_index_limit_limit_limit_limit_decrement = -1;\n    let grade_table_index_limit_limit_limit_limit_limit = grade_table_length - 5;\n    \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphf149chw.rs:37:15\n   |\n37 |         [\"E\", 0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_len = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_index_len = grade_table_len - 1;\n    let grade_table_index_max = grade_table_index_len;\n    let grade_table_index_min = 0;\n    let grade_table_index_min_len = grade_table_index_min;\n    let grade_table_index_min_max = grade_table_index_min_len + 1;\n    let grade_table_index_min_min = 0;\n    let grade_table_index_min_min_len = grade_table_index_min_min;\n    let grade_table_index_min_min_max = grade_table_index_min_min_len + 1;\n    let grade_table_index_min_min_min = 0;\n    let grade_table_index_min_min_min_len = grade_table_index_min_min_min;\n    let grade_table_index_min_min_min_max = grade_table_index_min_min_min_len + 1;\n    let grade_table_index_min_min_min_min = 0;\n    let grade_table_index_min_min_min_min_len = grade_table_index_min_min_min_min;\n    let grade_table_index_min_min_min_min_max = grade_table_index_min_min_min_min_len + 1;\n    let grade_table_index_min_min_min_min_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmphtwo8bdl.rs:55:43\n   |\n55 |     let grade_table_index_min_min_min_min_\n   |                                           ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtwo8bdl.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -->",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0],\n    ];\n    let grade_table_len = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_len = 0;\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_grade = \"\";\n    let grade_table_grade_grade_len = 0;\n    let grade_table_grade_grade_index = 0;\n    let grade_table_grade_grade_value = 0.0;\n    let grade_table_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_len = 0;\n    let grade_table_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_len = 0;\n    let grade_table_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_grade_letter = \"\";\n    let grade_table_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpckpnob_q.rs:63:21\n   |\n63 |     let grade_table_\n   |                     ^ help: add `;` here\n64 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpckpnob_q.rs:36:16\n   |\n36 |        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_next = 0;\n    let grade_table_value_next = 0.0;\n    let grade_table_letter_next = \"\";\n    let grade_table_grade_next = \"\";\n    let grade_table_index_previous = 0;\n    let grade_table_value_previous = 0.0;\n    let grade_table_letter_previous = \"\";\n    let grade_table_grade_previous = \"\";\n    let grade_table_index_previous_previous = 0;\n    let grade_table_value_previous_previous = 0.0;\n    let grade_table_letter_previous_previous = \"\";\n    let grade_table_grade_previous_previous = \"\";\n    let grade_table_index_previous_previous_previous = 0;\n    let grade_table_value_previous_previous_previous = 0.0;\n    let grade_table_letter_previous_previous_previous = \"\";\n    let grade_table_grade_previous_previous_previous = \"\";\n    let grade_table_index_previous_previous_previous_previous = 0;\n    let grade_table_value_previous_previous_previous_previous = 0.0;\n    let grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp3thu2egk.rs:62:14\n   |\n62 |     let grade\n   |              ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3thu2egk.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_vec = grades.vec();\n    let grades_vec_len = grades_vec.len();\n    let grades_vec_vec = grades_vec.vec();\n    let grades_vec_vec_len = grades_vec_vec.len();\n    let grades_vec_vec_vec = grades_vec_vec.vec();\n    let grades_vec_vec_vec_len = grades_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec = grades_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_len = grades_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n    let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n    let grades_vec_vec_vec_vec_\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp11rq8kov.rs:42:32\n   |\n42 |     let grades_vec_vec_vec_vec_\n   |                                ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:37:46\n   |\n37 |     let grades_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:38:50\n   |\n38 |     let grades_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:39:50\n   |\n39 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.vec();\n   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_len`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:40:54\n   |\n40 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_len = grades_vec_vec_vec_vec_vec_vec_vec_vec_vec.len();\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `grades_vec_vec_vec_vec_vec_vec_vec_vec`\n\nerror[E0425]: cannot find value `grades_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec` in this scope\n  --> /tmp/tmp11rq8kov.rs:41:54\n   |\n41 |     let grades_vec_vec_vec_vec_vec_vec_vec_vec_vec = grades_vec_vec_vec_v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    let grades_avg = 0.0;\n    let grades_min = 0.0;\n    let grades_max = 0.0;\n    let grades_min_index = 0;\n    let grades_max_index = 0;\n    let grades_avg_index = 0;\n    let grades_sum_index = 0;\n    let grades_min_index_index = 0;\n    let grades_max_index_index = 0;\n    let grades_avg_index_index = 0;\n    let grades_sum_index_index = 0;\n    for i in 0..grades_len {\n        grades_sum += grades[i];\n        if (grades_sum_index == 0) {\n            grades_sum_index = i;\n        }\n        if (grades_min_index == 0) {\n            grades_min_index = i;\n        }\n        if (grades_max_index == 0) {\n            grades_max_index = i;\n        }\n        if (grades_avg_index == 0) {\n            grades_avg_index = i;\n        }\n        if (grades_sum_index_index == 0) {\n            grades_sum_index_index = i;\n        }\n        if (grades_min_index_index == 0) {\n            grades_min_index_index = i;\n        }\n        if (grades_max_index_index == 0) {\n            grades_max_index_index = i;\n        }\n        if (grades_avg_index_index == 0) {\n            grades_avg_index_index = i;\n        }\n    }\n    grades_avg = grades_sum / grades_len;\n    if (grades_min > grades_avg) {\n        grades_min = grades_avg;\n        grades_min_index = grades_avg_index;\n    }\n    if (grades_max < grades_avg) {\n        grades_max = grades_avg;\n        grades_max_index = grades_avg_index;\n    }\n    let grades_min\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpoqqapkon.rs:73:19\n   |\n73 |     let grades_min\n   |                   ^ help: add `;` here\n74 | }\n   | - unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpoqqapkon.rs:39:12\n   |\n39 |         if (grades_sum_index == 0) {\n   |            ^                     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n39 -         if (grades_sum_index == 0) {\n39 +         if grades_sum_index == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpoqqapkon.rs:42:12\n   |\n42 |         if (grades_min_index == 0) {\n   |            ^                     ^\n   |\nhelp: remove these parentheses\n   |\n42 -         if (grades_min_index == 0) {\n42 +         if grades_min_index == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpoqqapkon.rs:45:12\n   |\n45 |         if (grades_max_index == 0) {\n   |            ^                     ^\n   |\nhelp: remove these parentheses\n   |\n45 -         if (grades_max_index == 0) {\n45 +         if grades_max_index == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpoqqapkon.rs:48:12\n   |\n48 |         if (grades_avg_index == 0) {\n   |            ^                     ^\n   |\nhelp: remove these parentheses\n   |\n48 -         if (grades_avg_index == 0) {\n48 +         if grades_avg_index == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpoqqapkon.rs:51:12\n   |\n51 |         if (grades_sum_index_index == 0) {\n   |            ^                           ^\n   |\nhelp: remove these parentheses\n   |\n51 -         if (grades_sum_index_index == 0) {\n51 +         if grades_sum_index_index == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpoqqapkon.rs:54:12\n   |\n54 |         if (grades_min_index_index == 0) {\n   |            ^                           ^\n   |\nhelp: remove these parentheses\n   |\n54 -         if (grades_min_index_index == 0) {\n54 +       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_sum = 0.0;\n    let grades_sum_squared = 0.0;\n    let grades_sum_cubed = 0.0;\n    let grades_sum_cubed_squared = 0.0;\n    let grades_sum_cubed_cubed = 0.0;\n    let grades_sum_cubed_cubed_squared = 0.0;\n    for i in 0..grades_len {\n        grades_sum += grades[i];\n        grades_sum_squared += grades[i] * grades[i];\n        grades_sum_cubed += grades[i] * grades[i] * grades[i];\n        grades_sum_cubed_squared += grades[i] * grades[i] * grades[i] * grades[i];\n        grades_sum_cubed_cubed += grades[i] * grades[i] * grades[i] * grades[i] * grades[i];\n        grades_sum_cubed_cubed_squared += grades[i] * grades[i] * grades[i] * grades[i] * grades[i] * grades[i];\n    }\n    let grades_mean = grades_sum / grades_len;\n    let grades_variance = grades_sum_squared / grades_len - grades_mean * grades_mean;\n    let grades_standard_deviation = grades_variance ** (1.0 / 2.0);\n    let grades_standard_error = grades_standard_deviation / grades_len ** (1.0 / 3.0);\n    let grades_minimum = grades_mean - grades_standard_error;\n    let grades_maximum = grades_mean + grades_standard_error;\n    let grades_range = grades_maximum - grades_minimum;\n    let grades_median = grades_mean;\n    let grades_mode = grades_mean;\n    let grades_mode_count = 0;\n    let grades_mode_index = 0;\n    let grades_mode_value = 0.0;\n    let grades_mode_value_count = 0;\n    let grades_mode\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpc903hii2.rs:52:20\n   |\n52 |     let grades_mode\n   |                    ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpc903hii2.rs:39:34\n   |\n39 |     let grades_mean = grades_sum / grades_len;\n   |                                  ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpc903hii2.rs:40:46\n   |\n40 |     let grades_variance = grades_sum_squared / grades_len - grades_mean * grades_mean;\n   |                                              ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0614]: type `{float}` cannot be dereferenced\n  --> /tmp/tmpc903hii2.rs:41:54\n   |\n41 |     let grades_standard_deviation = grades_variance ** (1.0 / 2.0);\n   |                                                      ^^^^^^^^^^^^^\n\nerror[E0614]: type `{float}` cannot be dereferenced\n  --> /tmp/tmpc903hii2.rs:42:73\n   |\n42 |     let grades_standard_error = grades_standard_deviation / grades_len ** (1.0 / 3.0);\n   |                                                                         ^^^^^^^^^^^^^\n\nerror[E0308]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_grade = \"\";\n    let grade_table_grade_grade_index = 0;\n    let grade_table_grade_grade_value = 0.0;\n    let grade_table_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade_grade_grade_grade_letter = \"\";\n    let grade_table_grade_grade_grade_grade_grade = \"\";\n    let grade_table_grade_grade_grade_grade_grade_index = 0;\n    let grade_table_grade_grade_grade_grade_grade_value = 0.0;\n    let grade_table_grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpiv_hir0a.rs:62:26\n   |\n62 |     let grade_table_grade\n   |                          ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv_hir0a.rs:36:16\n   |\n36",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_map = {\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\"\n    };\n    let grades_vec = grades.map(|g| grades_map[g]);\n    return grades_vec;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected type, found `\"A+\"`\n  --> /tmp/tmp8v1fwodq.rs:25:14\n   |\n25 |         4.0: \"A+\",\n   |            - ^^^^ expected type\n   |            |\n   |            tried to parse a type due to this\n\nerror[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmp8v1fwodq.rs:38:29\n    |\n38  |       let grades_vec = grades.map(|g| grades_map[g]);\n    |                               ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[0];\n    let grade_table_value_index = 1;\n    let grade_table_value_value = grade_table_value[grade_table_value_index];\n    let grade_table_value_letter = grade_table_letter;\n    let grade_table_value_value_index = 2;\n    let grade_table_value_value_value = grade_table_value[grade_table_value_value_index];\n    let grade_table_value_value_letter = grade_table_value_letter;\n    let grade_table_value_value_value_index = 3;\n    let grade_table_value_value_value_value = grade_table_value[grade_table_value_value_value_index];\n    let grade_table_value_value_value_letter = grade_table_value_value_letter;\n    let grade_table_value_value_value_value_index = 4;\n    let grade_table_value_value_value_value_value = grade_table_value[grade_table_value_value_value_value_index];\n    let grade_table_value_value_value_value_letter = grade_table_value_value_value_letter;\n    let grade_table_value_value_value_value_value_index = 5;\n    let grade_table_value_value_value_value\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpfyzugumi.rs:56:44\n   |\n56 |     let grade_table_value_value_value_value\n   |                                            ^ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyzugumi.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grades_len = grades.len();\n    let grades_array = grades.to_a();\n    let grades_array_len = grades_array.len();\n    let grades_array_len_minus_1 = grades_array_len - 1;\n    let grades_array_len_minus_2 = grades_array_len - 2;\n    let grades_array_len_minus_3 = grades_array_len - 3;\n    let grades_array_len_minus_4 = grades_array_len - 4;\n    let grades_array_len_minus_5 = grades_array_len - 5;\n    let grades_array_len_minus_6 = grades_array_len - 6;\n    let grades_array_len_minus_7 = grades_array_len - 7;\n    let grades_array_len_minus_8 = grades_array_len - 8;\n    let grades_array_len_minus_9 = grades_array_len - 9;\n    let grades_array_len_minus_10 = grades_array_len - 10;\n    let grades_array_len_minus_11 = grades_array_len - 11;\n    let grades_array_len_minus_12 = grades_array_len - 12;\n    let grades_array_len_minus_13 = grades_array_len - 13;\n    let grades_array_len_minus_14 = grades_array_len - 14;\n    let grades_array_len_minus_15 = grades_array_len - 15;\n    let grades_array_len_minus_16 = grades_array_len - 16;\n    let grades_array_len_minus_17 = grades_array_len - 17;\n    let grades_array_len_minus_18 = grades_array_len - 18;\n    let grades_array_len_minus_19 = grades_array_len - 19;\n    let grades_array_len_minus_20 = grades_array_len - 20;\n    let grades_array_len_minus_21 = grades_array_len - 21;\n    let grades_array_len_minus_22 = grades_array_len - 22;\n    let grades_array_len_minus_23\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpdcumisa_.rs:49:34\n   |\n49 |     let grades_array_len_minus_23\n   |                                  ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0599]: no method named `to_a` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmpdcumisa_.rs:25:31\n   |\n25 |     let grades_array = grades.to_a();\n   |                               ^^^^ method not found in `Vec<f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdcumisa_.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index];\n    let grade_table_letter = grade_table_value[1];\n    let grade_table_gpa = grade_table_value[0];\n    let grade_table_index_next = grade_table_index + 1;\n    let grade_table_value_next = grade_table[grade_table_index_next];\n    let grade_table_letter_next = grade_table_value_next[1];\n    let grade_table_gpa_next = grade_table_value_next[0];\n    let grade_table_index_prev = grade_table_index - 1;\n    let grade_table_value_prev = grade_table[grade_table_index_prev];\n    let grade_table_letter_prev = grade_table_value_prev[1];\n    let grade_table_gpa_prev = grade_table_value_prev[0];\n    let grade_table_index_prev_prev = grade_table_index_prev - 1;\n    let grade_table_value_prev_prev = grade_table[grade_table_index_prev_prev];\n    let grade_table_letter_prev_prev = grade_table_value_prev_prev[1];\n    let grade_table_gpa_prev_prev = grade_table_value_prev_prev[0];\n    let grade_table_index_next_next = grade_table_index_next + 1;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmps6oex_75.rs:58:1\n   |\n58 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6oex_75.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_grade_index = 0;\n    let grade_table_grade_value = 0.0;\n    let grade_table_grade_letter = \"\";\n    let grade_table_grade_letter_index = 0;\n    let grade_table_grade_letter_value = 0.0;\n    let grade_table_grade_letter_letter = \"\";\n    let grade_table_grade_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_letter_value = 0.0;\n    let grade_table_grade_letter_letter_letter_letter_letter = \"\";\n    let grade_table_grade_letter_letter_letter_letter_letter_index = 0;\n    let grade_table_grade_letter_letter_letter_letter_letter_value = 0.0;\n    let\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpz9_ouuyp.rs:62:1\n   |\n62 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9_ouuyp.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let letter_grades = vec![grade_equation(gpa) for gpa in grades]\n    return letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpp9qqq_70.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_equation = fn (gpa: f64) -> String {\n        if gpa >= 4.0 {\n            return \"A+\"\n        } else if gpa >= 3.7 {\n            return \"A\"\n        } else if gpa >= 3.3 {\n            return \"A-\"\n        } else if gpa >= 3.0 {\n            return \"B+\"\n        } else if gpa >= 2.7 {\n            return \"B\"\n        } else if gpa >= 2.3 {\n            return \"B-\"\n        } else if gpa >= 2.0 {\n            return \"C+\"\n        } else if gpa >= 1.7 {\n            return \"C\"\n        } else if gpa >= 1.3 {\n            return \"C-\"\n        } else if gpa >= 1.0 {\n            return \"D+\"\n        } else if gpa >= 0.7 {\n            return \"D\"\n        } else if gpa >= 0.0 {\n            return \"D-\"\n        } else {\n            return \"E\"\n        }\n    }\n    let grade_vector = grades.map(grade_equation)\n    return grade_vector\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error: expected expression, found keyword `fn`\n  --> /tmp/tmpy4xck5y1.rs:24:26\n   |\n24 |     let grade_equation = fn (gpa: f64) -> String {\n   |                          ^^ expected expression\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = grade_table[grade_table_index][1];\n    let grade_table_letter = grade_table[grade_table_index][0];\n    let grade_table_next_index = grade_table_index + 1;\n    let grade_table_next_value = grade_table[grade_table_next_index][1];\n    let grade_table_next_letter = grade_table[grade_table_next_index][0];\n    let grade_table_previous_index = grade_table_index - 1;\n    let grade_table_previous_value = grade_table[grade_table_previous_index][1];\n    let grade_table_previous_letter = grade_table[grade_table_previous_index][0];\n    let grade_table_previous_next_index = grade_table_previous_index + 1;\n    let grade_table_previous_next_value = grade_table[grade_table_previous_next_index][1];\n    let grade_table_previous_next_letter = grade_table[grade_table_previous_next_index][0];\n    let grade_table_next_previous_index = grade_table_index - 2;\n    let grade_table_next_previous_value = grade_table[grade_table_next_previous_index][1];\n    let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292852,
      "stdout": "",
      "stderr": "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpcrcx4sxj.rs:55:1\n   |\n55 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpcrcx4sxj.rs:54:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |                                                            - closing delimiter possibly meant for this\n...\n54 |     let grade_table_next_previous_letter = grade_table[grade_table_next_previous\n   |                                                       ^ unclosed delimiter\n55 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcrcx4sxj.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you a vector of GPAs for some students and you have to write \n/// a function that can output a vector of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n    let grade_table = [\n        [\"A+\", 4.0],\n        [\"A\", 3.7],\n        [\"A-\", 3.3],\n        [\"B+\", 3.0],\n        [\"B\", 2.7],\n        [\"B-\", 2.3],\n        [\"C+\", 2.0],\n        [\"C\", 1.7],\n        [\"C-\", 1.3],\n        [\"D+\", 1.0],\n        [\"D\", 0.7],\n        [\"D-\", 0.0],\n        [\"E\", 0.0]\n    ];\n    let grade_table_length = grade_table.length;\n    let grade_table_index = 0;\n    let grade_table_value = 0.0;\n    let grade_table_letter = \"\";\n    let grade_table_grade = \"\";\n    let grade_table_index_increment = 1;\n    let grade_table_value_increment = 0.1;\n    let grade_table_letter_increment = \"A\";\n    let grade_table_grade_increment = \"A\";\n    let grade_table_index_decrement = 0;\n    let grade_table_value_decrement = 0.0;\n    let grade_table_letter_decrement = \"A\";\n    let grade_table_grade_decrement = \"A\";\n    let grade_table_index_decrement_increment = 0;\n    let grade_table_value_decrement_increment = 0.1;\n    let grade_table_letter_decrement_increment = \"A\";\n    let grade_table_grade_decrement_increment = \"A\";\n    let grade_table_index_increment_decrement = 0;\n    let grade_table_value_increment_decrement = 0.1;\n    let grade_table_letter_increment_decrement = \"A\";\n    let grade_table_grade_increment_decrement = \"A\";\n    let grade_table_index_decrement_decrement = 0;\n    let grade_table_value_decrement_decrement = 0.1;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n",
      "timestamp": 1664292853,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:25:16\n   |\n25 |         [\"A+\", 4.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:26:15\n   |\n26 |         [\"A\", 3.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:27:16\n   |\n27 |         [\"A-\", 3.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:28:16\n   |\n28 |         [\"B+\", 3.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:29:15\n   |\n29 |         [\"B\", 2.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:30:16\n   |\n30 |         [\"B-\", 2.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:31:16\n   |\n31 |         [\"C+\", 2.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:32:15\n   |\n32 |         [\"C\", 1.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:33:16\n   |\n33 |         [\"C-\", 1.3],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:34:16\n   |\n34 |         [\"D+\", 1.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:35:15\n   |\n35 |         [\"D\", 0.7],\n   |               ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:36:16\n   |\n36 |         [\"D-\", 0.0],\n   |                ^^^ expected `&str`, found floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsk6qcej9.rs:37:15\n   |\n37 |         [\"E\", 0",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}