{
  "name": "HumanEval_86_anti_shuffle",
  "language": "rs",
  "prompt": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n",
  "tests": "}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let mut new_s = String::from(\"\");\n  let mut word = String::from(\"\");\n  let mut new_word = String::from(\"\");\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut l = 0;\n  let mut m = 0;\n  let mut n = 0;\n  let mut o = 0;\n  let mut p = 0;\n  let mut q = 0;\n  let mut r = 0;\n  let mut s = 0;\n  let mut t = 0;\n  let mut u = 0;\n  let mut v = 0;\n  let mut w = 0;\n  let mut x = 0;\n  let mut y = 0;\n  let mut z = 0;\n  let mut blank = 0;\n  let mut space = 0;\n  let mut new_space = 0;\n  let mut new_blank = 0;\n  let mut new_word_length = 0;\n  let mut new_word_length_2 = 0;\n  let mut new_word_length_3 = 0;\n  let mut new_word_length_4 = 0;\n  let mut new_word_length_5 = 0;\n  let mut new_word_length_6 = 0;\n  let mut new_word_length_7 = 0;\n  let mut new_word_length_8 = 0;\n  let mut new_word_length_9 = 0;\n  let mut new_word_length_10 = 0;\n  let mut new_word_length_11 = 0;\n  let mut new_word_length_12 = 0;\n  let mut new_word_length_13 = 0;\n  let mut new_word_length_14 = 0;\n  let mut new_word_length_15 = 0;\n  let mut new_word_length_16 = 0;\n  let mut new_word_length_17 = 0;\n  let mut new_word_length_18 = 0;\n  let mut new_word_length_19 = 0;\n  let mut new_word_length_20 = 0;\n  let mut new_word_length_21 = 0;\n  let mut\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found `}`\n  --> /tmp/tmplf90_9ry.rs:61:1\n   |\n61 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmp85mdm4k0.rs:19:24\n   |\n19 |         let new_word = String.from(sorted_chars);\n   |                        ^^^^^^-----\n   |                        |\n   |                        help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp85mdm4k0.rs:22:12\n   |\n22 |     return String.from(new_words);\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp85mdm4k0.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort();\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp85mdm4k0.rs:20:19\n   |\n20 |         new_words.push(new_word);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let word of words) {\n        let chars_of_word = word.chars().to_a();\n        chars.push(chars_of_word.sort());\n    }\n    let new_string = \"\";\n    for (let char of chars) {\n        new_string += char;\n    }\n    return new_string;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp8tu2sefg.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp8tu2sefg.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp8tu2sefg.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp8tu2sefg.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp8tu2sefg.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmp8tu2sefg.rs:20:5\n   |\n20 |     let new_string = \"\";\n   |     ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |     { let new_string = \"\"; }\n   |     +                      +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let char of chars) {\n            new_chars.push(char.ascii());\n        }\n        new_words.push(String::from(new_chars));\n    }\n    return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9sscsuul.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp9sscsuul.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp9sscsuul.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp9sscsuul.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9sscsuul.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp9sscsuul.rs:19:14\n   |\n19 |         for (let char of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `char`\n  --> /tmp/tmp9sscsuul.rs:19:18\n   |\n19 |         for (let char of chars) {\n   |                 -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp9sscsuul.rs:19:23\n   |\n19 |         for (let char of chars) {\n   |                      -^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmp9sscsuul.rs:19:26\n   |\n19 |         for (let char of chars) {\n   |                         -^^^^^ expected one of `)`, `,`, `@`, or `|`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp7pq956ey.rs:16:15\n   |\n16 |     for (word of words) {\n   |              -^^ expected one of `)`, `,`, `@`, or `|`\n   |              |\n   |              help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp7pq956ey.rs:16:18\n   |\n16 |     for (word of words) {\n   |                 -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp7pq956ey.rs:16:24\n   |\n16 |     for (word of words) {\n   |                        ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp7pq956ey.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let chars = []\n  for word in words {\n    for c in word {\n      chars.push(c)\n    }\n  }\n  let result = \"\"\n  for c in chars {\n    result += c\n  }\n  return result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7jv9ptei.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let chars = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7jv9ptei.rs:15:17\n   |\n15 |   let chars = []\n   |                 ^ help: add `;` here\n16 |   for word in words {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7jv9ptei.rs:21:18\n   |\n21 |   let result = \"\"\n   |                  ^ help: add `;` here\n22 |   for c in chars {\n   |   --- unexpected token\n\nerror[E0277]: `&str` is not an iterator\n  --> /tmp/tmp7jv9ptei.rs:17:14\n   |\n17 |     for c in word {\n   |              ^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp7jv9ptei.rs:18:13\n   |\n18 |       chars.push(c)\n   |             ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp7jv9ptei.rs:23:5\n   |\n23 |     result += c\n   |     ------^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jv9ptei.rs:25:10\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n25 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for word in words {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmprn8pwdl_.rs:18:28\n   |\n18 |         let sorted = chars.sort();\n   |                            ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprn8pwdl_.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut words = s.split(\" \");\n    let mut new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = chars.sort();\n        let new_word = String::from(new_chars);\n        new_words.push(new_word);\n    }\n    return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpi60wmgwv.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpi60wmgwv.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpi60wmgwv.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpi60wmgwv.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpi60wmgwv.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpi60wmgwv.rs:22:5\n   |\n22 |     return String::from(new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { return String::from(new_words); }\n   |     +                                 +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let char of chars) {\n            new_chars.push(char);\n        }\n        new_words.push(String.from(new_chars));\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmps69h1mw6.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmps69h1mw6.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmps69h1mw6.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmps69h1mw6.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmps69h1mw6.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmps69h1mw6.rs:19:14\n   |\n19 |         for (let char of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `char`\n  --> /tmp/tmps69h1mw6.rs:19:18\n   |\n19 |         for (let char of chars) {\n   |                 -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmps69h1mw6.rs:19:23\n   |\n19 |         for (let char of chars) {\n   |                      -^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmps69h1mw6.rs:19:26\n   |\n19 |         for (let char of chars) {\n   |                         -^^^^^ expected one of `)`, `,`, `@`, or `|`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let chars = word.chars();\n        let new_chars = [];\n        for i in 0..chars.len() {\n            let c = chars[i];\n            new_chars.append(c);\n        }\n        new_words.append(String::from(new_chars));\n    }\n    return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n  --> /tmp/tmpm5vulwmh.rs:19:27\n   |\n19 |         for i in 0..chars.len() {\n   |                           ^^^ method not found in `Chars<'_>`\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpm5vulwmh.rs:20:21\n   |\n20 |             let c = chars[i];\n   |                     ^^^^^^^^\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpm5vulwmh.rs:21:23\n   |\n21 |             new_chars.append(c);\n   |                       ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpm5vulwmh.rs:23:19\n   |\n23 |         new_words.append(String::from(new_chars));\n   |                   ^^^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the trait bound `String: From<[_; 0]>` is not satisfied\n  --> /tmp/tmpm5vulwmh.rs:23:26\n   |\n23 |         new_words.append(String::from(new_chars));\n   |                          ^^^^^^^^^^^^ the trait `From<[_; 0]>` is not implemented for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <String as From<&String>>\n             <String as From<&mut str>>\n             <String as From<&str>>\n             <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\nerror[E0277]: the trait bound `String: From<[_; 0]>` is not satisfied\n  --> /tmp/tmpm5vulwmh.rs:25:12\n   |\n25 |     return String::from(new_words);\n   |            ^^^^^^^^^^^^ the trait `From<[_; 0]>` is not implemented for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <String as From<&String>>\n             <String as From<&mut str>>\n             <String as From<&str>>\n             <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E027",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let chars = []\n  let result = \"\"\n  for w in words {\n    let chars_of_word = w.chars()\n    let sorted_chars = chars_of_word.sort()\n    result += sorted_chars.join(\"\")\n  }\n  return result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnuc_bvro.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let chars = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnuc_bvro.rs:15:17\n   |\n15 |   let chars = []\n   |                 ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnuc_bvro.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for w in words {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnuc_bvro.rs:18:34\n   |\n18 |     let chars_of_word = w.chars()\n   |                                  ^ help: add `;` here\n19 |     let sorted_chars = chars_of_word.sort()\n   |     --- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmpnuc_bvro.rs:19:44\n   |\n19 |     let sorted_chars = chars_of_word.sort()\n   |                                            ^ help: add `;` here\n20 |     result += sorted_chars.join(\"\")\n   |     ------ unexpected token\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpnuc_bvro.rs:19:38\n   |\n19 |     let sorted_chars = chars_of_word.sort()\n   |                                      ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnuc_bvro.rs:22:10\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n22 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for word in words {\n        for c in word {\n            chars.push(c);\n        }\n    }\n    let new_chars = [];\n    for c in chars {\n        new_chars.push(c);\n    }\n    let new_string = \"\";\n    for c in new_chars {\n        new_string += c;\n    }\n    return new_string;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0277]: `&str` is not an iterator\n  --> /tmp/tmpesnt6bo8.rs:17:18\n   |\n17 |         for c in word {\n   |                  ^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpesnt6bo8.rs:18:19\n   |\n18 |             chars.push(c);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpesnt6bo8.rs:23:19\n   |\n23 |         new_chars.push(c);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpesnt6bo8.rs:27:9\n   |\n27 |         new_string += c;\n   |         ----------^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpesnt6bo8.rs:29:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n29 |     return new_string;\n   |            ^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for i in words {\n        let chars = i.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp5f03ui7h.rs:18:28\n   |\n18 |         let sorted = chars.sort();\n   |                            ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5f03ui7h.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let c of chars) {\n            new_chars.push(c);\n        }\n        new_words.push(String::from(new_chars));\n    }\n    return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpoqsbjubs.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpoqsbjubs.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpoqsbjubs.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpoqsbjubs.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpoqsbjubs.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpoqsbjubs.rs:19:14\n   |\n19 |         for (let c of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpoqsbjubs.rs:19:18\n   |\n19 |         for (let c of chars) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpoqsbjubs.rs:19:20\n   |\n19 |         for (let c of chars) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmpoqsbjubs.rs:19:23\n   |\n19 |         for (let c of chars) {\n   |                      -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let new_word = \"\";\n        for c in word {\n            new_word += c;\n        }\n        new_words.push(new_word);\n    }\n    let new_string = \"\";\n    for word in new_words {\n        new_string += word;\n    }\n    return new_string;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0277]: `&str` is not an iterator\n  --> /tmp/tmphfdocm4b.rs:18:18\n   |\n18 |         for c in word {\n   |                  ^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmphfdocm4b.rs:19:13\n   |\n19 |             new_word += c;\n   |             --------^^^^^\n   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmphfdocm4b.rs:21:19\n   |\n21 |         new_words.push(new_word);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmphfdocm4b.rs:25:9\n   |\n25 |         new_string += word;\n   |         ----------^^^^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphfdocm4b.rs:27:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n27 |     return new_string;\n   |            ^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let c of chars) {\n            new_chars.push(c);\n        }\n        new_words.push(String.from(new_chars));\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4r36pv55.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp4r36pv55.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp4r36pv55.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp4r36pv55.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4r36pv55.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp4r36pv55.rs:19:14\n   |\n19 |         for (let c of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp4r36pv55.rs:19:18\n   |\n19 |         for (let c of chars) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp4r36pv55.rs:19:20\n   |\n19 |         for (let c of chars) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmp4r36pv55.rs:19:23\n   |\n19 |         for (let c of chars) {\n   |                      -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let mut words = s.split(\" \");\n  let mut new_words = [];\n  for (let word of words) {\n    let mut new_word = [];\n    for (let ch of word) {\n      new_word.push(ch.ascii_lower());\n    }\n    new_words.push(new_word.join(\"\"));\n  }\n  return new_words.join(\" \");\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpphlnfx3t.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpphlnfx3t.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpphlnfx3t.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpphlnfx3t.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpphlnfx3t.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpphlnfx3t.rs:18:10\n   |\n18 |     for (let ch of word) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `ch`\n  --> /tmp/tmpphlnfx3t.rs:18:14\n   |\n18 |     for (let ch of word) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpphlnfx3t.rs:18:17\n   |\n18 |     for (let ch of word) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpphlnfx3t.rs:18:20\n   |\n18 |     for (let ch of word) {\n   |                   -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  -->",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpvflwnl3m.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpvflwnl3m.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpvflwnl3m.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpvflwnl3m.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpvflwnl3m.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpvflwnl3m.rs:22:5\n   |\n22 |     return String.from(new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { return String.from(new_words); }\n   |     +                                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = s.chars();\n    let result = \"\";\n    for (let i = 0; i < chars.length; i++) {\n        let c = chars[i];\n        let index = chars.indexOf(c);\n        let next = index + 1;\n        if (next < chars.length) {\n            let next_c = chars[next];\n            if (c > next_c) {\n                result += c;\n            } else {\n                result += next_c;\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpf58r2gq2.rs:17:10\n   |\n17 |     for (let i = 0; i < chars.length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpf58r2gq2.rs:17:14\n   |\n17 |     for (let i = 0; i < chars.length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpf58r2gq2.rs:17:16\n   |\n17 |     for (let i = 0; i < chars.length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpf58r2gq2.rs:17:15\n   |\n17 |     for (let i = 0; i < chars.length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpf58r2gq2.rs:17:16\n   |\n17 |     for (let i = 0; i < chars.length; i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted_chars = chars.sort();\n    result += sorted_chars.join(\"\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp91nx6tnf.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp91nx6tnf.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp91nx6tnf.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp91nx6tnf.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp91nx6tnf.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp91nx6tnf.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let result = \"\"\n    for word in words {\n        let chars = word.chars()\n        let sorted_chars = chars.sort()\n        result += String.from(sorted_chars)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_wxkbz6y.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let result = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_wxkbz6y.rs:15:20\n   |\n15 |     let result = \"\"\n   |                    ^ help: add `;` here\n16 |     for word in words {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_wxkbz6y.rs:17:33\n   |\n17 |         let chars = word.chars()\n   |                                 ^ help: add `;` here\n18 |         let sorted_chars = chars.sort()\n   |         --- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmp_wxkbz6y.rs:18:40\n   |\n18 |         let sorted_chars = chars.sort()\n   |                                        ^ help: add `;` here\n19 |         result += String.from(sorted_chars)\n   |         ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp_wxkbz6y.rs:19:19\n   |\n19 |         result += String.from(sorted_chars)\n   |                   ^^^^^^-----\n   |                   |\n   |                   help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp_wxkbz6y.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort()\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_wxkbz6y.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmp85mdm4k0.rs:19:24\n   |\n19 |         let new_word = String.from(sorted_chars);\n   |                        ^^^^^^-----\n   |                        |\n   |                        help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp85mdm4k0.rs:22:12\n   |\n22 |     return String.from(new_words);\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp85mdm4k0.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort();\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp85mdm4k0.rs:20:19\n   |\n20 |         new_words.push(new_word);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = \"\";\n        for c in sorted_chars {\n            new_word += c;\n        }\n        new_words.push(new_word);\n    }\n    return String::from(new_words.join(\" \"));\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpwe6ufvbe.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort();\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwe6ufvbe.rs:21:13\n   |\n21 |             new_word += c;\n   |             --------^^^^^\n   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpwe6ufvbe.rs:23:19\n   |\n23 |         new_words.push(new_word);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0368, E0599.\nFor more information about an error, try `rustc --explain E0368`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += String.from(sorted_chars);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwgv8byx8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwgv8byx8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwgv8byx8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwgv8byx8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwgv8byx8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwgv8byx8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpvflwnl3m.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpvflwnl3m.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpvflwnl3m.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpvflwnl3m.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpvflwnl3m.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpvflwnl3m.rs:22:5\n   |\n22 |     return String.from(new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { return String.from(new_words); }\n   |     +                                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl11qhz8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl11qhz8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl11qhz8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl11qhz8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl11qhz8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwl11qhz8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for i in words {\n        let chars_of_word = [];\n        for j in i {\n            chars_of_word.push(j);\n        }\n        chars.push(chars_of_word);\n    }\n    let result = \"\";\n    for i in chars {\n        for j in i {\n            result += j;\n        }\n        result += \" \";\n    }\n    return result.trim();\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0277]: `&str` is not an iterator\n  --> /tmp/tmpt92fxpyo.rs:18:18\n   |\n18 |         for j in i {\n   |                  ^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpt92fxpyo.rs:19:27\n   |\n19 |             chars_of_word.push(j);\n   |                           ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpt92fxpyo.rs:21:15\n   |\n21 |         chars.push(chars_of_word);\n   |               ^^^^ method not found in `[_; 0]`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpt92fxpyo.rs:26:13\n   |\n26 |             result += j;\n   |             ------^^^^^\n   |             |\n   |             cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpt92fxpyo.rs:28:9\n   |\n28 |         result += \" \";\n   |         ------^^^^^^^\n   |         |\n   |         cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt92fxpyo.rs:30:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n30 |     return result.trim();\n   |            ^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let chars = []\n    for w in words {\n        let chars_of_w = w.chars()\n        chars.append(chars_of_w.sort())\n    }\n    let new_s = String.from(chars)\n    return new_s\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcnydayjy.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let chars = []\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcnydayjy.rs:15:19\n   |\n15 |     let chars = []\n   |                   ^ help: add `;` here\n16 |     for w in words {\n   |     --- unexpected token\n\nerror: expected `;`, found `chars`\n  --> /tmp/tmpcnydayjy.rs:17:35\n   |\n17 |         let chars_of_w = w.chars()\n   |                                   ^ help: add `;` here\n18 |         chars.append(chars_of_w.sort())\n   |         ----- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpcnydayjy.rs:20:35\n   |\n20 |     let new_s = String.from(chars)\n   |                                   ^ help: add `;` here\n21 |     return new_s\n   |     ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpcnydayjy.rs:20:17\n   |\n20 |     let new_s = String.from(chars)\n   |                 ^^^^^^-----\n   |                 |\n   |                 help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpcnydayjy.rs:18:15\n   |\n18 |         chars.append(chars_of_w.sort())\n   |               ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpcnydayjy.rs:18:33\n   |\n18 |         chars.append(chars_of_w.sort())\n   |                                 ^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let c of chars) {\n            new_chars.push(c);\n        }\n        new_words.push(String::from(new_chars));\n    }\n    return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpoqsbjubs.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpoqsbjubs.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpoqsbjubs.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpoqsbjubs.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpoqsbjubs.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpoqsbjubs.rs:19:14\n   |\n19 |         for (let c of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpoqsbjubs.rs:19:18\n   |\n19 |         for (let c of chars) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpoqsbjubs.rs:19:20\n   |\n19 |         for (let c of chars) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmpoqsbjubs.rs:19:23\n   |\n19 |         for (let c of chars) {\n   |                      -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for i in words {\n        let chars = i.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp5f03ui7h.rs:18:28\n   |\n18 |         let sorted = chars.sort();\n   |                            ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5f03ui7h.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut new_s = String::from(\"\");\n    let mut word = String::from(\"\");\n    let mut new_word = String::from(\"\");\n    let mut new_chars = String::from(\"\");\n    let mut new_chars_len = 0;\n    let mut new_chars_pos = 0;\n    let mut new_chars_pos_prev = 0;\n    let mut new_chars_pos_next = 0;\n    let mut new_chars_pos_next_prev = 0;\n    let mut new_chars_pos_next_next = 0;\n    let mut new_chars_pos_next_next_prev = 0;\n    let mut new_chars_pos_next_next_next = 0;\n    let mut new_chars_pos_next_next_next_prev = 0;\n    let mut new_chars_pos_next_next_next_next = 0;\n    let mut new_chars_pos_next_next_next_next_prev = 0;\n    let mut new_chars_pos_next_next_next_next_next = 0;\n    let mut new_chars_pos_next_next_next_next_next_prev = 0;\n    let mut new_chars_pos_next_next_next_next_next_next = 0;\n    let mut new_chars_pos_next_next_next_next_next_next_prev = 0;\n    let mut new_chars_pos_next_next_next_next_next_next_next = 0;\n    let mut new_chars_pos_next_next_next_next_next_next_next_prev = 0;\n    let mut new_chars_pos_next_next_next_next_next_next_next_next = 0;\n    let mut new_chars_pos_next_next_next_next_next_next_next_next_prev = 0;\n    let mut new_chars_pos_next_next_next_next_next_next_next_next_next = 0;\n    let mut new_chars_pos_next_next_next_next_next_next\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpl74qv8mf.rs:38:56\n   |\n38 |     let mut new_chars_pos_next_next_next_next_next_next\n   |                                                        ^ help: add `;` here\n39 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl74qv8mf.rs:13:31\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |    ------------               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = \"\";\n        for (let char of sorted_chars) {\n            new_word += char;\n        }\n        new_words.push(new_word);\n    }\n    return String.from(new_words.join(\" \"));\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl4y5d6k.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl4y5d6k.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl4y5d6k.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl4y5d6k.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl4y5d6k.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpwl4y5d6k.rs:20:14\n   |\n20 |         for (let char of sorted_chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `char`\n  --> /tmp/tmpwl4y5d6k.rs:20:18\n   |\n20 |         for (let char of sorted_chars) {\n   |                 -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl4y5d6k.rs:20:23\n   |\n20 |         for (let char of sorted_chars) {\n   |                      -^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `sorted_chars`\n  --> /tmp/tmpwl4y5d6k.rs:20:26\n   |\n20 |         for (let char of sorted_chars) {\n   |                         -^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let char of chars) {\n            new_chars.push(char.ascii());\n        }\n        new_words.push(String::from(new_chars));\n    }\n    return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9sscsuul.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp9sscsuul.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp9sscsuul.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp9sscsuul.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9sscsuul.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp9sscsuul.rs:19:14\n   |\n19 |         for (let char of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `char`\n  --> /tmp/tmp9sscsuul.rs:19:18\n   |\n19 |         for (let char of chars) {\n   |                 -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp9sscsuul.rs:19:23\n   |\n19 |         for (let char of chars) {\n   |                      -^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmp9sscsuul.rs:19:26\n   |\n19 |         for (let char of chars) {\n   |                         -^^^^^ expected one of `)`, `,`, `@`, or `|`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted = chars.sort();\n    result += sorted.join(\"\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpqq59rysw.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpqq59rysw.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpqq59rysw.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpqq59rysw.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpqq59rysw.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpqq59rysw.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted = chars.sort();\n    result += sorted.join(\"\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpqq59rysw.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpqq59rysw.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpqq59rysw.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpqq59rysw.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpqq59rysw.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpqq59rysw.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl11qhz8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl11qhz8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl11qhz8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl11qhz8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl11qhz8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwl11qhz8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let new_words = [];\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted_chars = chars.sort();\n    let new_word = String.from(sorted_chars);\n    new_words.push(new_word);\n  }\n  let new_string = String.join(\" \", new_words);\n  return new_string;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbhcaexmc.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpbhcaexmc.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpbhcaexmc.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpbhcaexmc.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbhcaexmc.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmpbhcaexmc.rs:22:3\n   |\n22 |   let new_string = String.join(\" \", new_words);\n   |   ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |   { let new_string = String.join(\" \", new_words); }\n   |   +                                               +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let w of words) {\n        let chars = w.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp3h_pn_j8.rs:16:10\n   |\n16 |     for (let w of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmp3h_pn_j8.rs:16:14\n   |\n16 |     for (let w of words) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp3h_pn_j8.rs:16:16\n   |\n16 |     for (let w of words) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp3h_pn_j8.rs:16:19\n   |\n16 |     for (let w of words) {\n   |                  -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp3h_pn_j8.rs:16:25\n   |\n16 |     for (let w of words) {\n   |                         ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp3h_pn_j8.rs:22:5\n   |\n22 |     return String.from(new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { return String.from(new_words); }\n   |     +                                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let w of words) {\n        let chars = w.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.join(\" \", new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpiu7jwyyt.rs:16:10\n   |\n16 |     for (let w of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmpiu7jwyyt.rs:16:14\n   |\n16 |     for (let w of words) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpiu7jwyyt.rs:16:16\n   |\n16 |     for (let w of words) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpiu7jwyyt.rs:16:19\n   |\n16 |     for (let w of words) {\n   |                  -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpiu7jwyyt.rs:16:25\n   |\n16 |     for (let w of words) {\n   |                         ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpiu7jwyyt.rs:22:5\n   |\n22 |     return String.join(\" \", new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { return String.join(\" \", new_words); }\n   |     +                                     +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut new_s = String::from(\"\");\n    let mut c = String::from(\"\");\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut blank = 0;\n    let mut space = 0;\n    let mut word = 0;\n    let mut new_word = 0;\n    let mut new_word_length = 0;\n    let mut new_word_index = 0;\n    let mut new_word_index_2 = 0;\n    let mut new_word_index_3 = 0;\n    let mut new_word_index_4 = 0;\n    let mut new_word_index_5 = 0;\n    let mut new_word_index_6 = 0;\n    let mut new_word_index_7 = 0;\n    let mut new_word_index_8 = 0;\n    let mut new_word_index_9 = 0;\n    let mut new_word_index_10 = 0;\n    let mut new_word_index_11 = 0;\n    let mut new_word_index_12 = 0;\n    let mut new_word_index_13 = 0;\n    let mut new_word_index_14 = 0;\n    let mut new_word_index_15 = 0;\n    let mut new_word_index_16 = 0;\n    let mut new_word_index_17 = 0;\n    let mut new_word_index_18 = 0;\n    let mut new_word_index_19 = 0;\n    let mut new_word_index_20 = 0;\n    let mut new_word_index_21 = 0;\n    let mut new_word\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpsjdzr1zs.rs:60:21\n   |\n60 |     let mut new_word\n   |                     ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsjdzr1zs.rs:13:31\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |    ------------               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let new_words = []\n  for word in words {\n    let chars = word.chars()\n    let new_chars = []\n    for i in 0..len(chars) {\n      let c = chars[i]\n      new_chars.append(c)\n      if i < len(chars) - 1 {\n        let next_c = chars[i + 1]\n        if c > next_c {\n          new_chars.append(next_c)\n          i += 1\n        }\n      }\n    }\n    new_words.append(String.from(new_chars))\n  }\n  return String.from(new_words)\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmyhoheiu.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let new_words = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmyhoheiu.rs:15:21\n   |\n15 |   let new_words = []\n   |                     ^ help: add `;` here\n16 |   for word in words {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmyhoheiu.rs:17:29\n   |\n17 |     let chars = word.chars()\n   |                             ^ help: add `;` here\n18 |     let new_chars = []\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmyhoheiu.rs:18:23\n   |\n18 |     let new_chars = []\n   |                       ^ help: add `;` here\n19 |     for i in 0..len(chars) {\n   |     --- unexpected token\n\nerror: expected `;`, found `new_chars`\n  --> /tmp/tmpmyhoheiu.rs:20:23\n   |\n20 |       let c = chars[i]\n   |                       ^ help: add `;` here\n21 |       new_chars.append(c)\n   |       --------- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpmyhoheiu.rs:21:26\n   |\n21 |       new_chars.append(c)\n   |                          ^ help: add `;` here\n22 |       if i < len(chars) - 1 {\n   |       -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpmyhoheiu.rs:23:34\n   |\n23 |         let next_c = chars[i + 1]\n   |                                  ^ help: add `;` here\n24 |         if c > next_c {\n   |         -- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpmyhoheiu.rs:25:35\n   |\n25 |           new_chars.append(next_c)\n   |                                   ^ help: add `;` here\n26 |           i += 1\n   |           - unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmyhoheiu.rs:19:17\n   |\n19 |     for i in 0..len(chars) {\n   |                 ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmyhoheiu.rs:22:14\n   |\n22",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let chars = []\n    for w in words {\n        let chars_for_word = []\n        for c in w {\n            chars_for_word.push(c)\n        }\n        chars.push(chars_for_word)\n    }\n    let new_words = []\n    for i in range(0, len(chars)) {\n        let new_word = \"\"\n        for j in range(0, len(chars[i])):\n            new_word += chars[i][j]\n        new_words.push(new_word)\n    }\n    return String::from(\" \".join(new_words))\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmptqt6leip.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let chars = []\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptqt6leip.rs:15:19\n   |\n15 |     let chars = []\n   |                   ^ help: add `;` here\n16 |     for w in words {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptqt6leip.rs:17:32\n   |\n17 |         let chars_for_word = []\n   |                                ^ help: add `;` here\n18 |         for c in w {\n   |         --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptqt6leip.rs:23:23\n   |\n23 |     let new_words = []\n   |                       ^ help: add `;` here\n24 |     for i in range(0, len(chars)) {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptqt6leip.rs:25:26\n   |\n25 |         let new_word = \"\"\n   |                          ^ help: add `;` here\n26 |         for j in range(0, len(chars[i])):\n   |         --- unexpected token\n\nerror: expected `{`, found `new_words`\n  --> /tmp/tmptqt6leip.rs:28:9\n   |\n28 |         new_words.push(new_word)\n   |         ^^^^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n28 |         { new_words.push(new_word) }\n   |         +                          +\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmptqt6leip.rs:24:14\n   |\n24 |     for i in range(0, len(chars)) {\n   |              ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmptqt6leip.rs:24:23\n   |\n24 |     for i in range(0, len(chars)) {\n   |                       ^^^ not found in this scope\n\nerror[E0277]: `&str` is not an iterator\n  --> /tmp/tmptqt6leip.rs:18:18\n   |\n18 |         for c in w {\n   |                  ^ `&str` is not an iterator; try calling `.chars()` or `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl11qhz8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl11qhz8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl11qhz8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl11qhz8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl11qhz8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwl11qhz8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = chars.sort();\n        let new_word = String.from(new_chars);\n        new_words.push(new_word);\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpovrug0uu.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpovrug0uu.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpovrug0uu.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpovrug0uu.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpovrug0uu.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpovrug0uu.rs:22:5\n   |\n22 |     return String.from(new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { return String.from(new_words); }\n   |     +                                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl11qhz8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl11qhz8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl11qhz8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl11qhz8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl11qhz8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwl11qhz8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut r: String = String::from(\"\");\n    let mut c: String = String::from(\"\");\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n    let mut o: usize = 0;\n    let mut p: usize = 0;\n    let mut q: usize = 0;\n    let mut r: usize = 0;\n    let mut s: usize = 0;\n    let mut t: usize = 0;\n    let mut u: usize = 0;\n    let mut v: usize = 0;\n    let mut w: usize = 0;\n    let mut x: usize = 0;\n    let mut y: usize = 0;\n    let mut z: usize = 0;\n    let mut a: usize = 0;\n    let mut b: usize = 0;\n    let mut c: usize = 0;\n    let mut d: usize = 0;\n    let mut e: usize = 0;\n    let mut f: usize = 0;\n    let mut g: usize = 0;\n    let mut h: usize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n    let mut o: usize = 0;\n    let mut p: usize = 0;\n    let mut q: usize = 0;\n    let mut r: usize = 0;\n    let mut s: usize = 0;\n    let mut t: usize = 0;\n    let mut u: usize = 0;\n    let mut v: usize = 0;\n    let mut w: usize = 0;\n    let mut x: usize = 0;\n    let mut y: usize = 0;\n    let mut z: usize = 0;\n    let\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpoun30axq.rs:61:1\n   |\n61 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.join(\" \", new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpi1pnpxu6.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpi1pnpxu6.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpi1pnpxu6.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpi1pnpxu6.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpi1pnpxu6.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpi1pnpxu6.rs:22:5\n   |\n22 |     return String.join(\" \", new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { return String.join(\" \", new_words); }\n   |     +                                     +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let new_word = \"\";\n        for (let ch of word) {\n            new_word += ch.charCodeAt(0) - 96;\n        }\n        new_words.push(new_word);\n    }\n    return String::from(new_words.join(\" \"));\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp_2yr2c1d.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp_2yr2c1d.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp_2yr2c1d.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp_2yr2c1d.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp_2yr2c1d.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp_2yr2c1d.rs:18:14\n   |\n18 |         for (let ch of word) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `ch`\n  --> /tmp/tmp_2yr2c1d.rs:18:18\n   |\n18 |         for (let ch of word) {\n   |                 -^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp_2yr2c1d.rs:18:21\n   |\n18 |         for (let ch of word) {\n   |                    -^^ expected one of `)`, `,`, `@`, or `|`\n   |                    |\n   |                    help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp_2yr2c1d.rs:18:24\n   |\n18 |         for (let ch of word) {\n   |                       -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let chars = []\n  for word in words {\n    let chars_in_word = []\n    for char in word {\n      chars_in_word.push(char)\n    }\n    chars.push(chars_in_word.sort().join(\"\"))\n  }\n  return chars.join(\" \")\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp1r_x2xur.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let chars = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1r_x2xur.rs:15:17\n   |\n15 |   let chars = []\n   |                 ^ help: add `;` here\n16 |   for word in words {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp1r_x2xur.rs:17:27\n   |\n17 |     let chars_in_word = []\n   |                           ^ help: add `;` here\n18 |     for char in word {\n   |     --- unexpected token\n\nerror[E0277]: `&str` is not an iterator\n  --> /tmp/tmp1r_x2xur.rs:18:17\n   |\n18 |     for char in word {\n   |                 ^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1r_x2xur.rs:19:21\n   |\n19 |       chars_in_word.push(char)\n   |                     ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp1r_x2xur.rs:21:11\n   |\n21 |     chars.push(chars_in_word.sort().join(\"\"))\n   |           ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `join` found for unit type `()` in the current scope\n  --> /tmp/tmp1r_x2xur.rs:21:37\n   |\n21 |     chars.push(chars_in_word.sort().join(\"\"))\n   |                                     ^^^^ method not found in `()`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for word in words {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpvho_3z5b.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort();\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvho_3z5b.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let c of chars) {\n            new_chars.push(c);\n        }\n        new_words.push(String.from(new_chars));\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4r36pv55.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp4r36pv55.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp4r36pv55.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp4r36pv55.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4r36pv55.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp4r36pv55.rs:19:14\n   |\n19 |         for (let c of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp4r36pv55.rs:19:18\n   |\n19 |         for (let c of chars) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp4r36pv55.rs:19:20\n   |\n19 |         for (let c of chars) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmp4r36pv55.rs:19:23\n   |\n19 |         for (let c of chars) {\n   |                      -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl11qhz8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl11qhz8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl11qhz8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl11qhz8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl11qhz8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwl11qhz8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted = chars.sort();\n    result += sorted.join(\"\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpqq59rysw.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpqq59rysw.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpqq59rysw.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpqq59rysw.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpqq59rysw.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpqq59rysw.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut words = s.split(\" \");\n    let mut result = \"\";\n    for (let word of words) {\n        let mut chars = word.chars();\n        for (let i = 0; i < chars.len(); i++) {\n            let c = chars[i];\n            let next_c = chars[i + 1];\n            if (c > next_c) {\n                chars[i] = next_c;\n                chars[i + 1] = c;\n            }\n        }\n        result += String::from(chars);\n        result += \" \";\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxerzji63.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpxerzji63.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpxerzji63.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpxerzji63.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxerzji63.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpxerzji63.rs:18:14\n   |\n18 |         for (let i = 0; i < chars.len(); i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpxerzji63.rs:18:18\n   |\n18 |         for (let i = 0; i < chars.len(); i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpxerzji63.rs:18:20\n   |\n18 |         for (let i = 0; i < chars.len(); i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxerzji63.rs:18:19\n   |\n18 |         for (let i = 0; i < chars.len(); i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpxerzji63.rs:18:20\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted = chars.sort();\n    result += sorted.join(\"\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpqq59rysw.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpqq59rysw.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpqq59rysw.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpqq59rysw.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpqq59rysw.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpqq59rysw.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let word of words) {\n        let chars_of_word = word.chars();\n        chars.push(...chars_of_word);\n    }\n    let result = \"\";\n    for (let char of chars) {\n        result += char;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpk0p_7tee.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpk0p_7tee.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpk0p_7tee.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpk0p_7tee.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpk0p_7tee.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: unexpected token: `...`\n  --> /tmp/tmpk0p_7tee.rs:18:20\n   |\n18 |         chars.push(...chars_of_word);\n   |                    ^^^\n   |\nhelp: use `..` for an exclusive range\n   |\n18 |         chars.push(..chars_of_word);\n   |                    ~~\nhelp: or `..=` for an inclusive range\n   |\n18 |         chars.push(..=chars_of_word);\n   |                    ~~~\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmpk0p_7tee.rs:20:5\n   |\n20 |     let result = \"\";\n   |     ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |     { let result = \"\"; }\n   |     +                  +\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut r = String::from(\"\");\n    let mut c = String::from(\"\");\n    let mut w = String::from(\"\");\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpj70n65q8.rs:13:31\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |    ------------               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl11qhz8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl11qhz8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl11qhz8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl11qhz8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl11qhz8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwl11qhz8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let new_word = \"\";\n        for i in word.chars() {\n            new_word += String.fromCharCode(i.ascii() + 1);\n        }\n        new_words.push(new_word);\n    }\n    return String.join(\" \", new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmpj3f_1nm8.rs:19:25\n   |\n19 |             new_word += String.fromCharCode(i.ascii() + 1);\n   |                         ^^^^^^-------------\n   |                         |\n   |                         help: use the path separator to refer to an item: `String::fromCharCode`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpj3f_1nm8.rs:23:12\n   |\n23 |     return String.join(\" \", new_words);\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `ascii` found for type `char` in the current scope\n  --> /tmp/tmpj3f_1nm8.rs:19:47\n   |\n19 |             new_word += String.fromCharCode(i.ascii() + 1);\n   |                                               ^^^^^ help: there is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpj3f_1nm8.rs:21:19\n   |\n21 |         new_words.push(new_word);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let word of words) {\n        let chars_in_word = word.chars().to_a();\n        chars.push(chars_in_word.sort());\n    }\n    let new_string = \"\";\n    for (let i = 0; i < chars.length; i++) {\n        let char_list = chars[i];\n        for (let j = 0; j < char_list.length; j++) {\n            new_string += char_list[j];\n        }\n        if (i < chars.length - 1) {\n            new_string += \" \";\n        }\n    }\n    return new_string;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpe6eeusk9.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpe6eeusk9.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpe6eeusk9.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpe6eeusk9.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpe6eeusk9.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmpe6eeusk9.rs:20:5\n   |\n20 |     let new_string = \"\";\n   |     ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |     { let new_string = \"\"; }\n   |     +                      +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let chars = [];\n  for (let word of words) {\n    let chars_in_word = [];\n    for (let char of word) {\n      chars_in_word.push(char.charCodeAt(0));\n    }\n    chars.push(chars_in_word);\n  }\n  let new_chars = [];\n  for (let i = 0; i < chars.length; i++) {\n    let new_chars_in_word = [];\n    for (let j = 0; j < chars[i].length; j++) {\n      new_chars_in_word.push(chars[i][j]);\n    }\n    new_chars.push(new_chars_in_word);\n  }\n  let new_words = [];\n  for (let i = 0; i < new_chars.length; i++) {\n    let new_words_in_word = [];\n    for (let j = 0; j < new_chars[i].length; j++) {\n      new_words_in_word.push(new_chars[i][j]);\n    }\n    new_words.push(new_words_in_word);\n  }\n  return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpe8jb18jf.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpe8jb18jf.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpe8jb18jf.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpe8jb18jf.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpe8jb18jf.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpe8jb18jf.rs:18:10\n   |\n18 |     for (let char of word) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `char`\n  --> /tmp/tmpe8jb18jf.rs:18:14\n   |\n18 |     for (let char of word) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpe8jb18jf.rs:18:19\n   |\n18 |     for (let char of word) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpe8jb18jf.rs:18:22\n   |\n18 |     for (let char of word) {\n   |                     -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = \"\";\n    for (let word of words) {\n        let chars_of_word = word.chars().sort();\n        chars += chars_of_word;\n    }\n    return String::from(chars);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpr3ttl0z9.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpr3ttl0z9.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpr3ttl0z9.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpr3ttl0z9.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpr3ttl0z9.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpr3ttl0z9.rs:20:5\n   |\n20 |     return String::from(chars);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |     { return String::from(chars); }\n   |     +                             +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut r = String::new();\n    let mut c = String::new();\n    let mut w = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmpyctonbsf.rs:78:1\n   |\n78 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let w of words) {\n        let chars_of_word = w.chars();\n        chars.push(...chars_of_word);\n    }\n    let new_chars = chars.sort();\n    let new_words = [];\n    for (let c of new_chars) {\n        let word = String::from(c);\n        new_words.push(word);\n    }\n    return String::join(\" \", new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpv2achsur.rs:16:10\n   |\n16 |     for (let w of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmpv2achsur.rs:16:14\n   |\n16 |     for (let w of words) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpv2achsur.rs:16:16\n   |\n16 |     for (let w of words) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpv2achsur.rs:16:19\n   |\n16 |     for (let w of words) {\n   |                  -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpv2achsur.rs:16:25\n   |\n16 |     for (let w of words) {\n   |                         ^ help: try adding `in` here\n\nerror: unexpected token: `...`\n  --> /tmp/tmpv2achsur.rs:18:20\n   |\n18 |         chars.push(...chars_of_word);\n   |                    ^^^\n   |\nhelp: use `..` for an exclusive range\n   |\n18 |         chars.push(..chars_of_word);\n   |                    ~~\nhelp: or `..=` for an inclusive range\n   |\n18 |         chars.push(..=chars_of_word);\n   |                    ~~~\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmpv2achsur.rs:20:5\n   |\n20 |     let new_chars = chars.sort();\n   |     ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |     { let new_chars = chars.sort(); }\n   |     +                               +\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        new_words.push(String.from(sorted_chars));\n    }\n    return String.from(\" \".join(new_words));\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmplxd4xjb8.rs:19:24\n   |\n19 |         new_words.push(String.from(sorted_chars));\n   |                        ^^^^^^-----\n   |                        |\n   |                        help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmplxd4xjb8.rs:21:12\n   |\n21 |     return String.from(\" \".join(new_words));\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmplxd4xjb8.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort();\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmplxd4xjb8.rs:19:19\n   |\n19 |         new_words.push(String.from(sorted_chars));\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `join` found for reference `&'static str` in the current scope\n  --> /tmp/tmplxd4xjb8.rs:21:28\n   |\n21 |     return String.from(\" \".join(new_words));\n   |                            ^^^^ method not found in `&'static str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl11qhz8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl11qhz8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl11qhz8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl11qhz8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl11qhz8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwl11qhz8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted = chars.sort();\n    result += sorted.join(\"\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpqq59rysw.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpqq59rysw.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpqq59rysw.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpqq59rysw.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpqq59rysw.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpqq59rysw.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += String.from(sorted_chars);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwgv8byx8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwgv8byx8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwgv8byx8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwgv8byx8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwgv8byx8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwgv8byx8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = chars.sort();\n        new_words.push(String.from(new_chars));\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpyjlz6zz_.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpyjlz6zz_.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpyjlz6zz_.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpyjlz6zz_.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyjlz6zz_.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpyjlz6zz_.rs:21:5\n   |\n21 |     return String.from(new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return String.from(new_words); }\n   |     +                                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let result = \"\"\n    for i in words {\n        let chars = i.chars()\n        let sorted = chars.sort()\n        result += String.from(sorted)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpksoy3krm.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let result = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpksoy3krm.rs:15:20\n   |\n15 |     let result = \"\"\n   |                    ^ help: add `;` here\n16 |     for i in words {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpksoy3krm.rs:17:30\n   |\n17 |         let chars = i.chars()\n   |                              ^ help: add `;` here\n18 |         let sorted = chars.sort()\n   |         --- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmpksoy3krm.rs:18:34\n   |\n18 |         let sorted = chars.sort()\n   |                                  ^ help: add `;` here\n19 |         result += String.from(sorted)\n   |         ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpksoy3krm.rs:19:19\n   |\n19 |         result += String.from(sorted)\n   |                   ^^^^^^-----\n   |                   |\n   |                   help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpksoy3krm.rs:18:28\n   |\n18 |         let sorted = chars.sort()\n   |                            ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpksoy3krm.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let result = \"\"\n    for i in words {\n        let chars = i.chars()\n        let sorted = chars.sort()\n        result += String.from(sorted)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpksoy3krm.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let result = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpksoy3krm.rs:15:20\n   |\n15 |     let result = \"\"\n   |                    ^ help: add `;` here\n16 |     for i in words {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpksoy3krm.rs:17:30\n   |\n17 |         let chars = i.chars()\n   |                              ^ help: add `;` here\n18 |         let sorted = chars.sort()\n   |         --- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmpksoy3krm.rs:18:34\n   |\n18 |         let sorted = chars.sort()\n   |                                  ^ help: add `;` here\n19 |         result += String.from(sorted)\n   |         ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpksoy3krm.rs:19:19\n   |\n19 |         result += String.from(sorted)\n   |                   ^^^^^^-----\n   |                   |\n   |                   help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpksoy3krm.rs:18:28\n   |\n18 |         let sorted = chars.sort()\n   |                            ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpksoy3krm.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let word of words) {\n        let chars_of_word = word.chars().to_a();\n        chars.push(chars_of_word.sort());\n    }\n    let new_string = \"\";\n    for (let char of chars) {\n        new_string += char;\n    }\n    return new_string;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp8tu2sefg.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp8tu2sefg.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp8tu2sefg.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp8tu2sefg.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp8tu2sefg.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmp8tu2sefg.rs:20:5\n   |\n20 |     let new_string = \"\";\n   |     ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |     { let new_string = \"\"; }\n   |     +                      +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted = chars.sort();\n    result += sorted.join(\"\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpqq59rysw.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpqq59rysw.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpqq59rysw.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpqq59rysw.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpqq59rysw.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpqq59rysw.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let c of chars) {\n            new_chars.push(c);\n        }\n        new_words.push(String.from(new_chars));\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4r36pv55.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp4r36pv55.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp4r36pv55.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp4r36pv55.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4r36pv55.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp4r36pv55.rs:19:14\n   |\n19 |         for (let c of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp4r36pv55.rs:19:18\n   |\n19 |         for (let c of chars) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp4r36pv55.rs:19:20\n   |\n19 |         for (let c of chars) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmp4r36pv55.rs:19:23\n   |\n19 |         for (let c of chars) {\n   |                      -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for i in words {\n        let chars = i.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmpog2v5nf6.rs:19:19\n   |\n19 |         result += String.from(sorted);\n   |                   ^^^^^^-----\n   |                   |\n   |                   help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpog2v5nf6.rs:18:28\n   |\n18 |         let sorted = chars.sort();\n   |                            ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpog2v5nf6.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let word of words) {\n        let chars_in_word = [];\n        for (let char of word) {\n            chars_in_word.push(char.charCodeAt(0) - 32);\n        }\n        chars.push(chars_in_word);\n    }\n    let sorted_chars = chars.sort();\n    let result = \"\";\n    for (let i = 0; i < sorted_chars.length; i++) {\n        result += sorted_chars[i];\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpdjwjm7rt.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpdjwjm7rt.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpdjwjm7rt.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpdjwjm7rt.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpdjwjm7rt.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpdjwjm7rt.rs:18:14\n   |\n18 |         for (let char of word) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `char`\n  --> /tmp/tmpdjwjm7rt.rs:18:18\n   |\n18 |         for (let char of word) {\n   |                 -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpdjwjm7rt.rs:18:23\n   |\n18 |         for (let char of word) {\n   |                      -^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpdjwjm7rt.rs:18:26\n   |\n18 |         for (let char of word) {\n   |                         -^^^^ expected one of `)`, `,`, `@`, or `|`\n   | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted = chars.sort();\n    result += sorted.join(\"\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpqq59rysw.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpqq59rysw.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpqq59rysw.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpqq59rysw.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpqq59rysw.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpqq59rysw.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let chars = []\n  for w in words {\n    let chars_in_word = w.chars().to_a()\n    chars.push(chars_in_word.sort())\n  }\n  let new_string = String.from(chars.join(\"\"))\n  return new_string\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpn004rj7q.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let chars = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpn004rj7q.rs:15:17\n   |\n15 |   let chars = []\n   |                 ^ help: add `;` here\n16 |   for w in words {\n   |   --- unexpected token\n\nerror: expected `;`, found `chars`\n  --> /tmp/tmpn004rj7q.rs:17:41\n   |\n17 |     let chars_in_word = w.chars().to_a()\n   |                                         ^ help: add `;` here\n18 |     chars.push(chars_in_word.sort())\n   |     ----- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpn004rj7q.rs:20:47\n   |\n20 |   let new_string = String.from(chars.join(\"\"))\n   |                                               ^ help: add `;` here\n21 |   return new_string\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpn004rj7q.rs:20:20\n   |\n20 |   let new_string = String.from(chars.join(\"\"))\n   |                    ^^^^^^-----\n   |                    |\n   |                    help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `to_a` found for struct `Chars` in the current scope\n  --> /tmp/tmpn004rj7q.rs:17:35\n   |\n17 |     let chars_in_word = w.chars().to_a()\n   |                                   ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpn004rj7q.rs:18:11\n   |\n18 |     chars.push(chars_in_word.sort())\n   |           ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut r = String::from(\"\");\n    for c in s {\n        let i = ascii_value(c);\n        if i > ascii_value(r[0]) {\n            r = r.drop(0) + String::from(c);\n        } else {\n            r = r.prepend(c);\n        }\n    }\n    return r;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `ascii_value` in this scope\n  --> /tmp/tmpkolz91rf.rs:16:17\n   |\n16 |         let i = ascii_value(c);\n   |                 ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `ascii_value` in this scope\n  --> /tmp/tmpkolz91rf.rs:17:16\n   |\n17 |         if i > ascii_value(r[0]) {\n   |                ^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpkolz91rf.rs:15:14\n   |\n15 |     for c in s {\n   |              ^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpkolz91rf.rs:17:28\n   |\n17 |         if i > ascii_value(r[0]) {\n   |                            ^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `drop` found for struct `String` in the current scope\n  --> /tmp/tmpkolz91rf.rs:18:19\n   |\n18 |             r = r.drop(0) + String::from(c);\n   |                   ^^^^ method not found in `String`\n\nerror[E0599]: no method named `prepend` found for struct `String` in the current scope\n  --> /tmp/tmpkolz91rf.rs:20:19\n   |\n20 |             r = r.prepend(c);\n   |                   ^^^^^^^ method not found in `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut r = String::new();\n    let mut c = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp9pzt9k08.rs:77:14\n   |\n77 |     let mut r\n   |              ^ help: add `;` here\n78 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9pzt9k08.rs:13:31\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |    ------------               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut r = StringBuilder();\n    let mut c = StringBuilder();\n    let mut w = StringBuilder();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q =\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected expression, found `}`\n  --> /tmp/tmp17mt_shp.rs:78:1\n   |\n78 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmp17mt_shp.rs:14:17\n   |\n14 |     let mut r = StringBuilder();\n   |                 ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmp17mt_shp.rs:15:17\n   |\n15 |     let mut c = StringBuilder();\n   |                 ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `StringBuilder` in this scope\n  --> /tmp/tmp17mt_shp.rs:16:17\n   |\n16 |     let mut w = StringBuilder();\n   |                 ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let result = \"\"\n  for i in words {\n    let chars = i.chars()\n    let sorted_chars = chars.sort()\n    result += String.from_chars(sorted_chars)\n  }\n  return result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5uq_72_4.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5uq_72_4.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for i in words {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp5uq_72_4.rs:17:26\n   |\n17 |     let chars = i.chars()\n   |                          ^ help: add `;` here\n18 |     let sorted_chars = chars.sort()\n   |     --- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmp5uq_72_4.rs:18:36\n   |\n18 |     let sorted_chars = chars.sort()\n   |                                    ^ help: add `;` here\n19 |     result += String.from_chars(sorted_chars)\n   |     ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp5uq_72_4.rs:19:15\n   |\n19 |     result += String.from_chars(sorted_chars)\n   |               ^^^^^^-----------\n   |               |\n   |               help: use the path separator to refer to an item: `String::from_chars`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp5uq_72_4.rs:18:30\n   |\n18 |     let sorted_chars = chars.sort()\n   |                              ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5uq_72_4.rs:21:10\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let w of words) {\n        let chars = w.chars();\n        let new_chars = [];\n        for (let c of chars) {\n            new_chars.push(c);\n        }\n        new_words.push(String.from(new_chars));\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpjn_hpzsm.rs:16:10\n   |\n16 |     for (let w of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmpjn_hpzsm.rs:16:14\n   |\n16 |     for (let w of words) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpjn_hpzsm.rs:16:16\n   |\n16 |     for (let w of words) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpjn_hpzsm.rs:16:19\n   |\n16 |     for (let w of words) {\n   |                  -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpjn_hpzsm.rs:16:25\n   |\n16 |     for (let w of words) {\n   |                         ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpjn_hpzsm.rs:19:14\n   |\n19 |         for (let c of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpjn_hpzsm.rs:19:18\n   |\n19 |         for (let c of chars) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpjn_hpzsm.rs:19:20\n   |\n19 |         for (let c of chars) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmpjn_hpzsm.rs:19:23\n   |\n19 |         for (let c of chars) {\n   |                      -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpujeasl8i.rs:16:15\n   |\n16 |     for (word of words) {\n   |              -^^ expected one of `)`, `,`, `@`, or `|`\n   |              |\n   |              help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpujeasl8i.rs:16:18\n   |\n16 |     for (word of words) {\n   |                 -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpujeasl8i.rs:16:24\n   |\n16 |     for (word of words) {\n   |                        ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpujeasl8i.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl11qhz8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl11qhz8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl11qhz8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl11qhz8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl11qhz8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwl11qhz8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let mut r = String::new();\n    let mut c = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp9pzt9k08.rs:77:14\n   |\n77 |     let mut r\n   |              ^ help: add `;` here\n78 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9pzt9k08.rs:13:31\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |    ------------               ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += String.from(sorted_chars);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwgv8byx8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwgv8byx8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwgv8byx8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwgv8byx8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwgv8byx8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwgv8byx8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += String.from(sorted_chars);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwgv8byx8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwgv8byx8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwgv8byx8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwgv8byx8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwgv8byx8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwgv8byx8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let chars = [];\n  for (let w of words) {\n    let chars_of_word = w.chars().to_list();\n    chars.push(chars_of_word.sort());\n  }\n  let new_str = \"\";\n  for (let c of chars) {\n    new_str += c.join(\"\");\n  }\n  return new_str;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpte_mf2gl.rs:16:8\n   |\n16 |   for (let w of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmpte_mf2gl.rs:16:12\n   |\n16 |   for (let w of words) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpte_mf2gl.rs:16:14\n   |\n16 |   for (let w of words) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpte_mf2gl.rs:16:17\n   |\n16 |   for (let w of words) {\n   |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpte_mf2gl.rs:16:23\n   |\n16 |   for (let w of words) {\n   |                       ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmpte_mf2gl.rs:20:3\n   |\n20 |   let new_str = \"\";\n   |   ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { let new_str = \"\"; }\n   |   +                   +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for word in words {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += String.from(sorted_chars);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmp6_cz9zbd.rs:19:19\n   |\n19 |         result += String.from(sorted_chars);\n   |                   ^^^^^^-----\n   |                   |\n   |                   help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp6_cz9zbd.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort();\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6_cz9zbd.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let chars = word.chars();\n        let new_chars = [];\n        for i in 0..chars.len() {\n            new_chars.append(chars[chars.len() - 1 - i]);\n        }\n        new_words.append(String::from(new_chars));\n    }\n    return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0599]: no method named `len` found for struct `Chars` in the current scope\n  --> /tmp/tmpxo5ggd89.rs:19:27\n   |\n19 |         for i in 0..chars.len() {\n   |                           ^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpxo5ggd89.rs:20:23\n   |\n20 |             new_chars.append(chars[chars.len() - 1 - i]);\n   |                       ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `len` found for struct `Chars` in the current scope\n  --> /tmp/tmpxo5ggd89.rs:20:42\n   |\n20 |             new_chars.append(chars[chars.len() - 1 - i]);\n   |                                          ^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpxo5ggd89.rs:22:19\n   |\n22 |         new_words.append(String::from(new_chars));\n   |                   ^^^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the trait bound `String: From<[_; 0]>` is not satisfied\n  --> /tmp/tmpxo5ggd89.rs:22:26\n   |\n22 |         new_words.append(String::from(new_chars));\n   |                          ^^^^^^^^^^^^ the trait `From<[_; 0]>` is not implemented for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <String as From<&String>>\n             <String as From<&mut str>>\n             <String as From<&str>>\n             <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\nerror[E0277]: the trait bound `String: From<[_; 0]>` is not satisfied\n  --> /tmp/tmpxo5ggd89.rs:24:12\n   |\n24 |     return String::from(new_words);\n   |            ^^^^^^^^^^^^ the trait `From<[_; 0]>` is not implemented for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <String as From<&String>>\n             <String as From<&mut str>>\n             <String as From<&str>>\n             <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let c of chars) {\n            new_chars.push(c);\n        }\n        new_words.push(String::from(new_chars));\n    }\n    return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpoqsbjubs.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpoqsbjubs.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpoqsbjubs.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpoqsbjubs.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpoqsbjubs.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpoqsbjubs.rs:19:14\n   |\n19 |         for (let c of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpoqsbjubs.rs:19:18\n   |\n19 |         for (let c of chars) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpoqsbjubs.rs:19:20\n   |\n19 |         for (let c of chars) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmpoqsbjubs.rs:19:23\n   |\n19 |         for (let c of chars) {\n   |                      -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let chars = []\n    for w in words {\n        let chars_of_w = w.chars()\n        chars.append(chars_of_w.sort())\n    }\n    let new_s = String.from(chars)\n    return new_s\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcnydayjy.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let chars = []\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcnydayjy.rs:15:19\n   |\n15 |     let chars = []\n   |                   ^ help: add `;` here\n16 |     for w in words {\n   |     --- unexpected token\n\nerror: expected `;`, found `chars`\n  --> /tmp/tmpcnydayjy.rs:17:35\n   |\n17 |         let chars_of_w = w.chars()\n   |                                   ^ help: add `;` here\n18 |         chars.append(chars_of_w.sort())\n   |         ----- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpcnydayjy.rs:20:35\n   |\n20 |     let new_s = String.from(chars)\n   |                                   ^ help: add `;` here\n21 |     return new_s\n   |     ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpcnydayjy.rs:20:17\n   |\n20 |     let new_s = String.from(chars)\n   |                 ^^^^^^-----\n   |                 |\n   |                 help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpcnydayjy.rs:18:15\n   |\n18 |         chars.append(chars_of_w.sort())\n   |               ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpcnydayjy.rs:18:33\n   |\n18 |         chars.append(chars_of_w.sort())\n   |                                 ^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted = chars.sort();\n    result += sorted.join(\"\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpqq59rysw.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpqq59rysw.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpqq59rysw.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpqq59rysw.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpqq59rysw.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpqq59rysw.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let chars = []\n    for w in words {\n        let chars_of_w = w.chars().map(c => c.to_i()).sort()\n        chars.append(String.from_chars(chars_of_w))\n    }\n    return String.from_chars(chars)\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdd_ep9qr.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let chars = []\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdd_ep9qr.rs:15:19\n   |\n15 |     let chars = []\n   |                   ^ help: add `;` here\n16 |     for w in words {\n   |     --- unexpected token\n\nerror: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpdd_ep9qr.rs:17:42\n   |\n17 |         let chars_of_w = w.chars().map(c => c.to_i()).sort()\n   |                                          ^^ expected one of 8 possible tokens\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += String.from(sorted_chars);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwgv8byx8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwgv8byx8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwgv8byx8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwgv8byx8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwgv8byx8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwgv8byx8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String::from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpmiq2pyj_.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpmiq2pyj_.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpmiq2pyj_.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpmiq2pyj_.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpmiq2pyj_.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpmiq2pyj_.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = s.chars();\n    let chars_map = chars.map(c => c.to_i()).sort();\n    let new_chars = chars_map.map(c => String.from_char(c));\n    let new_words = words.map(w => new_chars.join(\"\") + \" \" + w);\n    return new_words.join(\" \");\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp6gygs9mk.rs:16:33\n   |\n16 |     let chars_map = chars.map(c => c.to_i()).sort();\n   |                                 ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let chars = []\n    for w in words {\n        let chars_of_w = w.chars()\n        chars.append(chars_of_w.sort())\n    }\n    let new_s = String.from(chars)\n    return new_s\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcnydayjy.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let chars = []\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcnydayjy.rs:15:19\n   |\n15 |     let chars = []\n   |                   ^ help: add `;` here\n16 |     for w in words {\n   |     --- unexpected token\n\nerror: expected `;`, found `chars`\n  --> /tmp/tmpcnydayjy.rs:17:35\n   |\n17 |         let chars_of_w = w.chars()\n   |                                   ^ help: add `;` here\n18 |         chars.append(chars_of_w.sort())\n   |         ----- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpcnydayjy.rs:20:35\n   |\n20 |     let new_s = String.from(chars)\n   |                                   ^ help: add `;` here\n21 |     return new_s\n   |     ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpcnydayjy.rs:20:17\n   |\n20 |     let new_s = String.from(chars)\n   |                 ^^^^^^-----\n   |                 |\n   |                 help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpcnydayjy.rs:18:15\n   |\n18 |         chars.append(chars_of_w.sort())\n   |               ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpcnydayjy.rs:18:33\n   |\n18 |         chars.append(chars_of_w.sort())\n   |                                 ^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let c of chars) {\n            new_chars.push(c);\n        }\n        new_words.push(String.from(new_chars));\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4r36pv55.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp4r36pv55.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp4r36pv55.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp4r36pv55.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4r36pv55.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp4r36pv55.rs:19:14\n   |\n19 |         for (let c of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp4r36pv55.rs:19:18\n   |\n19 |         for (let c of chars) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp4r36pv55.rs:19:20\n   |\n19 |         for (let c of chars) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmp4r36pv55.rs:19:23\n   |\n19 |         for (let c of chars) {\n   |                      -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let chars = []\n  for w in words {\n    let chars_in_word = w.chars().to_a()\n    chars.append(chars_in_word.sort())\n  }\n  let new_str = String.from(chars)\n  return new_str\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpga4v8xul.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let chars = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpga4v8xul.rs:15:17\n   |\n15 |   let chars = []\n   |                 ^ help: add `;` here\n16 |   for w in words {\n   |   --- unexpected token\n\nerror: expected `;`, found `chars`\n  --> /tmp/tmpga4v8xul.rs:17:41\n   |\n17 |     let chars_in_word = w.chars().to_a()\n   |                                         ^ help: add `;` here\n18 |     chars.append(chars_in_word.sort())\n   |     ----- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpga4v8xul.rs:20:35\n   |\n20 |   let new_str = String.from(chars)\n   |                                   ^ help: add `;` here\n21 |   return new_str\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpga4v8xul.rs:20:17\n   |\n20 |   let new_str = String.from(chars)\n   |                 ^^^^^^-----\n   |                 |\n   |                 help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `to_a` found for struct `Chars` in the current scope\n  --> /tmp/tmpga4v8xul.rs:17:35\n   |\n17 |     let chars_in_word = w.chars().to_a()\n   |                                   ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpga4v8xul.rs:18:11\n   |\n18 |     chars.append(chars_in_word.sort())\n   |           ^^^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmp85mdm4k0.rs:19:24\n   |\n19 |         let new_word = String.from(sorted_chars);\n   |                        ^^^^^^-----\n   |                        |\n   |                        help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp85mdm4k0.rs:22:12\n   |\n22 |     return String.from(new_words);\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp85mdm4k0.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort();\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp85mdm4k0.rs:20:19\n   |\n20 |         new_words.push(new_word);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let chars = []\n    for w in words {\n        let chars_in_word = w.chars()\n        let sorted_chars = chars_in_word.sort()\n        chars.append(sorted_chars.join(\"\"))\n    }\n    return String.from(chars)\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppl3g9nsr.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let chars = []\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppl3g9nsr.rs:15:19\n   |\n15 |     let chars = []\n   |                   ^ help: add `;` here\n16 |     for w in words {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmppl3g9nsr.rs:17:38\n   |\n17 |         let chars_in_word = w.chars()\n   |                                      ^ help: add `;` here\n18 |         let sorted_chars = chars_in_word.sort()\n   |         --- unexpected token\n\nerror: expected `;`, found `chars`\n  --> /tmp/tmppl3g9nsr.rs:18:48\n   |\n18 |         let sorted_chars = chars_in_word.sort()\n   |                                                ^ help: add `;` here\n19 |         chars.append(sorted_chars.join(\"\"))\n   |         ----- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmppl3g9nsr.rs:21:12\n   |\n21 |     return String.from(chars)\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmppl3g9nsr.rs:18:42\n   |\n18 |         let sorted_chars = chars_in_word.sort()\n   |                                          ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmppl3g9nsr.rs:19:15\n   |\n19 |         chars.append(sorted_chars.join(\"\"))\n   |               ^^^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl11qhz8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl11qhz8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl11qhz8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl11qhz8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl11qhz8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwl11qhz8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let chars = word.chars();\n        let new_chars = [];\n        for i in chars.iter().next() {\n            let ascii = i.to_ascii();\n            new_chars.append(ascii);\n        }\n        new_words.append(String.from(new_chars));\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmpl5__tbos.rs:23:26\n   |\n23 |         new_words.append(String.from(new_chars));\n   |                          ^^^^^^-----\n   |                          |\n   |                          help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpl5__tbos.rs:25:12\n   |\n25 |     return String.from(new_words);\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `iter` found for struct `Chars` in the current scope\n  --> /tmp/tmpl5__tbos.rs:19:24\n   |\n19 |         for i in chars.iter().next() {\n   |                        ^^^^ private field, not a method\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpl5__tbos.rs:21:23\n   |\n21 |             new_chars.append(ascii);\n   |                       ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpl5__tbos.rs:23:19\n   |\n23 |         new_words.append(String.from(new_chars));\n   |                   ^^^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let w of words) {\n        let chars = w.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.join(\" \", new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpiu7jwyyt.rs:16:10\n   |\n16 |     for (let w of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmpiu7jwyyt.rs:16:14\n   |\n16 |     for (let w of words) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpiu7jwyyt.rs:16:16\n   |\n16 |     for (let w of words) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpiu7jwyyt.rs:16:19\n   |\n16 |     for (let w of words) {\n   |                  -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpiu7jwyyt.rs:16:25\n   |\n16 |     for (let w of words) {\n   |                         ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpiu7jwyyt.rs:22:5\n   |\n22 |     return String.join(\" \", new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { return String.join(\" \", new_words); }\n   |     +                                     +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words: List[String] = s.split(\" \")\n    let new_words: List[String] = []\n    for i in words {\n        let new_word: String = \"\"\n        for j in i {\n            new_word += j.ascii_value()\n        }\n        new_words.append(new_word)\n    }\n    return String::from(new_words)\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `=`, found `[`\n  --> /tmp/tmp11k_awg3.rs:14:20\n   |\n14 |     let words: List[String] = s.split(\" \")\n   |                    ^ expected one of 7 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpujeasl8i.rs:16:15\n   |\n16 |     for (word of words) {\n   |              -^^ expected one of `)`, `,`, `@`, or `|`\n   |              |\n   |              help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpujeasl8i.rs:16:18\n   |\n16 |     for (word of words) {\n   |                 -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpujeasl8i.rs:16:24\n   |\n16 |     for (word of words) {\n   |                        ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpujeasl8i.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for i in words {\n        let chars = i.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp5f03ui7h.rs:18:28\n   |\n18 |         let sorted = chars.sort();\n   |                            ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5f03ui7h.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let chars = [];\n  for (let w of words) {\n    let chars_of_w = w.chars();\n    for (let c of chars_of_w) {\n      chars.push(c);\n    }\n  }\n  let result = \"\";\n  for (let c of chars) {\n    result += c;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpcis_2jkz.rs:16:8\n   |\n16 |   for (let w of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmpcis_2jkz.rs:16:12\n   |\n16 |   for (let w of words) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpcis_2jkz.rs:16:14\n   |\n16 |   for (let w of words) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpcis_2jkz.rs:16:17\n   |\n16 |   for (let w of words) {\n   |                -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpcis_2jkz.rs:16:23\n   |\n16 |   for (let w of words) {\n   |                       ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpcis_2jkz.rs:18:10\n   |\n18 |     for (let c of chars_of_w) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpcis_2jkz.rs:18:14\n   |\n18 |     for (let c of chars_of_w) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpcis_2jkz.rs:18:16\n   |\n18 |     for (let c of chars_of_w) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars_of_w`\n  --> /tmp/tmpcis_2jkz.rs:18:19\n   |\n18 |     for (let c of chars_of_w) {\n   |                  -^^^^^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpcis_2jkz.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let new_words = [];\n  for (let word of words) {\n    let chars = word.chars();\n    let new_chars = [];\n    for (let c of chars) {\n      new_chars.push(c);\n    }\n    new_words.push(String::from(new_chars));\n  }\n  return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpv3y8vdmp.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpv3y8vdmp.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpv3y8vdmp.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpv3y8vdmp.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpv3y8vdmp.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpv3y8vdmp.rs:19:10\n   |\n19 |     for (let c of chars) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpv3y8vdmp.rs:19:14\n   |\n19 |     for (let c of chars) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpv3y8vdmp.rs:19:16\n   |\n19 |     for (let c of chars) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmpv3y8vdmp.rs:19:19\n   |\n19 |     for (let c of chars) {\n   |                  -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let chars = [];\n  for (let word of words) {\n    let chars_of_word = word.chars().to_a();\n    chars.push(chars_of_word.sort());\n  }\n  let new_string = \"\";\n  for (let char of chars) {\n    new_string += char;\n  }\n  return new_string;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpok1ghwq1.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpok1ghwq1.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpok1ghwq1.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpok1ghwq1.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpok1ghwq1.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmpok1ghwq1.rs:20:3\n   |\n20 |   let new_string = \"\";\n   |   ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { let new_string = \"\"; }\n   |   +                      +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let w of words) {\n        let chars_of_word = w.chars();\n        for (let c of chars_of_word) {\n            chars.push(c);\n        }\n    }\n    let new_word = \"\";\n    for (let c of chars) {\n        new_word += c;\n    }\n    return String::from(new_word);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxbfi3n83.rs:16:10\n   |\n16 |     for (let w of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmpxbfi3n83.rs:16:14\n   |\n16 |     for (let w of words) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpxbfi3n83.rs:16:16\n   |\n16 |     for (let w of words) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpxbfi3n83.rs:16:19\n   |\n16 |     for (let w of words) {\n   |                  -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxbfi3n83.rs:16:25\n   |\n16 |     for (let w of words) {\n   |                         ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpxbfi3n83.rs:18:14\n   |\n18 |         for (let c of chars_of_word) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpxbfi3n83.rs:18:18\n   |\n18 |         for (let c of chars_of_word) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpxbfi3n83.rs:18:20\n   |\n18 |         for (let c of chars_of_word) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars_of_word`\n  --> /tmp/tmpxbfi3n83.rs:18:23\n   |\n18 |         for (let c of chars_of_word) {\n   |                      -^^^^^^^^^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    let new_s = String.from(new_words);\n    return new_s;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9vj1z2zc.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp9vj1z2zc.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp9vj1z2zc.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp9vj1z2zc.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9vj1z2zc.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmp9vj1z2zc.rs:22:5\n   |\n22 |     let new_s = String.from(new_words);\n   |     ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { let new_s = String.from(new_words); }\n   |     +                                     +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for word in words {\n        for c in word.chars():\n            chars.push(c);\n        chars.push(\" \");\n    }\n    chars.pop();\n    return String.from(chars);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: casts cannot be followed by a method call\n  --> /tmp/tmp5djjnp2d.rs:17:18\n   |\n17 |            for c in word.chars():\n   |   __________________^___________-\n   |  |__________________|\n   | ||\n18 | ||             chars.push(c);\n   | ||_________________^ help: remove the type ascription\n   | |__________________|\n   | \n\nerror: expected `{`, found `;`\n  --> /tmp/tmp5djjnp2d.rs:18:26\n   |\n18 |             chars.push(c);\n   |                          ^ expected `{`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp5djjnp2d.rs:22:12\n   |\n22 |     return String.from(chars);\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `pop` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp5djjnp2d.rs:21:11\n   |\n21 |     chars.pop();\n   |           ^^^ method not found in `[_; 0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let chars = [];\n  for (let word of words) {\n    let chars_in_word = word.chars();\n    for (let i = 0; i < chars_in_word.length; i++) {\n      chars.push(chars_in_word[i]);\n    }\n  }\n  let new_chars = [];\n  for (let char of chars) {\n    new_chars.push(char);\n  }\n  let new_word = \"\";\n  for (let char of new_chars) {\n    new_word += char;\n  }\n  return String::from(new_word);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9ze4pc7z.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp9ze4pc7z.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp9ze4pc7z.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp9ze4pc7z.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9ze4pc7z.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp9ze4pc7z.rs:18:10\n   |\n18 |     for (let i = 0; i < chars_in_word.length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9ze4pc7z.rs:18:14\n   |\n18 |     for (let i = 0; i < chars_in_word.length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9ze4pc7z.rs:18:16\n   |\n18 |     for (let i = 0; i < chars_in_word.length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9ze4pc7z.rs:18:15\n   |\n18 |     for (let i = 0; i < chars_in_word.length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9ze4pc7z.rs:18:16\n   |\n18 |     for (let i = 0; i < chars_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.join(\" \", new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpi1pnpxu6.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpi1pnpxu6.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpi1pnpxu6.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpi1pnpxu6.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpi1pnpxu6.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpi1pnpxu6.rs:22:5\n   |\n22 |     return String.join(\" \", new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { return String.join(\" \", new_words); }\n   |     +                                     +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let chars = []\n  for w in words {\n    let chars_in_word = w.chars().to_a()\n    chars.push(chars_in_word.sort())\n  }\n  let new_string = String.join(\" \", chars)\n  return new_string\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0zv3qejz.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let chars = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp0zv3qejz.rs:15:17\n   |\n15 |   let chars = []\n   |                 ^ help: add `;` here\n16 |   for w in words {\n   |   --- unexpected token\n\nerror: expected `;`, found `chars`\n  --> /tmp/tmp0zv3qejz.rs:17:41\n   |\n17 |     let chars_in_word = w.chars().to_a()\n   |                                         ^ help: add `;` here\n18 |     chars.push(chars_in_word.sort())\n   |     ----- unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmp0zv3qejz.rs:20:43\n   |\n20 |   let new_string = String.join(\" \", chars)\n   |                                           ^ help: add `;` here\n21 |   return new_string\n   |   ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp0zv3qejz.rs:20:20\n   |\n20 |   let new_string = String.join(\" \", chars)\n   |                    ^^^^^^-----\n   |                    |\n   |                    help: use the path separator to refer to an item: `String::join`\n\nerror[E0599]: no method named `to_a` found for struct `Chars` in the current scope\n  --> /tmp/tmp0zv3qejz.rs:17:35\n   |\n17 |     let chars_in_word = w.chars().to_a()\n   |                                   ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp0zv3qejz.rs:18:11\n   |\n18 |     chars.push(chars_in_word.sort())\n   |           ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += String.from(sorted);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwl11qhz8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwl11qhz8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwl11qhz8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwl11qhz8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwl11qhz8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwl11qhz8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let chars = []\n    for word in words {\n        let chars_of_word = []\n        for c in word {\n            chars_of_word.append(c)\n        }\n        chars.append(chars_of_word.sort())\n    }\n    return String.from(chars)\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmptv7ko7un.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let chars = []\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptv7ko7un.rs:15:19\n   |\n15 |     let chars = []\n   |                   ^ help: add `;` here\n16 |     for word in words {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmptv7ko7un.rs:17:31\n   |\n17 |         let chars_of_word = []\n   |                               ^ help: add `;` here\n18 |         for c in word {\n   |         --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmptv7ko7un.rs:23:12\n   |\n23 |     return String.from(chars)\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::from`\n\nerror[E0277]: `&str` is not an iterator\n  --> /tmp/tmptv7ko7un.rs:18:18\n   |\n18 |         for c in word {\n   |                  ^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptv7ko7un.rs:19:27\n   |\n19 |             chars_of_word.append(c)\n   |                           ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmptv7ko7un.rs:21:15\n   |\n21 |         chars.append(chars_of_word.sort())\n   |               ^^^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let c of chars) {\n            new_chars.push(c);\n        }\n        new_words.push(String::from(new_chars));\n    }\n    return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpoqsbjubs.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpoqsbjubs.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpoqsbjubs.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpoqsbjubs.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpoqsbjubs.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpoqsbjubs.rs:19:14\n   |\n19 |         for (let c of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpoqsbjubs.rs:19:18\n   |\n19 |         for (let c of chars) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpoqsbjubs.rs:19:20\n   |\n19 |         for (let c of chars) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmpoqsbjubs.rs:19:23\n   |\n19 |         for (let c of chars) {\n   |                      -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for word in words {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += String.from(sorted_chars);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmp6_cz9zbd.rs:19:19\n   |\n19 |         result += String.from(sorted_chars);\n   |                   ^^^^^^-----\n   |                   |\n   |                   help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp6_cz9zbd.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort();\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6_cz9zbd.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for word in words {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmprn8pwdl_.rs:18:28\n   |\n18 |         let sorted = chars.sort();\n   |                            ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprn8pwdl_.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let chars = [];\n  for (let word of words) {\n    let chars_of_word = word.chars();\n    chars.push(...chars_of_word);\n  }\n  let sorted_chars = chars.sort();\n  let new_word = \"\";\n  for (let char of sorted_chars) {\n    new_word += char;\n  }\n  return new_word;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpby80xmzy.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpby80xmzy.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpby80xmzy.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpby80xmzy.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpby80xmzy.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: unexpected token: `...`\n  --> /tmp/tmpby80xmzy.rs:18:16\n   |\n18 |     chars.push(...chars_of_word);\n   |                ^^^\n   |\nhelp: use `..` for an exclusive range\n   |\n18 |     chars.push(..chars_of_word);\n   |                ~~\nhelp: or `..=` for an inclusive range\n   |\n18 |     chars.push(..=chars_of_word);\n   |                ~~~\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmpby80xmzy.rs:20:3\n   |\n20 |   let sorted_chars = chars.sort();\n   |   ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { let sorted_chars = chars.sort(); }\n   |   +                                  +\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let word of words) {\n        let chars_of_word = word.chars().sorted();\n        chars.push(chars_of_word);\n    }\n    let new_string = \"\";\n    for (let i = 0; i < chars.length; i++) {\n        let char = chars[i];\n        new_string += char;\n    }\n    return new_string;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp27u2p1vg.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp27u2p1vg.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp27u2p1vg.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp27u2p1vg.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp27u2p1vg.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmp27u2p1vg.rs:20:5\n   |\n20 |     let new_string = \"\";\n   |     ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |     { let new_string = \"\"; }\n   |     +                      +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let w of words) {\n        let chars_in_word = w.chars().to_a();\n        chars.push(chars_in_word.sort());\n    }\n    let result = \"\";\n    for (let c of chars) {\n        result += c.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp6e2qlhhz.rs:16:10\n   |\n16 |     for (let w of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmp6e2qlhhz.rs:16:14\n   |\n16 |     for (let w of words) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp6e2qlhhz.rs:16:16\n   |\n16 |     for (let w of words) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp6e2qlhhz.rs:16:19\n   |\n16 |     for (let w of words) {\n   |                  -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp6e2qlhhz.rs:16:25\n   |\n16 |     for (let w of words) {\n   |                         ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmp6e2qlhhz.rs:20:5\n   |\n20 |     let result = \"\";\n   |     ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |     { let result = \"\"; }\n   |     +                  +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for i in words {\n        let chars_i = i.chars().sort();\n        chars.push(String::from(chars_i));\n    }\n    return String::from(chars);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpsr4l7thl.rs:17:33\n   |\n17 |         let chars_i = i.chars().sort();\n   |                                 ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpsr4l7thl.rs:18:15\n   |\n18 |         chars.push(String::from(chars_i));\n   |               ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the trait bound `String: From<[_; 0]>` is not satisfied\n  --> /tmp/tmpsr4l7thl.rs:20:12\n   |\n20 |     return String::from(chars);\n   |            ^^^^^^^^^^^^ the trait `From<[_; 0]>` is not implemented for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <String as From<&String>>\n             <String as From<&mut str>>\n             <String as From<&str>>\n             <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let chars = []\n  for word in words {\n    let chars_for_word = []\n    for char in word {\n      chars_for_word.push(char)\n    }\n    chars.push(chars_for_word.sort())\n  }\n  return String.join(\" \", chars)\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_n2cr5xg.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let chars = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_n2cr5xg.rs:15:17\n   |\n15 |   let chars = []\n   |                 ^ help: add `;` here\n16 |   for word in words {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_n2cr5xg.rs:17:28\n   |\n17 |     let chars_for_word = []\n   |                            ^ help: add `;` here\n18 |     for char in word {\n   |     --- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp_n2cr5xg.rs:23:10\n   |\n23 |   return String.join(\" \", chars)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::join`\n\nerror[E0277]: `&str` is not an iterator\n  --> /tmp/tmp_n2cr5xg.rs:18:17\n   |\n18 |     for char in word {\n   |                 ^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_n2cr5xg.rs:19:22\n   |\n19 |       chars_for_word.push(char)\n   |                      ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp_n2cr5xg.rs:21:11\n   |\n21 |     chars.push(chars_for_word.sort())\n   |           ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for word in words {\n        let chars_in_word = [];\n        for char in word {\n            chars_in_word.push(char);\n        }\n        chars.push(chars_in_word.sort());\n    }\n    return String.join(\" \", chars);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmpuyllzsco.rs:23:12\n   |\n23 |     return String.join(\" \", chars);\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::join`\n\nerror[E0277]: `&str` is not an iterator\n  --> /tmp/tmpuyllzsco.rs:18:21\n   |\n18 |         for char in word {\n   |                     ^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpuyllzsco.rs:19:27\n   |\n19 |             chars_in_word.push(char);\n   |                           ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpuyllzsco.rs:21:15\n   |\n21 |         chars.push(chars_in_word.sort());\n   |               ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0423, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \")\n    let result = \"\"\n    for word in words {\n        let chars = word.chars()\n        let sorted_chars = chars.sort()\n        result += String.from(sorted_chars)\n    }\n    return result\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_wxkbz6y.rs:14:29\n   |\n14 |     let words = s.split(\" \")\n   |                             ^ help: add `;` here\n15 |     let result = \"\"\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_wxkbz6y.rs:15:20\n   |\n15 |     let result = \"\"\n   |                    ^ help: add `;` here\n16 |     for word in words {\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp_wxkbz6y.rs:17:33\n   |\n17 |         let chars = word.chars()\n   |                                 ^ help: add `;` here\n18 |         let sorted_chars = chars.sort()\n   |         --- unexpected token\n\nerror: expected `;`, found `result`\n  --> /tmp/tmp_wxkbz6y.rs:18:40\n   |\n18 |         let sorted_chars = chars.sort()\n   |                                        ^ help: add `;` here\n19 |         result += String.from(sorted_chars)\n   |         ------ unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp_wxkbz6y.rs:19:19\n   |\n19 |         result += String.from(sorted_chars)\n   |                   ^^^^^^-----\n   |                   |\n   |                   help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp_wxkbz6y.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort()\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_wxkbz6y.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0423, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let new_words = []\n  for word in words {\n    let new_word = \"\"\n    for c in word {\n      new_word += c\n      new_word += new_word.ascii_lower()\n    }\n    new_words.push(new_word)\n  }\n  return String::from(new_words)\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjm9f1420.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let new_words = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjm9f1420.rs:15:21\n   |\n15 |   let new_words = []\n   |                     ^ help: add `;` here\n16 |   for word in words {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjm9f1420.rs:17:22\n   |\n17 |     let new_word = \"\"\n   |                      ^ help: add `;` here\n18 |     for c in word {\n   |     --- unexpected token\n\nerror: expected `;`, found `new_word`\n  --> /tmp/tmpjm9f1420.rs:19:20\n   |\n19 |       new_word += c\n   |                    ^ help: add `;` here\n20 |       new_word += new_word.ascii_lower()\n   |       -------- unexpected token\n\nerror[E0277]: `&str` is not an iterator\n  --> /tmp/tmpjm9f1420.rs:18:14\n   |\n18 |     for c in word {\n   |              ^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpjm9f1420.rs:19:7\n   |\n19 |       new_word += c\n   |       --------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0599]: no method named `ascii_lower` found for reference `&str` in the current scope\n  --> /tmp/tmpjm9f1420.rs:20:28\n   |\n20 |       new_word += new_word.ascii_lower()\n   |                            ^^^^^^^^^^^ help: there is an associated function with a similar name: `make_ascii_lowercase`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpjm9f1420.rs:22:15\n   |\n22 |     new_words.push(new_word)\n   |               ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the trait bound `String: From<[_; 0]>` is not satisfied\n  --> /tmp/tmpjm9f1420.rs:24:10\n   |\n24 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let w of words) {\n        let chars_of_word = w.chars().sort();\n        chars.push(String::from(chars_of_word));\n    }\n    return String::from(chars);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpopjk1fnl.rs:16:10\n   |\n16 |     for (let w of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmpopjk1fnl.rs:16:14\n   |\n16 |     for (let w of words) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpopjk1fnl.rs:16:16\n   |\n16 |     for (let w of words) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpopjk1fnl.rs:16:19\n   |\n16 |     for (let w of words) {\n   |                  -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpopjk1fnl.rs:16:25\n   |\n16 |     for (let w of words) {\n   |                         ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpopjk1fnl.rs:20:5\n   |\n20 |     return String::from(chars);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |     { return String::from(chars); }\n   |     +                             +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let new_word = \"\";\n        for (let c of word) {\n            new_word += c.ascii_value() + c.ascii_value();\n        }\n        new_words.push(new_word);\n    }\n    return String::from(new_words.join(\" \"));\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxmdl8d5n.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpxmdl8d5n.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpxmdl8d5n.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpxmdl8d5n.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxmdl8d5n.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpxmdl8d5n.rs:18:14\n   |\n18 |         for (let c of word) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpxmdl8d5n.rs:18:18\n   |\n18 |         for (let c of word) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpxmdl8d5n.rs:18:20\n   |\n18 |         for (let c of word) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpxmdl8d5n.rs:18:23\n   |\n18 |         for (let c of word) {\n   |                      -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \")\n  let new_words = []\n  for word in words {\n    let chars = word.chars()\n    let new_chars = []\n    for c in chars {\n      new_chars.append(c)\n      new_chars.sort()\n    }\n    new_words.append(String.from(new_chars))\n  }\n  return String.from(new_words)\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwtot88ur.rs:14:27\n   |\n14 |   let words = s.split(\" \")\n   |                           ^ help: add `;` here\n15 |   let new_words = []\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwtot88ur.rs:15:21\n   |\n15 |   let new_words = []\n   |                     ^ help: add `;` here\n16 |   for word in words {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwtot88ur.rs:17:29\n   |\n17 |     let chars = word.chars()\n   |                             ^ help: add `;` here\n18 |     let new_chars = []\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwtot88ur.rs:18:23\n   |\n18 |     let new_chars = []\n   |                       ^ help: add `;` here\n19 |     for c in chars {\n   |     --- unexpected token\n\nerror: expected `;`, found `new_chars`\n  --> /tmp/tmpwtot88ur.rs:20:26\n   |\n20 |       new_chars.append(c)\n   |                          ^ help: add `;` here\n21 |       new_chars.sort()\n   |       --------- unexpected token\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpwtot88ur.rs:23:22\n   |\n23 |     new_words.append(String.from(new_chars))\n   |                      ^^^^^^-----\n   |                      |\n   |                      help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpwtot88ur.rs:25:10\n   |\n25 |   return String.from(new_words)\n   |          ^^^^^^-----\n   |          |\n   |          help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpwtot88ur.rs:20:17\n   |\n20 |       new_chars.append(c)\n   |                 ^^^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `append` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpwtot88ur.rs:23:15\n   |\n23 |     new_words.append(String.from(new_chars))\n   |               ^^^^^^ method not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += sorted_chars.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfh4zgema.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpfh4zgema.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpfh4zgema.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpfh4zgema.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfh4zgema.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpfh4zgema.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let new_chars = [];\n        for (let char of chars) {\n            new_chars.push(char.ascii());\n        }\n        new_words.push(String.from(new_chars));\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpoxf0kgdd.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpoxf0kgdd.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpoxf0kgdd.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpoxf0kgdd.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpoxf0kgdd.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpoxf0kgdd.rs:19:14\n   |\n19 |         for (let char of chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `char`\n  --> /tmp/tmpoxf0kgdd.rs:19:18\n   |\n19 |         for (let char of chars) {\n   |                 -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpoxf0kgdd.rs:19:23\n   |\n19 |         for (let char of chars) {\n   |                      -^^ expected one of `)`, `,`, `@`, or `|`\n   |                      |\n   |                      help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `chars`\n  --> /tmp/tmpoxf0kgdd.rs:19:26\n   |\n19 |         for (let char of chars) {\n   |                         -^^^^^ expected one of `)`, `,`, `@`, or `|`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpvflwnl3m.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpvflwnl3m.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpvflwnl3m.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpvflwnl3m.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpvflwnl3m.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpvflwnl3m.rs:22:5\n   |\n22 |     return String.from(new_words);\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { return String.from(new_words); }\n   |     +                                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp7pq956ey.rs:16:15\n   |\n16 |     for (word of words) {\n   |              -^^ expected one of `)`, `,`, `@`, or `|`\n   |              |\n   |              help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp7pq956ey.rs:16:18\n   |\n16 |     for (word of words) {\n   |                 -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp7pq956ey.rs:16:24\n   |\n16 |     for (word of words) {\n   |                        ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp7pq956ey.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String::from(sorted_chars);\n        new_words.push(new_word);\n    }\n    let new_string = String::from(new_words.join(\" \"));\n    return new_string;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpex5re2s3.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpex5re2s3.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpex5re2s3.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpex5re2s3.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpex5re2s3.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmpex5re2s3.rs:22:5\n   |\n22 |     let new_string = String::from(new_words.join(\" \"));\n   |     ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |     { let new_string = String::from(new_words.join(\" \")); }\n   |     +                                                     +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let w of words) {\n        let chars_of_word = w.chars().map(c => c.asciiValue()).sort();\n        chars.push(String::from(chars_of_word.join(\"\")));\n    }\n    return String::from(chars.join(\" \"));\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpm_zzvvz4.rs:16:10\n   |\n16 |     for (let w of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `w`\n  --> /tmp/tmpm_zzvvz4.rs:16:14\n   |\n16 |     for (let w of words) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpm_zzvvz4.rs:16:16\n   |\n16 |     for (let w of words) {\n   |               -^^ expected one of `)`, `,`, `@`, or `|`\n   |               |\n   |               help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpm_zzvvz4.rs:16:19\n   |\n16 |     for (let w of words) {\n   |                  -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpm_zzvvz4.rs:16:25\n   |\n16 |     for (let w of words) {\n   |                         ^ help: try adding `in` here\n\nerror: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpm_zzvvz4.rs:17:45\n   |\n17 |         let chars_of_word = w.chars().map(c => c.asciiValue()).sort();\n   |                                             ^^ expected one of 8 possible tokens\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += String.from(sorted_chars);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwgv8byx8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwgv8byx8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwgv8byx8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwgv8byx8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwgv8byx8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwgv8byx8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for i in words {\n        let chars_of_word = [];\n        for j in i {\n            chars_of_word.push(j);\n        }\n        chars.push(chars_of_word);\n    }\n    let new_chars = [];\n    for i in chars {\n        let new_chars_of_word = [];\n        for j in i {\n            new_chars_of_word.push(j);\n        }\n        new_chars.push(new_chars_of_word);\n    }\n    let new_words = [];\n    for i in new_chars {\n        let new_words_of_word = [];\n        for j in i {\n            new_words_of_word.push(j);\n        }\n        new_words.push(new_words_of_word);\n    }\n    let new_s = \"\";\n    for i in new_words {\n        new_s += i.join(\"\");\n    }\n    return new_s;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error[E0277]: `&str` is not an iterator\n  --> /tmp/tmpfwiiqjvk.rs:18:18\n   |\n18 |         for j in i {\n   |                  ^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpfwiiqjvk.rs:19:27\n   |\n19 |             chars_of_word.push(j);\n   |                           ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpfwiiqjvk.rs:21:15\n   |\n21 |         chars.push(chars_of_word);\n   |               ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpfwiiqjvk.rs:27:31\n   |\n27 |             new_chars_of_word.push(j);\n   |                               ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpfwiiqjvk.rs:29:19\n   |\n29 |         new_chars.push(new_chars_of_word);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpfwiiqjvk.rs:35:31\n   |\n35 |             new_words_of_word.push(j);\n   |                               ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpfwiiqjvk.rs:37:19\n   |\n37 |         new_words.push(new_words_of_word);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfwiiqjvk.rs:43:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n43 |     return new_s;\n   |            ^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let new_words = [];\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted_chars = chars.sort();\n    let new_word = String.from(sorted_chars);\n    new_words.push(new_word);\n  }\n  return String.join(\" \", new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp38luttbe.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp38luttbe.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp38luttbe.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp38luttbe.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp38luttbe.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp38luttbe.rs:22:3\n   |\n22 |   return String.join(\" \", new_words);\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |   { return String.join(\" \", new_words); }\n   |   +                                     +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for i in words {\n        let chars_of_word = [];\n        for c in i {\n            chars_of_word.push(c);\n        }\n        chars.push(chars_of_word.sort());\n    }\n    let new_string = \"\";\n    for i in chars {\n        new_string += i.join(\"\");\n    }\n    return new_string;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error[E0277]: `&str` is not an iterator\n  --> /tmp/tmpc4n0oeqi.rs:18:18\n   |\n18 |         for c in i {\n   |                  ^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `&str`\n   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpc4n0oeqi.rs:19:27\n   |\n19 |             chars_of_word.push(c);\n   |                           ^^^^ method not found in `[_; 0]`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpc4n0oeqi.rs:21:15\n   |\n21 |         chars.push(chars_of_word.sort());\n   |               ^^^^ method not found in `[_; 0]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc4n0oeqi.rs:27:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n27 |     return new_string;\n   |            ^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        result += String.from(sorted_chars);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwgv8byx8.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpwgv8byx8.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwgv8byx8.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpwgv8byx8.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwgv8byx8.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwgv8byx8.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted_chars = chars.sort();\n    result += sorted_chars.join(\"\");\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp91nx6tnf.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp91nx6tnf.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp91nx6tnf.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp91nx6tnf.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp91nx6tnf.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp91nx6tnf.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = [];\n    for (let word of words) {\n        let chars_of_word = word.chars();\n        for (let i = 0; i < chars_of_word.length; i++) {\n            chars.push(chars_of_word[i]);\n        }\n    }\n    let new_word = \"\";\n    for (let i = 0; i < chars.length; i++) {\n        new_word += chars[i];\n    }\n    return new_word;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpeycuupuz.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpeycuupuz.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpeycuupuz.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpeycuupuz.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpeycuupuz.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpeycuupuz.rs:18:14\n   |\n18 |         for (let i = 0; i < chars_of_word.length; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpeycuupuz.rs:18:18\n   |\n18 |         for (let i = 0; i < chars_of_word.length; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpeycuupuz.rs:18:20\n   |\n18 |         for (let i = 0; i < chars_of_word.length; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpeycuupuz.rs:18:19\n   |\n18 |         for (let i = 0; i < chars_of_word.length; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String.from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmp85mdm4k0.rs:19:24\n   |\n19 |         let new_word = String.from(sorted_chars);\n   |                        ^^^^^^-----\n   |                        |\n   |                        help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp85mdm4k0.rs:22:12\n   |\n22 |     return String.from(new_words);\n   |            ^^^^^^-----\n   |            |\n   |            help: use the path separator to refer to an item: `String::from`\n\nerror[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmp85mdm4k0.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort();\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmp85mdm4k0.rs:20:19\n   |\n20 |         new_words.push(new_word);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0423, E0599.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n  let words = s.split(\" \");\n  let result = \"\";\n  for (let word of words) {\n    let chars = word.chars();\n    let sorted_chars = chars.sort();\n    result += String.from(sorted_chars);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgwzlsxjq.rs:16:8\n   |\n16 |   for (let word of words) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpgwzlsxjq.rs:16:12\n   |\n16 |   for (let word of words) {\n   |           -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpgwzlsxjq.rs:16:17\n   |\n16 |   for (let word of words) {\n   |                -^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpgwzlsxjq.rs:16:20\n   |\n16 |   for (let word of words) {\n   |                   -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgwzlsxjq.rs:16:26\n   |\n16 |   for (let word of words) {\n   |                          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpgwzlsxjq.rs:21:3\n   |\n21 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let chars = s.chars();\n    let result = \"\";\n    for (let i = 0; i < chars.length; i++) {\n        let c = chars[i];\n        let index = chars.indexOf(c);\n        let word = words[index];\n        result += word;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmppxaualj5.rs:17:10\n   |\n17 |     for (let i = 0; i < chars.length; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmppxaualj5.rs:17:14\n   |\n17 |     for (let i = 0; i < chars.length; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmppxaualj5.rs:17:16\n   |\n17 |     for (let i = 0; i < chars.length; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmppxaualj5.rs:17:15\n   |\n17 |     for (let i = 0; i < chars.length; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmppxaualj5.rs:17:16\n   |\n17 |     for (let i = 0; i < chars.length; i++) {\n   |                ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp520v_w1o.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmp520v_w1o.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp520v_w1o.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmp520v_w1o.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp520v_w1o.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp520v_w1o.rs:21:5\n   |\n21 |     return result;\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n21 |     { return result; }\n   |     +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for word in words {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = String::from(sorted_chars);\n        new_words.push(new_word);\n    }\n    return String::from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmpa53sqadc.rs:18:34\n   |\n18 |         let sorted_chars = chars.sort();\n   |                                  ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `push` found for array `[_; 0]` in the current scope\n  --> /tmp/tmpa53sqadc.rs:20:19\n   |\n20 |         new_words.push(new_word);\n   |                   ^^^^ method not found in `[_; 0]`\n\nerror[E0277]: the trait bound `String: From<[_; 0]>` is not satisfied\n  --> /tmp/tmpa53sqadc.rs:22:12\n   |\n22 |     return String::from(new_words);\n   |            ^^^^^^^^^^^^ the trait `From<[_; 0]>` is not implemented for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n             <String as From<&String>>\n             <String as From<&mut str>>\n             <String as From<&str>>\n             <String as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let new_words = [];\n    for (let word of words) {\n        let chars = word.chars();\n        let sorted_chars = chars.sort();\n        let new_word = \"\";\n        for (let c of sorted_chars) {\n            new_word += c;\n        }\n        new_words.push(new_word);\n    }\n    return String.from(new_words);\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664293000,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpewk1oyr0.rs:16:10\n   |\n16 |     for (let word of words) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `word`\n  --> /tmp/tmpewk1oyr0.rs:16:14\n   |\n16 |     for (let word of words) {\n   |             -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpewk1oyr0.rs:16:19\n   |\n16 |     for (let word of words) {\n   |                  -^^ expected one of `)`, `,`, `@`, or `|`\n   |                  |\n   |                  help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `words`\n  --> /tmp/tmpewk1oyr0.rs:16:22\n   |\n16 |     for (let word of words) {\n   |                     -^^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                     |\n   |                     help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpewk1oyr0.rs:16:28\n   |\n16 |     for (let word of words) {\n   |                            ^ help: try adding `in` here\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpewk1oyr0.rs:20:14\n   |\n20 |         for (let c of sorted_chars) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpewk1oyr0.rs:20:18\n   |\n20 |         for (let c of sorted_chars) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpewk1oyr0.rs:20:20\n   |\n20 |         for (let c of sorted_chars) {\n   |                   -^^ expected one of `)`, `,`, `@`, or `|`\n   |                   |\n   |                   help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `sorted_chars`\n  --> /tmp/tmpewk1oyr0.rs:20:23\n   |\n20 |         for (let c of sorted_chars) {\n   |                      -^^^^^^^^^^^^ expected one of `)`, `,`,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(String::from(\"Hi\"))\n/// String::from(\"Hi\")\n/// >>> anti_shuffle(String::from(\"hello\"))\n/// String::from(\"ehllo\")\n/// >>> anti_shuffle(String::from(\"Hello World!!!\"))\n/// String::from(\"Hello !!!Wdlor\")\nfn anti_shuffle(s: String) -> String {\n    let words = s.split(\" \");\n    let result = \"\";\n    for word in words {\n        let chars = word.chars();\n        let sorted = chars.sort();\n        result += sorted.join(\"\");\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = anti_shuffle;\n    assert_eq!(candidate(String::from(\"Hi\")), String::from(\"Hi\"));\n    assert_eq!(candidate(String::from(\"hello\")), String::from(\"ehllo\"));\n    assert_eq!(candidate(String::from(\"number\")), String::from(\"bemnru\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"abcd\"));\n    assert_eq!(candidate(String::from(\"Hello World!!!\")), String::from(\"Hello !!!Wdlor\"));\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hi. My name is Mister Robot. How are you?\")), String::from(\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n",
      "timestamp": 1664292999,
      "stdout": "",
      "stderr": "error[E0599]: no method named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmprn8pwdl_.rs:18:28\n   |\n18 |         let sorted = chars.sort();\n   |                            ^^^^ method not found in `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprn8pwdl_.rs:21:12\n   |\n13 | fn anti_shuffle(s: String) -> String {\n   |                               ------ expected `String` because of return type\n...\n21 |     return result;\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}