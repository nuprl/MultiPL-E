{
  "name": "HumanEval_130_tri",
  "language": "jl",
  "prompt": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n",
  "completions": [
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n % 2 == 0:\n        return Vector{Int64}(1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1, tri(n / 2) + tri(n / 2 - 1) + tri(n / 2 + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 2])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2])\n    else:\n        return Vector{Int64}([1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + n / 2])\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1, tri(n - 2) + tri(n - 1) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2 + 1]\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [3, 1, 2, 8]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n",
    "    if n == 0:\n        return Vector[Int64]()\n    elif n == 1:\n        return Vector[Int64]([1, 3, 2])\n    elif n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    else:\n        return Vector[Int64]([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n == 2:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 0, 0])\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([0])\n    elif n == 1:\n        return Vector{Int64}([1, 3])\n    elif n == 2:\n        return Vector{Int64}([1, 3, 2])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)])\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(1 + tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + (n / 2), 2, 2 + (n / 2)]\n    else:\n        return [1, 1 + (n / 2), 2, 2 + (n / 2)] + tri(n - 1)\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(1, 2)\n    if n % 2 == 0:\n        return Vector{Int64}(1, tri(n / 2) + tri(n / 2 - 1) + tri(n / 2 + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n < 0:\n        return Vector[Int64]()\n    elif n == 0:\n        return Vector[Int64]([1, 0, 0])\n    elif n == 1:\n        return Vector[Int64]([1, 1, 0])\n    elif n == 2:\n        return Vector[Int64]([1, 1, 1])\n    else:\n        return Vector[Int64]([1, 1, 1] + tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2])\n    elif n == 4:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + n % 2, 1 + n / 2 + n % 2 + n % 2]\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2])\n    elif n == 4:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    else:\n        return Vector{Int64}(1, 3) + (n / 2) * (Vector{Int64}(1, 2) + Vector{Int64}(1, 1) + Vector{Int64}(1, 3))\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + (n / 2), 2, 2 + (n / 2) + 1]\n    else:\n        return [1, 1 + (n / 2), 2, 2 + (n / 2) + 1]\n",
    "    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        return [1, 3] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 1 + (n / 2), 0, 0]\n",
    "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [1, 1, 2, 3, 5, 8]\n    else:\n        return [1, 1, 2, 3, 5, 8, 1, 2, 3, 5, 8]\n",
    "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]",
    "    if n < 1:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 3, 2, 8])",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n == 3:\n        return Vector{Int64}(1, 3, 2, 8)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1]) + tri(n - 2) + tri(n - 1)\n    else:\n        return Vector{Int64}([1, 1, 1, 1]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [1, 1 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + 1]\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)])\n",
    "    if n == 0:\n        return Vector[Int64]([0])\n    elif n == 1:\n        return Vector[Int64]([3])\n    elif n == 2:\n        return Vector[Int64]([1, 3])\n    elif n % 2 == 0:\n        return Vector[Int64]([1, 1 + n / 2])\n    else:\n        return Vector[Int64]([1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n + 1) / 2])\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + (n / 2), 2 + (n / 2), tri(n - 2) + tri(n - 1) + tri(n + 1)]\n    else:\n        return [1, tri(n - 1) + tri(n - 2) + tri(n + 1), 2 + (n / 2), tri(n - 2) + tri(n - 1) + tri(n + 1)]",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n + 1) / 2]\n    else:\n        return [1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n - 1) / 2, 1 + (n + 1) / 2]",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector[Int64]([0])\n    if n == 1:\n        return Vector[Int64]([1])\n    if n == 2:\n        return Vector[Int64]([1, 3])\n    if n == 3:\n        return Vector[Int64]([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return []\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1])\n    if n == 2:\n        return Vector[Int64]([1, 3])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 2, 3, 5]) + tri(n - 2)\n    else:\n        return Vector[Int64]([1, 1, 3, 2, 8]) + tri(n - 1) + tri(n - 2)\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)])\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])\n",
    "    if n == 0:\n        return []\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2] + tri(n - 1)\n",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 3, 2, 8])\n",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}([1, n / 2, tri(n / 2)])\n        else:\n            return Vector{Int64}([1, tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)])\n",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 2, 3])\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    else:\n        return Vector{Int64}(1, 3) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1, tri(n / 2) + tri(n / 2 - 1) + tri(n / 2 + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n == 3:\n        return Vector{Int64}(1, 3, 2, 8)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1, 3, 2])\n    if n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 0, 0])\n",
    "    if n == 0:\n        return Vector[Int64]{0}\n    elif n == 1:\n        return Vector[Int64]{3}\n    elif n == 2:\n        return Vector[Int64]{1, 2}\n    else:\n        return Vector[Int64]{1, 3, 2, tri(n - 1) + tri(n - 2) + tri(n + 1)}",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([0])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2,\n                             tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(1 + (n / 2)) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)]\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2])",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([0])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2])\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector[Int64]([0])\n    elif n == 1:\n        return Vector[Int64]([1, 3])\n    elif n == 2:\n        return Vector[Int64]([1, 3, 2])\n    else:\n        return Vector[Int64]([1, 3, 2, 8])\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1]) + tri(n - 2) + tri(n - 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1])\n    if n == 2:\n        return Vector[Int64]([1, 3])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 1 + n / 2])\n    else:\n        return Vector[Int64]([1, 1 + n / 2, 1 + (n - 1) / 2, 1 + (n - 2) / 2 + 1])",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2, 1 + n / 2, 1 + n / 2, 1 + n / 2]\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(1, 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n < 0:\n        return Vector{Int64}()\n    elif n == 0:\n        return Vector{Int64}([1])\n    elif n == 1:\n        return Vector{Int64}([1, 3])\n    elif n == 2:\n        return Vector{Int64}([1, 3, 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])\n",
    "    if n == 0:\n        return Vector[Int64]{0}\n    elif n == 1:\n        return Vector[Int64]{3}\n    elif n == 2:\n        return Vector[Int64]{1, 2}\n    else:\n        return Vector[Int64]{1, 3, 2, tri(n - 1) + tri(n - 2) + tri(n + 1)}",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}([1, 1 + n / 2]) + tri(n - 2)\n        else:\n            return Vector{Int64}([1, 1 + n / 2]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector[Int64]()\n    elif n == 1:\n        return Vector[Int64]([1, 3, 2])\n    elif n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    else:\n        return Vector[Int64]([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector[Int64]()\n    elif n == 1:\n        return Vector[Int64]([1, 3, 2])\n    elif n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    else:\n        return Vector[Int64]([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        return [1, 3] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([0])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector[Int64]([])\n    elif n == 1:\n        return Vector[Int64]([1])\n    elif n == 2:\n        return Vector[Int64]([1, 3])\n    elif n == 3:\n        return Vector[Int64]([1, 3, 2, 8])\n    else:\n        return Vector[Int64]([1, 1 + n / 2, 1 + (n - 1) / 2, 1 + (n - 2) / 2 + 1 + (n - 1) / 2])\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2 + 1]",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return Vector{Int64}\n    return Vector{Int64}",
    "    if n < 1:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 2, 2 + n / 2, 3, 3 + n / 2, 4, 4 + n / 2, 5, 5 + n / 2, 6, 6 + n / 2, 7, 7 + n / 2, 8, 8 + n / 2, 9, 9 + n / 2, 10, 10 + n / 2, 11, 11 + n / 2, 12, 12 + n / 2, 13, 13 + n / 2, 14, 14 + n / 2, 15, 15 + n / 2, 16, 16 + n / 2, 17, 17 + n / 2, 18, 18 + n / 2, 19, 19 + n / 2, 20, 20 + n / 2, 21, 21 + n / 2, 22, 22 + n / 2, 23, 23 + n / 2, 24, 24 + n / 2, 25, 25 + n / 2, 26, 26 + n / 2, 27, 27 + n / 2, 28, 28 + n / 2, 29, 29 + n / 2, 30, 30 + n / 2, 31, 31 + n / 2, 32, 32 + n / 2, 33, 33 + n / 2, 34, 34 + n / 2, 35, 35 + n / 2, 36, 36 + n / 2, 37, 37 + n / 2, 38, 38 + n / 2, 39, 39 + n / 2, 40, 40 + n / 2, 41, 41 + n / 2, 42, 42 + n / 2, 43, 43 + n / 2, 44, 44 + n / 2, 45, 45 + n / 2, 46, 46 + n / 2, 47, 47 + n / 2, 48, 48 + n / 2, 49, 49 + n / 2, 50, 50 + n / 2, 51, 51 + n / 2, 52, 52 + n / 2, 53, 53 + n / 2,",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + (n / 2), 2 + (n / 2), tri(n - 2) + tri(n - 1) + tri(n + 1)]\n    else:\n        return [1, 1 + (n / 2), 2 + (n / 2), tri(n - 2) + tri(n - 1) + tri(n + 1)]\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2]\n    else:\n        return [1, 1 + n / 2, 1 + n / 2, 1 + n / 2 + 1]\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        return Vector{Int64}()\n    elif n == 0:\n        return Vector{Int64}([1])\n    elif n == 1:\n        return Vector{Int64}([1, 3])\n    elif n == 2:\n        return Vector{Int64}([1, 3, 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n == 3:\n        return Vector{Int64}(1, 3, 2, 8)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2])",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2])\n    elif n == 4:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n == 2:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2, 2, tri(n - 2) + tri(n - 1) + tri(n + 1)])\n    else:\n        return Vector{Int64}([1, tri(n - 1) + tri(n - 2) + tri(n + 1), 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1, 3, 2, 8])\n    elif n == 2:\n        return Vector{Int64}([1, 3, 2, 8])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    elif n % 2 == 0:\n        return Vector{Int64}([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + 1])",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}",
    "    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1, 3, 2])\n    elif n == 2:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + (n - 2) / 2, 1 + (n - 4) / 2]\n    else:\n        return [1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n - 3) / 2]\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)])\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector[Int64]()\n    elif n == 1:\n        return Vector[Int64]([1, 3, 2])\n    elif n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    else:\n        return Vector[Int64]([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector[Int64]([0])\n    elif n == 1:\n        return Vector[Int64]([1])\n    elif n == 2:\n        return Vector[Int64]([1, 3])\n    else:\n        if n % 2 == 0:\n            return Vector[Int64]([1, 1 + n / 2]) + tri(n - 2)\n        else:\n            return Vector[Int64]([1, 1 + n / 2, 1 + n / 2 + 1]) + tri(n - 1) + tri(n - 2)\n",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]{0}\n    if n == 1:\n        return Vector[Int64]{1, 3}\n    if n == 2:\n        return Vector[Int64]{1, 3, 2, 8}\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([0])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)])",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 2, 3])\n    else:\n        return Vector{Int64}([1, 1, 1, 2, 3, 2, 1])\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1])\n    if n == 2:\n        return Vector[Int64]([1, 3])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 1, 2, 2, 3])\n    else:\n        return Vector[Int64]([1, 1, 2, 3, 3, 4]) + tri(n - 1) + tri(n - 2) + tri(n + 1)",
    "    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        return [1, 3] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]()\n    if n == 1:\n        return Vector[Int64]([1, 3, 2])\n    if n == 2:\n        return Vector[Int64]([1, 3, 2, 8])\n    if n == 3:\n        return Vector[Int64]([1, 3, 2, 8, 13])\n    if n == 4:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21])\n    if n == 5:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34])\n    if n == 6:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55])\n    if n == 7:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89])\n    if n == 8:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144])\n    if n == 9:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233])\n    if n == 10:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377])\n    if n == 11:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610])\n    if n == 12:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987])\n    if n == 13:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597])\n    if n == 14:\n        return Vector[Int64]([1, 3, 2, 8, 13, 21, 34, 55, 89",
    "    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n == 3:\n        return Vector{Int64}\n    if n == 4:\n        return Vector{Int64}\n    if n == 5:\n        return Vector{Int64}\n    if n == 6:\n        return Vector{Int64}\n    if n == 7:\n        return Vector{Int64}\n    if n == 8:\n        return Vector{Int64}\n    if n == 9:\n        return Vector{Int64}\n    if n == 10:\n        return Vector{Int64}\n    if n == 11:\n        return Vector{Int64}\n    if n == 12:\n        return Vector{Int64}\n    if n == 13:\n        return Vector{Int64}\n    if n == 14:\n        return Vector{Int64}\n    if n == 15:\n        return Vector{Int64}\n    if n == 16:\n        return Vector{Int64}\n    if n == 17:\n        return Vector{Int64}\n    if n == 18:\n        return Vector{Int64}\n    if n == 19:\n        return Vector{Int64}\n    if n == 20:\n        return Vector{Int64}\n    if n == 21:\n        return Vector{Int64}\n    if n == 22:\n        return Vector{Int64}\n    if n == 23:\n        return Vector{Int64}\n    if n == 24:\n        return Vector{Int64}\n    if n == 25:\n        return Vector{Int64}\n    if n == 26:\n        return Vector{Int64}\n    if n == 27:\n        return Vector{Int64}\n    if n == 28:\n        return Vector{Int64}\n    if n == 29:\n        return Vector{Int64}\n    if n == 30:\n        return Vector{Int64}\n    if n == 31:\n        return Vector{Int64}\n    if n == 32:\n        return Vector{Int64}\n    if n == 33:\n        return Vector{Int64}\n    if",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    elif n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])",
    "    if n < 0:\n        raise Exception(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    elif n == 4:\n        return Vector{Int64}\n    elif n == 5:\n        return Vector{Int64}\n    elif n == 6:\n        return Vector{Int64}\n    elif n == 7:\n        return Vector{Int64}\n    elif n == 8:\n        return Vector{Int64}\n    elif n == 9:\n        return Vector{Int64}\n    elif n == 10:\n        return Vector{Int64}\n    elif n == 11:\n        return Vector{Int64}\n    elif n == 12:\n        return Vector{Int64}\n    elif n == 13:\n        return Vector{Int64}\n    elif n == 14:\n        return Vector{Int64}\n    elif n == 15:\n        return Vector{Int64}\n    elif n == 16:\n        return Vector{Int64}\n    elif n == 17:\n        return Vector{Int64}\n    elif n == 18:\n        return Vector{Int64}\n    elif n == 19:\n        return Vector{Int64}\n    elif n == 20:\n        return Vector{Int64}\n    elif n == 21:\n        return Vector{Int64}\n    elif n == 22:\n        return Vector{Int64}\n    elif n == 23:\n        return Vector{Int64}\n    elif n == 24:\n        return Vector{Int64}\n    elif n == 25:\n        return Vector{Int64}\n    elif n == 26:\n        return Vector{Int64}\n    elif n == 27:\n        return Vector{Int64}\n    elif n == 28:\n        return Vector{Int64}\n    elif n == 29:\n        return Vector{Int64}\n    elif n == 30:\n        return Vector{Int64}\n    elif n == 31:\n        return Vector{Int64}\n    ",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}(1 + n / 2) + tri(n - 2) + tri(n + 1)\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1, 2, 3])\n    else:\n        return Vector{Int64}([1, 1, 1, 2, 3]) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector[Int64]([0])\n    if n == 1:\n        return Vector[Int64]([1, 3])\n    if n == 2:\n        return Vector[Int64]([1, 2, 8])\n    if n % 2 == 0:\n        return Vector[Int64]([1, 3, 2, 8]) + tri(n - 1) + tri(n - 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n == 3:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 1 + n / 2, 1 + (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)]\n    else:\n        return [1, 1 + (n - 1) / 2, 1 + (n - 1) / 2 + (n - 1) / 2, 1 + (n - 1) / 2 + (n - 1) / 2 + (n - 1) / 2]",
    "    if n == 0:\n        return Vector{Int64}(1)\n    elif n == 1:\n        return Vector{Int64}(3)\n    elif n == 2:\n        return Vector{Int64}(2)\n    else:\n        return Vector{Int64}(1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    elif n == 3:\n        return Vector{Int64}([1, 3, 2, 8])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)])\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return Vector{Int64}\n    else:\n        return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\n",
    "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 3])\n    else:\n        return Vector{Int64}([1, 1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1)])",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(1 + n / 2)\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))",
    "    if n < 0:\n        raise Exception(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1)) + tri(n - 1)\n",
    "    if n == 0:\n        return Vector{Int64}([])\n    elif n == 1:\n        return Vector{Int64}([3])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        if n % 2 == 0:\n            return Vector{Int64}([1, 1 + n / 2]) + tri(n - 2)\n        else:\n            return Vector{Int64}([1, tri(n - 1) + tri(n - 2) + tri(n + 1)])",
    "    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return Vector{Int64}(1)\n    if n == 1:\n        return Vector{Int64}(3)\n    if n == 2:\n        return Vector{Int64}(2)\n    if n % 2 == 0:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    else:\n        return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1)) + tri(n - 1)",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        return [1, 3, 2, 8] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
    "    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n == 2:\n        return Vector{Int64}\n    else:\n        return Vector{Int64}",
    "    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n == 2:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return Vector{Int64}\n    return Vector{Int64}",
    "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return Vector{Int64}([])\n    if n == 1:\n        return Vector{Int64}([1])\n    if n == 2:\n        return Vector{Int64}([1, 3])\n    if n % 2 == 0:\n        return Vector{Int64}([1, 1 + n / 2])\n    else:\n        return Vector{Int64}([1, 1 + n / 2, 1 + n / 2 + n / 2])\n",
    "    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([1])\n    elif n == 2:\n        return Vector{Int64}([1, 2])\n    else:\n        return Vector{Int64}([1, 3, 2, 8])\n",
    "    if n == 0:\n        return Vector[Int64]([0])\n    elif n == 1:\n        return Vector[Int64]([1, 3])\n    elif n == 2:\n        return Vector[Int64]([1, 2])\n    elif n % 2 == 0:\n        return Vector[Int64]([1, 1 + n / 2])\n    else:\n        return Vector[Int64]([1, 1 + (n - 1) / 2, 1 + (n - 2) / 2, 1 + (n + 1) / 2])"
  ],
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ]
}