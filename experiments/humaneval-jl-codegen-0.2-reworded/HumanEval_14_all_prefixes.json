{
  "name": "HumanEval_14_all_prefixes",
  "language": "jl",
  "prompt": "\"\"\" Return vector of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nfunction all_prefixes(string::String)::Vector{String} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n",
  "completions": [
    "    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])",
    "    if string == \"\"\n        return []\n    else\n        return [string[:i] for i in range(1, len(string) + 1)]",
    "    if string == \"\" then return []\n    all_prefixes(string[1:]) + [string[0]]",
    "    return Vector.range(0, len(string) - 1).map(i => string[i:])",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.range(0, len(string) - 1)",
    "    if string = \"\" then return []\n    result = []\n    for i = 1 to len(string) do\n        if string[i] = \"\" then\n            result = append(result, \"\")\n        else\n            result = append(result, string[1:i])\n    return result",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    if string = \"\" then return []\n    result = []\n    for i = 1 to len(string) do\n        if string[i] = \"\" then\n            result = result + [string[:i]]\n        else\n            result = result + [string[:i]]\n    return result",
    "    if string = \"\" then return []\n    result = []\n    for i = 1 to len(string) do\n        result = result + [string[0:i]]\n    return result",
    "    return Vector.map(String, string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(",
    "    if string = \"\" then return []\n    else return [string[0]] + all_prefixes(string[1:])",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return [string[0:i] for i in range(1, len(string)+1)]",
    "    return [string[:i] for i in range(1, len(string) + 1)]",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.map(String, string.split(\"\"))",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    return [string]",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.range(0, len(string) - 1, 1)",
    "    if string == \"\"\n        return []\n    else\n        return [string] + all_prefixes(string[1:])",
    "    return Vector.range(0, len(string) - 1).map(i => string[i:])",
    "    return [string[0:i] for i in range(1, len(string)+1)]",
    "    if string = \"\" then return []\n    else return [string] + all_prefixes(string[1:])",
    "    return Vector.new(string.split(\"\"))",
    "    if string = \"\" then return []\n    return [string[0]..] ++ all_prefixes(string[1..])",
    "    if len(string) == 0:\n        return []\n    else:\n        return [string[:i] for i in range(1, len(string) + 1)]",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    return Vector.range(0, len(string))::string[0..i]",
    "    return Vector.range(0, len(string) - 1).map(i => string[i:])",
    "    return [string.substring(0, i) for i in range(1, len(string) + 1)]",
    "    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        if string[:i] = string[:i]:\n            result.append(string[:i])\n    return result",
    "    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        if string[:i] = string[:i]:\n            result.append(string[:i])\n    return result",
    "    if string == \"\"\n        return []\n    else\n        return [string[:i] for i in range(1, len(string) + 1)]",
    "    if string = \"\" then return []\n    result = []\n    for i = 0 to len(string) - 1 do\n        if string[i] = \" \" then\n            result = result + [string[0:i]]\n        end if\n    end for\n    return result",
    "    return Vector.range(0, len(string) - 1)",
    "    return [string.substring(0, i) for i in range(1, len(string) + 1)]",
    "    return [string.substr(0, i) for i in range(1, len(string) + 1)]",
    "    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
    "    return [string[0:i] for i in range(1, len(string)+1)]",
    "    if string = \"\" then return []\n    else return [string[0]..] + all_prefixes(string[1..])",
    "    if string = \"\" then return []\n    else return [string[0]..] + all_prefixes(string[1..])",
    "    return Vector.range(0, len(string) - 1).map(i => string[i:])",
    "    return Vector.range(0, len(string) - 1)",
    "    if string = \"\" then return []\n    else return [string[0]] + all_prefixes(string[1:])",
    "    return [string[0:i] for i in range(1, len(string)+1)]",
    "    return Vector.new(string.split(\"\"))",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return [string.substring(0, i) for i in range(1, len(string) + 1)]",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return Vector.range(0, len(string) - 1)",
    "    return Vector.range(0, len(string) - 1)",
    "    return [string]",
    "    return Vector.map(string.substring, string.split(\"\"))",
    "    return Vector.map(string.substring, string.split(\"\"))",
    "    if string = \"\" then return []\n    all_prefixes = []\n    for i in range(1, len(string) + 1):\n        all_prefixes.append(string[:i])\n    return all_prefixes",
    "    return Vector.map(String, string.split(\"\"))",
    "    return Vector.range(0, len(string) - 1).map(\n        (i) -> string[i:i + 1]\n    )",
    "    return [string[:i] for i in range(1, len(string) + 1)]",
    "    return Vector.range(0, len(string) - 1).map(i => string[i] + string[i + 1])",
    "    return Vector.range(0, len(string) - 1).map(i => string[i:])",
    "    if string = \"\" then return []\n    return all_prefixes(string[1:]) + [string[0]]",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))",
    "    return Vector.map(string.substring, string.split(\"\"))",
    "    return [string]",
    "    return Vector.range(0, len(string) - 1).map(i => string[i:])",
    "    if string = \"\" then return []\n    return [string[0]..] ++ all_prefixes(string[1..])",
    "    if string == \"\" then return []\n    else return all_prefixes(string[1:]) + [string[0]]",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.range(0, len(string) - 1).map(i => string[i:i + 1])",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return Vector.range(0, len(string) - 1)",
    "    return Vector.range(0, len(string) - 1)",
    "    if string = \"\" then return []\n    else return [string[0]..] + all_prefixes(string[1..])",
    "    return Vector.map(lambda x: x, Vector.range(0, len(string) - 1))",
    "    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.map(string.substring, string.split(\"\"))",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return Vector.map(string.substring, string.split(\"\"))",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))",
    "    return Vector.map(string.substring, string, 1, len(string))",
    "    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])",
    "    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.range(0, len(string) - 1, 1)",
    "    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        if string[:i] = string[:i]:\n            result.append(string[:i])\n    return result",
    "    return Vector.map(String, string.split(\"\"))",
    "    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
    "    return [string[:i] for i in range(1, len(string) + 1)]",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    if len(string) == 0:\n        return []\n    else:\n        return [string[:i] for i in range(1, len(string) + 1)]",
    "    if string == \"\" then\n        return []\n    else\n        return [string[0]..] + all_prefixes(string[1..])",
    "    return Vector.range(0, len(string) - 1).map(\n        i -> string[i:i + 1]\n    )",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return [string[0:i] for i in range(1, len(string))]",
    "    return Vector.range(0, len(string) - 1)",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    if string = \"\" then return []\n    else return [string[0]] + all_prefixes(string[1:])",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return [string.substring(0, i) for i in range(1, len(string) + 1)]",
    "    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])",
    "    if string = \"\" then return []\n    else return [string[0]..] + all_prefixes(string[1..])",
    "    return Vector.range(0, len(string) - 1)",
    "    return [string]",
    "    return Vector.range(0, len(string) - 1, 1)",
    "    return Vector.range(0, len(string) - 1, 1)",
    "    return Vector.new(string.split(\"\")).map(lambda x: x + \"\")",
    "    return Vector.map(String, string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(string.split(string.join(",
    "    return Vector.range(0, len(string) - 1).map(\n        (i) -> string[i:i + 1]\n    )",
    "    if string = \"\" then return []\n    return [string[0]..] ++ all_prefixes(string[1..])",
    "    return Vector.map(string.substring, string.split(\"\"), 1)",
    "    if string = \"\" then return []\n    else return [string[0]] + all_prefixes(string[1:])",
    "    return [string]",
    "    return Vector.range(0, len(string) - 1)",
    "    return [string[0:i] for i in range(1, len(string)+1)]",
    "    return [string.substr(0, i) for i in range(1, len(string) + 1)]",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return [string]",
    "    return Vector.range(0, len(string) - 1).map(\n        (i) -> string[i:i + 1]\n    )",
    "    return Vector.range(0, len(string) - 1).map(i => string[i:])",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return [string.substring(0, i) for i in range(1, len(string) + 1)]",
    "    if len(string) == 0:\n        return []\n    else:\n        return [string[0]] + all_prefixes(string[1:])",
    "    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])",
    "    return Vector.range(0, len(string) - 1).map(i => string[i] + string[i + 1])",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))",
    "    if string == \"\" \n        return [] \n    else: \n        return [string] + all_prefixes(string[1:]) ",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return [string]",
    "    if len(string) == 0:\n        return []\n    else:\n        return [string[:i] for i in range(1, len(string) + 1)]",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return Vector.range(0, len(string) - 1).map(\n        (i) -> string[0:i + 1]\n    )",
    "    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])",
    "    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    if string == \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        if string[:i] == string:\n            result.append(string[:i])\n    return result",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    if string = \"\" then return []\n    return [string[0]] + all_prefixes(string[1:])",
    "    return Vector.new(string.split(\"\"))",
    "    return [string]",
    "    return Vector.new(string.split(\"\"))",
    "    if string = \"\" then return []\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
    "    return Vector.range(0, len(string) - 1)",
    "    return [string[0:i] for i in range(1, len(string)+1)]",
    "    if string = \"\" then return []\n    else return [string[0]] + all_prefixes(string[1:])",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return [string[0:i] for i in range(1, len(string)+1)]",
    "    return [string[0:i] for i in range(1, len(string)+1)]",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    if string == \"\"\n        return []\n    else\n        return [string[:i] for i in range(1, len(string) + 1)]",
    "    return [string[:i] for i in range(1, len(string) + 1)]",
    "    if string = \"\" then return []\n    all_prefixes = []\n    i = 0\n    while i < len(string):\n        all_prefixes = append(all_prefixes, string[0:i+1])\n        i = i + 1\n    return all_prefixes",
    "    return Vector.range(0, len(string) - 1)",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return Vector.map(lambda x: x, Vector.range(0, len(string)))",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.map(string.substring, string.split(\"\"))",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    if string == \"\" then return []\n    else return [string[0]..] + all_prefixes(string[1..])",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return [string.substring(0, i) for i in range(1, len(string) + 1)]",
    "    if string = \"\" then return []\n    all_prefixes = []\n    i = 0\n    while i < len(string):\n        all_prefixes = all_prefixes + [string[:i+1]]\n        i = i + 1\n    return all_prefixes",
    "    if string = \"\" then return []\n    else return [string[0]..] ++ all_prefixes(string[1..])",
    "    return Vector.map(lambda x: x, string.split(\"\"))",
    "    return Vector.range(0, len(string) - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    return [string[0:i] for i in range(1, len(string) + 1)]",
    "    return Vector.range(0, len(string) - 1).map(i => string[i] + string[i + 1])",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    def all_prefixes(string):\n        if len(string) == 0:\n            return []\n        else:\n            return [string[:i] for i in range(1, len(string) + 1)]\n    return all_prefixes(string)",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string) + 1))",
    "    return Vector.map(string.substring, string, 0, string.length)",
    "    return Vector.range(0, len(string) - 1).map(\n        (i) -> string[i:i + 1]\n    )",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    if string = \"\" then return []\n    all_prefixes(string[1:]) + [string[1:]]",
    "    return Vector.range(0, len(string) - 1)",
    "    return Vector.map(lambda x: x, string.split(\"\"))",
    "    return Vector.map(string.substring(0, i), i)",
    "    return [string[:i] for i in range(1, len(string) + 1)]",
    "    return Vector.range(0, len(string) - 1).map(lambda i: string[i:])",
    "    if string = \"\" then return []\n    return [string[0]..] ++ all_prefixes(string[1..])",
    "    return Vector.map(string.substring(0, i) for i in range(1, len(string)))",
    "    return Vector.range(0, len(string) - 1)",
    "    if len(string) == 0:\n        return []\n    else:\n        return [string[:i] for i in range(1, len(string) + 1)]",
    "    if string = \"\" then return []\n    return [string[0]] + all_prefixes(string[1:])"
  ],
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ]
}