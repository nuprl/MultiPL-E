{
  "name": "HumanEval_118_get_closest_vowel",
  "language": "jl",
  "prompt": "\"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    >>> get_closest_vowel(\"yogurt\")\n    \"u\"\n    >>> get_closest_vowel(\"FULL\")\n    \"U\"\n    >>> get_closest_vowel(\"quick\")\n    \"\"\n    >>> get_closest_vowel(\"ab\")\n    \"\"\n    \"\"\"\nfunction get_closest_vowel(word::String)::String \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n",
  "completions": [
    "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"",
    "    if word[0] == 'a' or word[0] == 'e' or word[0] == 'i' or word[0] == 'o' or word[0] == 'u' or word[0] == 'y':\n        return \"\"\n    if word[-1] == 'a' or word[-1] == 'e' or word[-1] == 'i' or word[-1] == 'o' or word[-1] == 'u' or word[-1] == 'y':\n        return \"\"\n    for i in range(len(word) - 1):\n        if word[i] == 'a' or word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u' or word[i] == 'y':\n            return word[i+1]\n    return \"\"",
    "    if word[0] == \" \" or word[len(word) - 1] == \" \":\n        return \"\"\n    \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print (\"Usage: ./get_closest_vowel.py string\")\n        sys.exit()\n    \n    print (get_closest_vowel(sys.argv[1]))\n",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n        elif word[i] in vowels:\n            return word[i]\n        elif word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    if word is empty:\n        return \"\"\n    else:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n        elif word[i] in vowels:\n            return word[i]\n        elif word[i+1] in vowels:\n            return word[i+1]\n        else:\n            continue\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_lower = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_upper = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    vowels_mixed = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_mixed_lower = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_mixed_upper = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    \n    word = word.toLowerCase()\n    word = word.replace(\" \", \"\")\n    \n    if word[0] in vowels:\n        return \"\"\n    if word[-1] in vowels:\n        return \"\"\n    \n    if word[0] in vowels_lower:\n        return \"\"\n    if word[-1] in vowels_lower:\n        return \"\"\n    \n    if word[0] in vowels_upper:\n        return \"\"\n    if word[-1] in vowels_upper:\n        return \"\"\n    \n    if word[0] in vowels_mixed:\n        return \"\"\n    if word[-1] in vowels_mixed:\n        return \"\"\n    \n    for i in range(1, len(word) - 1):\n        if word[i] in vowels_lower and word[i + 1] in vowels_lower:\n            return \"\"\n        if word[i] in vowels_upper and word[i + 1] in vowels_upper:\n            return \"\"\n        if word[i] in vowels_mixed and word[i + 1] in vowels_mixed:\n            return \"\"\n    \n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] in vowels:\n                return word[i+1]\n        return \"\"\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    # Check if the word is empty\n    if word == None or len(word) == 0:\n        return \"\"\n    # Check if the word is a single character\n    if len(word) == 1:\n        return \"\"\n    # Check if the word is a single vowel\n    if word[0] == word[len(word) - 1] and word[0] in \"aeiou\":\n        return word[0]\n    # Check if the word is a single consonant\n    if word[0] != word[len(word) - 1] and word[0] in \"bcdfghjklmnpqrstvwxyz\":\n        return word[0]\n    # Check if the word is a single consonant\n    if word[0] != word[len(word) - 1] and word[0] in \"bcdfghjklmnpqrstvwxyz\":\n        return word[0]\n    # Check if the word is a single consonant\n    if word[0] != word[len(word) - 1] and word[0] in \"bcdfghjklmnpqrstvwxyz\":\n        return word[0]\n    # Check if the word is a single consonant\n    if word[0] != word[len(word) - 1] and word[0] in \"bcdfghjklmnpqrstvwxyz\":\n        return word[0]\n    # Check if the word is a single consonant\n    if word[0] != word[len(word) - 1] and word[0] in \"bcdfghjklmnpqrstvwxyz\":\n        return word[0]\n    # Check if the word is a single consonant\n    if word[0] != word[len(word) - 1] and word[0] in \"bcdfghjklmnpqrstvwxyz\":\n        return word[0]\n    # Check if the word is a single consonant\n    if word[0] != word[len(word) - 1] and word[0] in \"bcdfghjklmnpqrstvwxyz\":\n        return word[0]\n    # Check if the word is a",
    "    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let vowels_count = 0;\n        let consonants = [];\n        let consonants_count = 0;\n        let i = word.length - 1;\n        while (i >= 0)\n        {\n            if (vowels.indexOf(word[i]) >= 0)\n            {\n                vowels_count++;\n            }\n            else if (vowels.indexOf(word[i]) < 0)\n            {\n                consonants.push(word[i]);\n                consonants_count++;\n            }\n            i--;\n        }\n        if (vowels_count == 0)\n        {\n            return \"\";\n        }\n        else if (vowels_count == 1)\n        {\n            return vowels[0];\n        }\n        else\n        {\n            let closest_vowel = \"\";\n            let closest_vowel_distance = 99999;\n            for (let vowel of vowels)\n            {\n                let vowel_distance = 0;\n                for (let consonant of consonants)\n                {\n                    vowel_distance += Math.abs(vowel.charCodeAt(0) - consonant.charCodeAt(0));\n                }\n                if (vowel_distance < closest_vowel_distance)\n                {\n                    closest_vowel = vowel;\n                    closest_vowel_distance = vowel_distance;\n                }\n            }\n            return closest_vowel;\n        }\n    }\n\"\"\"\n",
    "    if word[0] == word[-1] == ' ':\n        return \"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] != ' ' and word[i + 1] != ' ':\n            return word[i]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    else:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i]\n            elif word[i] not in vowels and word[i+1] in vowels:\n                return word[i+1]\n            else:\n                continue",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n        if i > 0 and word[i-1] not in vowels:\n            for j in range(i+1, len(word)):\n                if word[j] in vowels:\n                    return word[j]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    if word is empty:\n        return \"\"\n    else:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
    "    # Write your code here\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let vowels_count = 0;\n        let consonants = [];\n        let consonants_count = 0;\n        let consonant_index = 0;\n        let vowel_index = 0;\n        let consonant_index_end = 0;\n        let vowel_index_end = 0;\n        let result = \"\";\n        let word_length = word.length;\n        for (let i = 0; i < word_length; i++) {\n            let current_char = word[i];\n            if (vowels.indexOf(current_char) > -1) {\n                vowels_count++;\n                vowel_index = i;\n            } else if (current_char === \" \") {\n                vowels_count = 0;\n                vowel_index = 0;\n            } else {\n                consonants.push(current_char);\n                consonants_count++;\n                consonant_index = i;\n                if (consonants_count === 2) {\n                    consonant_index_end = i;\n                }\n            }\n        }\n        if (vowels_count === 0) {\n            return \"\";\n        }\n        if (consonants_count === 0) {\n            return word;\n        }\n        if (consonant_index_end === 0) {\n            return word;\n        }\n        for (let i = consonant_index_end; i >= consonant_index; i--) {\n            let current_char = word[i];\n            if (vowels.indexOf(current_char) > -1) {\n                vowels_count++;\n                vowel_index = i;\n            }\n        }\n        if (vowels_count === 0) {\n            return \"\";\n        }\n        if (vowel_index === 0) {\n            return word;\n        }\n        for (let i = vowel_index; i <= consonant_index_end; i++) {\n            let current_char = word[i];\n            if (vowels.indexOf",
    "    if word is empty return \"\"\n    if word[0] is not a vowel return \"\"\n    if word[len(word)-1] is not a vowel return \"\"\n    if word[len(word)-2] is not a consonant return word[len(word)-1]\n    else:\n        for i in range(len(word)-2,0,-1):\n            if word[i] is a consonant and word[i+1] is a vowel:\n                return word[i+1]\n        return \"\"",
    "    # Your function should return the closest vowel that stands between two consonants \n    # from the right side of the word.\n    # If there is no such vowel, return an empty string.\n    # The word is given as a String.\n    # The vowels are 'a', 'e', 'i', 'o', 'u'.\n    # The consonants are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'.\n    # The vowels are case sensitive.\n    # The consonants are case sensitive.\n    # The word is case sensitive.\n    # The vowels and consonants are both in lower case.\n    # The word contains only English letters.\n    # The word is guaranteed to be non-empty.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one vowel and one consonant.\n    # The word is guaranteed to have at least one",
    "    {\n        let vowels = \"aeiouAEIOU\";\n        let vowels_count = vowels.length;\n        let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        let consonants_count = consonants.length;\n        let i = 0;\n        let j = 0;\n        let k = 0;\n        let l = 0;\n        let m = 0;\n        let n = 0;\n        let o = 0;\n        let p = 0;\n        let q = 0;\n        let r = 0;\n        let s = 0;\n        let t = 0;\n        let u = 0;\n        let v = 0;\n        let w = 0;\n        let x = 0;\n        let y = 0;\n        let z = 0;\n        let consonant = \"\";\n        let vowel = \"\";\n        let result = \"\";\n        let temp = \"\";\n        let temp_count = 0;\n        let temp_index = 0;\n        let temp_index_count = 0;\n        let temp_index_index = 0;\n        let temp_index_index_count = 0;\n        let temp_index_index_index = 0;\n        let temp_index_index_index_count = 0;\n        let temp_index_index_index_index = 0;\n        let temp_index_index_index_index_count = 0;\n        let temp_index_index_index_index_index = 0;\n        let temp_index_index_index_index_index_count = 0;\n        let temp_index_index_index_index_index_index = 0;\n        let temp_index_index_index_index_index_index_count = 0;\n        let temp_index_index_index_index_index_index_index = 0;\n        let temp_index_index_index_index_index_index_index_count = 0;\n        let temp_index_index_index_index_index_index_index_index = 0;\n        let temp_index_index_index_index_index_index_index_index_count = 0",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    if word is empty\n        return \"\"\n    else\n        return word[0]\n        \n    for i in range(1, len(word)):\n        if word[i] == word[i-1]:\n            continue\n        else:\n            return word[i]\n            \n    return \"\"",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(1, len(word)):\n        if word[i-1] in vowels and word[i] not in vowels:\n            return word[i]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n        if word[i] in vowels:\n            return word[i]\n        if word[i] == word[i+1]:\n            return word[i]\n    return \"\"",
    "    # Write your code here\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./ch3.py string\"\n        exit(1)\n    \n    word = sys.argv[1]\n    print get_closest_vowel(word)\n",
    "    if word is empty:\n        return \"\"\n    else:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"\n",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let vowels_count = 0;\n        let consonants = [];\n        let consonants_count = 0;\n        let consonant_index = 0;\n        let vowel_index = 0;\n        let word_length = word.length;\n        for (let i = 0; i < word_length; i++) {\n            if (vowels.indexOf(word[i]) !== -1) {\n                vowels_count++;\n                vowel_index = i;\n            } else if (consonants.indexOf(word[i]) === -1) {\n                consonants.push(word[i]);\n                consonants_count++;\n                consonant_index = i;\n            }\n        }\n        if (vowels_count === 0 || consonants_count === 0) {\n            return \"\";\n        }\n        let closest_vowel = \"\";\n        let closest_vowel_index = 0;\n        let closest_vowel_distance = word_length;\n        for (let i = consonant_index + 1; i < word_length; i++) {\n            if (vowels.indexOf(word[i]) !== -1) {\n                let distance = i - vowel_index;\n                if (distance < closest_vowel_distance) {\n                    closest_vowel_distance = distance;\n                    closest_vowel_index = i;\n                    closest_vowel = word[i];\n                }\n            }\n        }\n        return closest_vowel;\n    }\n\"\"\"\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n        elif word[i] in vowels:\n            return word[i]\n    return \"\"",
    "    if word[0] == 'a' or word[0] == 'e' or word[0] == 'i' or word[0] == 'o' or word[0] == 'u' or word[0] == 'y':\n        return \"\"\n    if word[-1] == 'a' or word[-1] == 'e' or word[-1] == 'i' or word[-1] == 'o' or word[-1] == 'u' or word[-1] == 'y':\n        return \"\"\n    if word[1] == 'a' or word[1] == 'e' or word[1] == 'i' or word[1] == 'o' or word[1] == 'u' or word[1] == 'y':\n        return \"\"\n    if word[-2] == 'a' or word[-2] == 'e' or word[-2] == 'i' or word[-2] == 'o' or word[-2] == 'u' or word[-2] == 'y':\n        return \"\"\n    if word[2] == 'a' or word[2] == 'e' or word[2] == 'i' or word[2] == 'o' or word[2] == 'u' or word[2] == 'y':\n        return \"\"\n    if word[-3] == 'a' or word[-3] == 'e' or word[-3] == 'i' or word[-3] == 'o' or word[-3] == 'u' or word[-3] == 'y':\n        return \"\"\n    if word[3] == 'a' or word[3] == 'e' or word[3] == 'i' or word[3] == 'o' or word[3] == 'u' or word[3] == 'y':\n        return \"\"\n    if word[-4] == 'a' or word[-4] == 'e' or word[-4] == 'i' or word[-4] == 'o' or word[-4] == 'u' or word[-4] == 'y':\n        return \"\"\n    if word[4] == '",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n        elif word[i] in vowels:\n            return word[i]\n        elif word[i+1] in vowels:\n            return word[i+1]\n    return \"\"",
    "    # Your code here\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n\"\"\"\n",
    "    # Your code here\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    if word is empty return \"\"\n    if word[0] is not a vowel return \"\"\n    if word[-1] is not a vowel return \"\"\n    \n    vowels = \"aeiou\"\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n\"\"\"\n",
    "    if word[0] == \" \":\n        return \"\"\n    else:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(1, len(word)):\n            if word[i] == \" \":\n                continue\n            if word[i] in vowels:\n                return word[i]\n            else:\n                if word[i-1] in vowels:\n                    return word[i-1]\n                else:\n                    return \"\"",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    else:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
    "    if word[0] == word[-1] == ' ':\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"",
    "    # Write your code here\n    if word == \"\":\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i]\n    return \"\"\n    \n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    for i in range(len(word) - 1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\"\n\"\"\"\nclass Solution:\n    # @param {string} word\n    # @return {string}\n    def get_closest_vowel(self, word):\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word) - 1):\n            if word[i] not in vowels and word[i + 1] in vowels:\n                return word[i + 1]\n        return \"\"",
    "    # Your function should return the closest vowel that stands between two consonants \n    # from the right side of the word.\n    # If there is no such vowel, return empty string.\n    # The word is given as a string. It only contains English letters.\n    # The vowels are: 'a', 'e', 'i', 'o', 'u'.\n    # The consonants are: 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'.\n    # The vowels are case sensitive.\n    # The consonants are case sensitive.\n    # The word is case sensitive.\n    # The vowels are in lower case.\n    # The consonants are in lower case.\n    # The word is a non-empty string.\n    # The word contains only English letters.\n    # The word is guaranteed to be non-empty.\n    # The word contains only lower case English letters.\n    # The word is guaranteed to contain only lower case English letters.\n    # The word is guaranteed to be non-empty.\n    # The word contains only English letters.\n    # The word is guaranteed to contain only English letters.\n    # The word is guaranteed to be non-empty.\n    # The word contains only lower case English letters.\n    # The word is guaranteed to contain only lower case English letters.\n    # The word is guaranteed to be non-empty.\n    # The word contains only English letters.\n    # The word is guaranteed to contain only English letters.\n    # The word is guaranteed to be non-empty.\n    # The word contains only lower case English letters.\n    # The word is guaranteed to contain only lower case English letters.\n    # The word is guaranteed to be non-empty.\n    # The word contains only English letters.\n    # The word is guaranteed to contain only English letters.\n    # The word is guaranteed to be non-empty.\n    # The word contains only lower case English letters.\n    # The word is guaranteed to contain only lower case English letters.\n    # The word is guaranteed to be non-empty.\n    # The word contains",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n        let i = 0;\n        let j = word.length - 1;\n        let closest_vowel = \"\";\n        while (i <= j)\n        {\n            let current_letter = word[i];\n            if (vowels.indexOf(current_letter) > -1)\n            {\n                if (i == 0 || i == word.length - 1)\n                {\n                    closest_vowel = current_letter;\n                    break;\n                }\n                else\n                {\n                    let next_letter = word[i + 1];\n                    if (consonants.indexOf(next_letter) > -1)\n                    {\n                        closest_vowel = current_letter;\n                        break;\n                    }\n                }\n            }\n            i++;\n        }\n        return closest_vowel;\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and i > 0 and word[i-1] not in vowels:\n            return word[i]\n        if word[i] in vowels and i < len(word) - 1 and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and i > 0 and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    if word is empty return \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if i == 0 or i == len(word) - 1:\n            continue\n        if word[i] in vowels:\n            return word[i]\n        if word[i] in vowels and word[i-1] in vowels:\n            return word[i]\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i]\n    return \"\"\n\"\"\"\n",
    "    if word is empty return \"\"\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
    "    if word.length == 0:\n        return \"\"\n    else:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels:\n                return word[i]\n            if word[i] not in vowels and word[i-1] in vowels:\n                return word[i-1]\n        return \"\"\n",
    "    # Write your code here\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"",
    "    # Your function should return the closest vowel that stands between two consonants \n    # from the right side of the word.\n    # If there is no such vowel, return empty string.\n    # If there are more than one vowel, return the closest vowel.\n    # If there is only one vowel, return that vowel.\n    # If there is no vowel, return empty string.\n    # The word is given as a string.\n    # The vowels are 'a', 'e', 'i', 'o', 'u'.\n    # The consonants are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'.\n    # The vowels are case sensitive.\n    # The consonants are case sensitive.\n    # The word is case sensitive.\n    # The vowels are in lower case.\n    # The consonants are in lower case.\n    # The word is a non-empty string.\n    # The word contains only English letters.\n    # The word is a non-empty string.\n    # The word contains only lower case English letters.\n    # The word is a non-empty string.\n    # The word contains only English letters.\n    # The word is a non-empty string.\n    # The word contains only lower case English letters.\n    # The word is a non-empty string.\n    # The word contains only English letters.\n    # The word is a non-empty string.\n    # The word contains only lower case English letters.\n    # The word is a non-empty string.\n    # The word contains only English letters.\n    # The word is a non-empty string.\n    # The word contains only lower case English letters.\n    # The word is a non-empty string.\n    # The word contains only English letters.\n    # The word is a non-empty string.\n    # The word contains only lower case English letters.\n    # The word is a non-empty string.\n    # The word contains only English letters.\n    # The word is a non-empty string.\n    # The word contains only lower case English",
    "    if word is empty return \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n        if word[i] == \" \":\n            continue\n        if word[i] == \".\":\n            continue\n        if word[i] == \",\":\n            continue\n        if word[i] == \":\":\n            continue\n        if word[i] == \";\":\n            continue\n        if word[i] == \"!\":\n            continue\n        if word[i] == \"?\":\n            continue\n        if word[i] == \"\\\"\":\n            continue\n        if word[i] == \"'\":\n            continue\n        if word[i] == \"`\":\n            continue\n        if word[i] == \"~\":\n            continue\n        if word[i] == \"^\":\n            continue\n        if word[i] == \"&\":\n            continue\n        if word[i] == \"*\":\n            continue\n        if word[i] == \"(\" or word[i] == \")\":\n            continue\n        if word[i] == \"-\" or word[i] == \"_\":\n            continue\n        if word[i] == \"=\":\n            continue\n        if word[i] == \"+\":\n            continue\n        if word[i] == \"\\\\\":\n            continue\n        if word[i] == \"|\":\n            continue\n        if word[i] == \"/\":\n            continue\n        if word[i] == \" \":\n            continue\n        if word[i] == \"\":\n            continue\n        if word[i] == \"\":\n            continue\n        if word[i] == \"\":\n            continue\n        if word[i] == \"\":\n            continue\n        if word[i] == \"\":\n            continue\n        if word[i] == \"\":\n            continue\n        if word[i] == \"\":\n            continue\n        if word[i] == \"\":\n            continue\n        if word[i] == \"\":\n            continue\n        if word[i] == \"\":\n            continue\n        if word",
    "    vowels = \"aeiou\"\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    # Write your code here\n    if len(word) == 0:\n        return \"\"\n    \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n        \n        if i == len(word) - 1:\n            return \"\"\n        \n        if word[i] != word[i+1]:\n            return word[i+1]\n    \n    return \"\"\n",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    if word is empty:\n        return \"\"\n    else:\n        vowels = \"aeiou\"\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels:\n                return word[i]\n        return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
    "    {\n        let vowels = \"aeiouAEIOU\";\n        let vowels_count = vowels.length;\n        let vowels_index = 0;\n        let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        let consonants_count = consonants.length;\n        let consonants_index = 0;\n        let result = \"\";\n        let word_length = word.length;\n        for (let i = word_length - 1; i >= 0; i--)\n        {\n            if (vowels_count > 0 && vowels.indexOf(word[i]) !== -1)\n            {\n                vowels_index = i;\n                vowels_count--;\n            }\n            else if (consonants_count > 0 && consonants.indexOf(word[i]) !== -1)\n            {\n                consonants_index = i;\n                consonants_count--;\n            }\n        }\n        if (vowels_count === 0 && consonants_count === 0)\n        {\n            result = word[word_length - 1];\n        }\n        else if (vowels_count === 0)\n        {\n            result = word[consonants_index];\n        }\n        else if (consonants_count === 0)\n        {\n            result = word[vowels_index];\n        }\n        else\n        {\n            result = word[vowels_index];\n        }\n        return result;\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if i == 0 or i == len(word) - 1:\n            continue\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n        if word[i] not in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let vowels_count = 0;\n        let consonants = [];\n        let consonants_count = 0;\n        let i = word.length - 1;\n        while (i >= 0)\n        {\n            if (word[i] === \" \")\n            {\n                i--;\n                continue;\n            }\n            if (vowels.indexOf(word[i]) !== -1)\n            {\n                vowels_count++;\n                if (vowels_count === 2)\n                {\n                    return word[i];\n                }\n            }\n            else if (consonants.indexOf(word[i]) === -1)\n            {\n                consonants.push(word[i]);\n                consonants_count++;\n                if (consonants_count === 2)\n                {\n                    return word[i];\n                }\n            }\n            i--;\n        }\n        return \"\";\n    }\n\"\"\"\n",
    "    if word is empty\n        return \"\"\n    else\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word) - 1):\n            if word[i] in vowels and word[i + 1] not in vowels:\n                return word[i + 1]\n        return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    # Write your code here\n    return\n\"\"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    if word is empty:\n        return \"\"\n    else:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\nclass Solution:\n    def getClosestVowel(self, word):\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i+1]\n        return \"\"\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./get_closest_vowel.py string\"\n        sys.exit()\n    print get_closest_vowel(sys.argv[1])\n",
    "    if word is empty:\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and i > 0 and word[i-1] not in vowels:\n            return word[i]\n    return \"\"",
    "    if word is empty return \"\"\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)):\n        if word[i] in vowels and i > 0 and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n\"\"\"\n# Your get_closest_vowel function must return an empty string if there is no vowel between two consonants.\n# You may assume that the given word contains only English letters.\n#\n# Example:\n# get_closest_vowel(\"yogurt\") == \"u\"\n# get_closest_vowel(\"FULL\") == \"U\"\n# get_closest_vowel(\"quick\") == \"\"\n# get_closest_vowel(\"ab\") == \"\"",
    "    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\"\"\"",
    "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and i > 0 and word[i-1] not in vowels:\n            return word[i]\n        if word[i] in vowels and i < len(word)-1 and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and i > 0 and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\"\"\"\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and i > 0 and word[i-1] not in vowels:\n                return word[i]\n        return \"\"\n",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n        let vowels_count = 0;\n        let consonants_count = 0;\n        let vowels_index = 0;\n        let consonants_index = 0;\n        let vowels_index_end = 0;\n        let consonants_index_end = 0;\n        let result = \"\";\n        let word_length = word.length;\n        for (let i = 0; i < word_length; i++) {\n            let current_char = word[i];\n            if (vowels.indexOf(current_char) > -1) {\n                vowels_count++;\n                vowels_index = i;\n                if (vowels_count == 2) {\n                    break;\n                }\n            } else if (consonants.indexOf(current_char) > -1) {\n                consonants_count++;\n                consonants_index = i;\n                if (consonants_count == 2) {\n                    break;\n                }\n            }\n        }\n        if (vowels_count == 0) {\n            return \"\";\n        }\n        if (vowels_count == 1) {\n            vowels_index_end = vowels_index;\n        } else {\n            vowels_index_end = vowels_index + 1;\n        }\n        if (consonants_count == 0) {\n            consonants_index_end = consonants_index;\n        } else {\n            consonants_index_end = consonants_index + 1;\n        }\n        for (let i = vowels_index_end; i < word_length; i++) {\n            let current_char = word[i];\n            if (vowels.indexOf(current_char) > -1) {\n                ",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n        let consonant_index = consonants.indexOf(word[0]);\n        let vowel_index = vowels.indexOf(word[1]);\n        let result = \"\";\n        if (vowel_index > -1 && consonant_index > -1)\n        {\n            let i = consonant_index + 1;\n            while (i < word.length && vowels.indexOf(word[i]) == -1)\n            {\n                i++;\n            }\n            if (i < word.length)\n            {\n                result = word[i];\n            }\n        }\n        return result;\n    }\n\"\"\"",
    "    {\n        let vowels = \"aeiouAEIOU\";\n        let vowels_count = vowels.length;\n        let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        let consonants_count = consonants.length;\n        let result = \"\";\n        let i = 0;\n        let j = 0;\n        let k = 0;\n        let l = 0;\n        let m = 0;\n        let n = 0;\n        let p = 0;\n        let q = 0;\n        let r = 0;\n        let s = 0;\n        let t = 0;\n        let u = 0;\n        let v = 0;\n        let w = 0;\n        let x = 0;\n        let y = 0;\n        let z = 0;\n        let consonant = \"\";\n        let consonant_count = 0;\n        let vowel = \"\";\n        let vowel_count = 0;\n        let temp = \"\";\n        let temp_count = 0;\n        let temp_result = \"\";\n        let temp_result_count = 0;\n        let temp_result_temp = \"\";\n        let temp_result_temp_count = 0;\n        let temp_result_temp_result = \"\";\n        let temp_result_temp_result_count = 0;\n        let temp_result_temp_result_temp = \"\";\n        let temp_result_temp_result_temp_count = 0;\n        let temp_result_temp_result_temp_result = \"\";\n        let temp_result_temp_result_temp_result_count = 0;\n        let temp_result_temp_result_temp_result_temp = \"\";\n        let temp_result_temp_result_temp_result_temp_count = 0;\n        let temp_result_temp_result_temp_result_temp_result = \"\";\n        let temp_result_temp_result_temp_result_temp_result_count = 0;\n        let temp_result_temp_result_temp_result_temp_result_temp = \"\";\n        let temp_result_temp_result_temp",
    "    if word[0] == 'a' or word[0] == 'e' or word[0] == 'i' or word[0] == 'o' or word[0] == 'u':\n        return \"\"\n    if word[-1] == 'a' or word[-1] == 'e' or word[-1] == 'i' or word[-1] == 'o' or word[-1] == 'u':\n        return \"\"\n    for i in range(1, len(word)):\n        if word[i] == 'a' or word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u':\n            return word[i]\n    return \"\"",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./get_closest_vowel.py <word>\"\n        sys.exit()\n    print get_closest_vowel(sys.argv[1])\n",
    "    # Write your code here\n    return \"\"\n\"\"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n        if word[i] not in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(1, len(word)):\n        if word[i-1] != word[i] and word[i] in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    # Your function should return the closest vowel that stands between two consonants \n    # from the right side of the word.\n    # If there is no such vowel, return empty string.\n    # The word is given as a string. It only contains English letters.\n    # The vowels are 'a', 'e', 'i', 'o', 'u'.\n    # The consonants are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'.\n    # The vowels are case sensitive.\n    # The consonants are case sensitive.\n    # The word is guaranteed to be non-empty.\n    # The word is guaranteed to have at least one vowel.\n    # The word is guaranteed to have at least one consonant.\n    # The word is guaranteed to have at least two vowels.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and one vowel.\n    # The word is guaranteed to have at least one consonant and",
    "    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    for i in range(len(word)-1):\n        if word[i] == word[i+1]:\n            if word[i] in vowels:\n                return word[i]\n            else:\n                return \"\"\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n        elif word[i] in vowels:\n            return word[i]\n        elif word[i+1] in vowels:\n            return word[i+1]\n    return \"\"",
    "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1):\n        if word[i] not in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\n# Your get_closest_vowel function must return an string.\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1):\n        if word[i] not in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n        let consonant_index = consonants.indexOf(word[0]);\n        let vowel_index = vowels.indexOf(word[1]);\n        let consonant_index_next = consonants.indexOf(word[2]);\n        let vowel_index_next = vowels.indexOf(word[3]);\n        let vowel = \"\";\n        if (vowel_index >= 0 && vowel_index_next >= 0) {\n            vowel = vowels[vowel_index + 1];\n        } else if (vowel_index >= 0 && vowel_index_next < 0) {\n            vowel = vowels[vowel_index];\n        } else if (vowel_index < 0 && vowel_index_next >= 0) {\n            vowel = vowels[vowel_index_next];\n        } else if (vowel_index < 0 && vowel_index_next < 0) {\n            vowel = vowels[vowel_index + 1];\n        }\n        return vowel;\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    return word.substring(word.indexOf(word.charAt(word.length - 1)) + 1, word.length - 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    # Write your code here\n    return\n    \nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./ch3_exercise_02_02.py string\"\n        exit(1)",
    "    if word[0] == \" \":\n        return \"\"\n    else:\n        vowels = \"aeiouAEIOU\"\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels:\n                return word[i]\n        return \"\"",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    else:\n        vowels = \"aeiou\"\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i == 0 or word[i-1] not in vowels:\n                return word[i]\n    return \"\"\n\"\"\"\nclass Solution:\n    def getClosestVowel(self, word):\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels:\n                if i == 0 or word[i-1] not in vowels:\n                    return word[i]\n        return \"\"\n",
    "    if word.length == 1:\n        return \"\"\n    else:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels:\n                return word[i]\n        return \"\"\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n        if word[i] == \" \":\n            continue\n        if word[i] == word[i+1]:\n            continue\n        if word[i] == word[i+2]:\n            continue\n        if word[i] == word[i+3]:\n            continue\n        if word[i] == word[i+4]:\n            continue\n        if word[i] == word[i+5]:\n            continue\n        if word[i] == word[i+6]:\n            continue\n        if word[i] == word[i+7]:\n            continue\n        if word[i] == word[i+8]:\n            continue\n        if word[i] == word[i+9]:\n            continue\n        if word[i] == word[i+10]:\n            continue\n        if word[i] == word[i+11]:\n            continue\n        if word[i] == word[i+12]:\n            continue\n        if word[i] == word[i+13]:\n            continue\n        if word[i] == word[i+14]:\n            continue\n        if word[i] == word[i+15]:\n            continue\n        if word[i] == word[i+16]:\n            continue\n        if word[i] == word[i+17]:\n            continue\n        if word[i] == word[i+18]:\n            continue\n        if word[i] == word[i+19]:\n            continue\n        if word[i] == word[i+20]:\n            continue\n        if word[i] == word[i+21]:\n            continue\n        if word[i] == word[i+22]:\n            continue\n        if word[i] == word[i+23]:\n            continue\n        if word[i] == word[i+24]:\n            continue\n        if word[i] == word[i+25]:\n            continue\n        if word[i] == word[i+26]:\n            continue\n        if word[i",
    "    # Write your code here\n    return \"\"\n    \nif __name__ == '__main__':\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./get_closest_vowel.py string\"\n        sys.exit(1)\n    \n    print get_closest_vowel(sys.argv[1])\n",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\"\"\"",
    "    # Write your code here\n    vowels = \"aeiou\"\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"",
    "    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
    "    # Write your code here\n    return\n\"\"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"",
    "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
    "    vowels = \"aeiouAEIOU\"\n    vowels_lower = vowels.toLowerCase()\n    vowels_upper = vowels.toUpperCase()\n    for i in range(len(word) - 1):\n        if word[i].isupper() and word[i + 1].islower():\n            return word[i + 1]\n        elif word[i].islower() and word[i + 1].isupper():\n            return word[i + 1]\n        elif word[i].isupper() and word[i + 1].isupper():\n            if word[i + 1] in vowels_upper:\n                return word[i + 1]\n            elif word[i] in vowels_upper:\n                return word[i]\n            elif word[i + 1] in vowels_lower:\n                return word[i + 1]\n            elif word[i] in vowels_lower:\n                return word[i]\n    return \"\"",
    "    # Write your code here\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n",
    "    # Write your code here\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\"\"\"\nclass Solution:\n    def getClosestVowel(self, word):\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"\n",
    "    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\"\"\"\n# Your get_closest_vowel function must return an empty string if there is no vowel.\n# Your function should return the closest vowel in the given word.",
    "    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\n# Your get_closest_vowel function must return an string.\n# Your function definition must be as follows:\n# get_closest_vowel(word: String)::String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n# word: String\n# Returns: String\n#\n#",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_lower = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_upper = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    vowels_lower_set = set(vowels_lower)\n    vowels_upper_set = set(vowels_upper)\n    vowels_set = vowels_lower_set | vowels_upper_set\n    vowels_set_lower = set(vowels)\n    vowels_set_upper = set(vowels)\n    vowels_set_lower_set = set(vowels_lower)\n    vowels_set_upper_set = set(vowels_upper)\n    vowels_set_lower_set | vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\nclass Solution:\n    def getClosestVowel(self, word):\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] in vowels:\n                return word[i+1]\n        return \"\"\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\nclass Solution:\n    def getClosestVowel(self, word):\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i+1]\n        return \"\"\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"",
    "    if word is empty:\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
    "    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_count = 0\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] in vowels:\n            vowels_count += 1\n        elif word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n        elif word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    if word is empty:\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    if word[0] == word[-1] == ' ':\n        return \"\"\n    \n    vowels = \"aeiouAEIOU\"\n    \n    for i in range(len(word) - 1):\n        if word[i] == word[i+1] and word[i] not in vowels:\n            return word[i]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i]\n    return \"\"",
    "    if word[0] == 'a' or word[0] == 'e' or word[0] == 'i' or word[0] == 'o' or word[0] == 'u':\n        return \"\"\n    if word[len(word)-1] == 'a' or word[len(word)-1] == 'e' or word[len(word)-1] == 'i' or word[len(word)-1] == 'o' or word[len(word)-1] == 'u':\n        return \"\"\n    for i in range(len(word)-1):\n        if word[i] == 'c' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'g' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 's' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'z' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'j' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'k' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'l' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'm' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'n' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'p' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'r' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 't' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'w' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'y' and word[i+1] == 'h':\n            return \"\"\n        if word[i] == 'f' and word[",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    if word is empty:\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    vowels = \"aeiou\"\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_count = 0\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_count += 1\n            if vowels_count > 1:\n                return \"\"\n            if i == 0 or i == len(word) - 1:\n                continue\n            if word[i - 1] in vowels and word[i + 1] in vowels:\n                return word[i]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    {\n        let vowels = \"aeiouAEIOU\"\n        let vowels_lower = vowels.toLowerCase()\n        let vowels_upper = vowels.toUpperCase()\n        let vowels_lower_set = new Set(vowels_lower)\n        let vowels_upper_set = new Set(vowels_upper)\n        let vowels_set = new Set(vowels)\n        let vowels_lower_set_union_vowels_set = vowels_lower_set.union(vowels_set)\n        let vowels_upper_set_union_vowels_set = vowels_upper_set.union(vowels_set)\n        let vowels_set_union_vowels_set = vowels_set.union(vowels_set)\n        let vowels_lower_set_intersection_vowels_set = vowels_lower_set.intersection(vowels_set)\n        let vowels_upper_set_intersection_vowels_set = vowels_upper_set.intersection(vowels_set)\n        let vowels_set_intersection_vowels_set = vowels_set.intersection(vowels_set)\n        let closest_vowel = \"\"\n        let word_length = word.length\n        for i in range(1, word_length):\n            if word[i] in vowels_set_union_vowels_set:\n                closest_vowel = word[i]\n                break\n            elif word[i] in vowels_lower_set_union_vowels_set:\n                closest_vowel = word[i].toUpperCase()\n                break\n            elif word[i] in vowels_upper_set_union_vowels_set:\n                closest_vowel = word[i].toLowerCase()\n                break\n            elif word[i] in vowels_lower_set_intersection_vowels_set:\n                closest_vowel = word[i].toUpperCase()\n                break\n            elif word[i",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n        else:\n            if i == 0 or i == len(word) - 1:\n                continue\n            if word[i-1] in vowels and word[i+1] in vowels:\n                return word[i]\n    return \"\"",
    "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let vowels_count = 0;\n        let consonants = [];\n        let consonants_count = 0;\n        let i = word.length - 1;\n        while (i >= 0)\n        {\n            if (word[i] in vowels)\n            {\n                vowels_count += 1;\n                if (vowels_count > 1)\n                    return \"\";\n            }\n            else if (word[i] in consonants)\n            {\n                consonants_count += 1;\n                if (consonants_count > 1)\n                    return \"\";\n            }\n            else\n            {\n                consonants.push(word[i]);\n                consonants_count += 1;\n            }\n            i -= 1;\n        }\n        let closest_vowel = \"\";\n        for (let j = 0; j < vowels.length; j++)\n        {\n            if (vowels[j] in consonants)\n            {\n                closest_vowel = vowels[j];\n                break;\n            }\n        }\n        return closest_vowel;\n    }\n\"\"\"\n",
    "    if word[0] == \" \":\n        return \"\"\n    if word[-1] == \" \":\n        return \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"",
    "    # Your code here\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./ch4.py string\"\n        sys.exit()\n    \n    word = sys.argv[1]\n    print get_closest_vowel(word)\n",
    "    if word is empty return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" or word[len(word)-1] == \" \" return \"\"\n",
    "    if word.length == 1:\n        return \"\"\n    \n    vowels = \"aeiouAEIOU\"\n    \n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    \n    return \"\"\n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./get_closest_vowel.py string\"\n        sys.exit()\n    \n    print get_closest_vowel(sys.argv[1])\n",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(1, len(word)):\n        if word[i-1] not in vowels and word[i] in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"",
    "    if word is empty:\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and i > 0 and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./get_closest_vowel.py string\"\n        sys.exit()\n    \n    print get_closest_vowel(sys.argv[1])\n",
    "    if word is empty return \"\"\n    if word[0] == \" \" return \"\"\n    if word[len(word)-1] == \" \" return \"\"\n    if word[0] == \" \" return \"\"\n    if word[len(word)-1] == \" \" return \"\"\n    if word[0] == \"a\" return \"\"\n    if word[len(word)-1] == \"a\" return \"\"\n    if word[0] == \"e\" return \"\"\n    if word[len(word)-1] == \"e\" return \"\"\n    if word[0] == \"i\" return \"\"\n    if word[len(word)-1] == \"i\" return \"\"\n    if word[0] == \"o\" return \"\"\n    if word[len(word)-1] == \"o\" return \"\"\n    if word[0] == \"u\" return \"\"\n    if word[len(word)-1] == \"u\" return \"\"\n    if word[0] == \"y\" return \"\"\n    if word[len(word)-1] == \"y\" return \"\"\n    if word[0] == \" \" return \"\"\n    if word[len(word)-1] == \" \" return \"\"\n    if word[0] == \"A\" return \"\"\n    if word[len(word)-1] == \"A\" return \"\"\n    if word[0] == \"E\" return \"\"\n    if word[len(word)-1] == \"E\" return \"\"\n    if word[0] == \"I\" return \"\"\n    if word[len(word)-1] == \"I\" return \"\"\n    if word[0] == \"O\" return \"\"\n    if word[len(word)-1] == \"O\" return \"\"\n    if word[0] == \"U\" return \"\"\n    if word[len(word)-1] == \"U\" return \"\"\n    if word[0] == \"Y\" return \"\"\n    if word[len(word)-1] == \"Y\" return \"\"\n    if word[0] == \" \" return \"\"\n    if word[len(word)-1] == \" \" return \"\"\n    if word[0] == \"B\" return \"\"\n    if word[len(word)-1] == \"B\" return \"\"\n    if",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n",
    "    if word.length == 1:\n        return \"\"\n    else:\n        # find the first vowel from the right side of the word\n        for i in range(word.length - 1, 0, -1):\n            if word[i] in \"aeiouAEIOU\":\n                return word[i]\n        # if no vowel found, return the first consonant from the right side\n        return word[1]",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./get_closest_vowel.py <word>\"\n        exit(1)\n    print get_closest_vowel(sys.argv[1])",
    "    vowels = \"aeiouAEIOU\"\n    for i in range(1, len(word)):\n        if word[i-1] in vowels and word[i] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./ch3_ex3_3.py string\"\n        exit()\n    \n    word = sys.argv[1]\n    print get_closest_vowel(word)\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)-1):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i+1]\n        return \"\"\n",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    vowels = \"aeiou\"\n    i = len(word) - 1\n    while i >= 0 and word[i] != \" \":\n        if word[i] in vowels:\n            return word[i]\n        i -= 1\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\n",
    "    vowels = \"aeiou\"\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print \"Usage: ./ch3_ex3_3.py string\"\n        exit(1)\n    \n    word = sys.argv[1]\n    print get_closest_vowel(word)\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n        if word[i] not in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    # Write your code here\n    if word == \"\":\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i]\n    return \"\"\n",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    vowels = \"aeiou\"\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    if word is empty:\n        return \"\"\n    else:\n        vowels = \"aeiou\"\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels:\n                return word[i]\n        return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if i == 0 or i == len(word) - 1:\n            continue\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
    "    if word == \"\" or word == \" \":\n        return \"\"\n    vowels = \"aeiouAEIOU\"\n    index = 0\n    for i in range(len(word)):\n        if word[i] in vowels:\n            index = i\n            break\n    if index == 0:\n        return \"\"\n    for i in range(index, len(word)):\n        if word[i] in vowels:\n            return word[i]\n        if word[i] in vowels.upper():\n            return word[i]\n    return \"\"",
    "    if word[0] == word[len(word) - 1]:\n        return \"\"\n    else:\n        for i in range(len(word) - 1):\n            if word[i] != word[i + 1] and word[i + 1] != ' ':\n                return word[i + 1]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import sys\n    if (len(sys.argv) <= 1):\n        print (\"Usage: ./get_closest_vowel.py string\")\n        sys.exit()\n    \n    print (get_closest_vowel(sys.argv[1]))\n",
    "    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"aeiou\"\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] in vowels:\n                return word[i+1]\n        return \"\"\n",
    "    if word is empty:\n        return \"\"\n    else:\n        vowels = \"aeiouAEIOU\"\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] in vowels:\n                return word[i]\n        return \"\"",
    "    if word is empty:\n        return \"\"\n    else:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\n",
    "    if word is empty return \"\"\n    if word[0] == \" \" return \"\"\n    if word[len(word)-1] == \" \" return \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n        let vowels_count = 0;\n        let consonants_count = 0;\n        let vowels_index = 0;\n        let consonants_index = 0;\n        let vowels_index_end = 0;\n        let consonants_index_end = 0;\n        let result = \"\";\n        for (let i = 0; i < word.length; i++) {\n            if (vowels.indexOf(word[i]) !== -1) {\n                vowels_count++;\n                vowels_index = i;\n                vowels_index_end = i;\n            } else if (consonants.indexOf(word[i]) !== -1) {\n                consonants_count++;\n                consonants_index = i;\n                consonants_index_end = i;\n            }\n        }\n        if (vowels_count === 0) {\n            return \"\";\n        }\n        if (consonants_count === 0) {\n            return word[vowels_index_end];\n        }\n        if (vowels_count === 1) {\n            return word[vowels_index];\n        }\n        if (vowels_count === 2) {\n            if (vowels_index - vowels_index_end === 1) {\n                return word[vowels_index];\n            } else {\n                return word[vowels_index_end];\n            }\n        }\n        if (vowels_count === 3) {\n            if (vowels_index - vowels_index_end === 2) {\n                return word[vowels_index];\n            } else {\n                return word[vowels_index_end];\n            }\n        }\n        if (vow",
    "    if word is empty return \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n        if i > 0 and word[i] != word[i-1]:\n            return word[i]\n    return \"\"\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
    "    if word is empty:\n        return \"\"\n    else:\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\"",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and i > 0 and word[i-1] not in vowels:\n            return word[i]\n        if word[i] not in vowels and i < len(word) - 1 and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    # Your code here\n    return \"\"\n\"\"\"",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let vowels_count = 0;\n        let consonants = [];\n        let consonants_count = 0;\n        let consonant_index = 0;\n        let vowel_index = 0;\n        let vowel_found = false;\n        let vowel_found_index = 0;\n        let word_length = word.length;\n        for (let i = 0; i < word_length; i++) {\n            if (vowels.indexOf(word[i]) !== -1) {\n                vowels_count++;\n                if (vowels_count === 1) {\n                    vowel_found = true;\n                    vowel_found_index = i;\n                }\n            } else if (vowel_found) {\n                vowel_found = false;\n                vowel_index = i;\n                break;\n            } else {\n                consonants.push(word[i]);\n                consonants_count++;\n                if (consonants_count === 2) {\n                    consonant_index = i;\n                }\n            }\n        }\n        if (vowel_found) {\n            return word[vowel_index];\n        } else if (consonant_index !== 0) {\n            return word[consonant_index - 1];\n        } else {\n            return \"\";\n        }\n    }\n\"\"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_lower = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_upper = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    vowels_lower_set = set(vowels_lower)\n    vowels_upper_set = set(vowels_upper)\n    vowels_set = vowels_lower_set | vowels_upper_set\n    vowels_set_lower = set(vowels)\n    vowels_set_upper = set(vowels)\n    vowels_set_lower_set = set(vowels_lower)\n    vowels_set_upper_set = set(vowels_upper)\n    vowels_set_lower_set | vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_upper_set\n    vowels_set_lower_set - vowels_set_",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and i > 0 and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    return closest_vowel(word, 0, word.length - 1)\n    \ndef closest_vowel(word, start, end):\n    if start == end:\n        return \"\"\n    if start == end - 1:\n        return \"\"\n    if word[start] == word[end]:\n        return \"\"\n    if word[start] == word[end] and word[start] in \"aeiou\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[start] == word[end] and word[start] in \"aeiouy\":\n        return word[start]\n    if word[",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
    "    # Check if the word is empty\n    if word == \"\"\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if len(word) == 1\n        return \"\"\n    # Check if the word is only one character\n    if",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n        elif word[i] in vowels:\n            return word[i]\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\nclass Solution:\n    def get_closest_vowel(self, word):\n        vowels = \"aeiou\"\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] in vowels:\n                return word[i+1]\n        return \"\"\n",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\"",
    "    if word is empty return \"\"\n    if word[0] is not a vowel return \"\"\n    if word[-1] is not a vowel return \"\"\n    \n    # find the first vowel from the right side of the word\n    i = len(word) - 1\n    while i >= 0 and word[i] is not a vowel:\n        i -= 1\n    if i < 0:\n        return \"\"\n    \n    # find the first consonant from the right side of the word\n    j = len(word) - 1\n    while j >= 0 and word[j] is not a consonant:\n        j -= 1\n    if j < 0:\n        return \"\"\n    \n    # find the first vowel from the left side of the word\n    k = 0\n    while k < i and word[k] is not a vowel:\n        k += 1\n    if k >= i:\n        return \"\"\n    \n    # find the first consonant from the left side of the word\n    l = 0\n    while l < j and word[l] is not a consonant:\n        l += 1\n    if l >= j:\n        return \"\"\n    \n    # return the closest vowel\n    return word[k+1:l]",
    "    if word is empty:\n        return \"\"\n    else:\n        vowels = \"aeiouAEIOU\"\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels:\n                return word[i]\n        return \"\"",
    "    return word.substring(word.lastIndexOf('c')+1, word.lastIndexOf('e')+1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
    "    if word is empty\n        return \"\"\n    else\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i]\n            else:\n                continue\n\"\"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            return word[i + 1]\n    return \"\"",
    "    {\n        let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let consonants = [];\n        for (let i = word.length - 1; i >= 0; i--) {\n            if (vowels.indexOf(word[i]) !== -1) {\n                return word[i];\n            } else if (vowels.indexOf(word[i].toLowerCase()) !== -1) {\n                return word[i];\n            } else if (vowels.indexOf(word[i].toUpperCase()) !== -1) {\n                return word[i];\n            } else {\n                consonants.push(word[i]);\n            }\n        }\n        return consonants.join(\"\");\n    }\n\"\"\"",
    "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n\"\"\"\nclass Solution(object):\n    def getClosestVowel(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: str\n        \"\"\"\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        for i in range(len(word)):\n            if word[i] in vowels and word[i+1] not in vowels:\n                return word[i+1]\n        return \"\"\n",
    "    if word is empty return \"\"\n    vowels = \"aeiou\"\n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\"\"\"\nclass Solution(object):\n    def getClosestVowel(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: str\n        \"\"\"\n        vowels = \"aeiou\"\n        for i in range(1, len(word)):\n            if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n        return \"\""
  ],
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ]
}