{
  "name": "HumanEval_161_solve",
  "language": "jl",
  "prompt": "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    >>> solve(\"1234\")\n    \"4321\"\n    >>> solve(\"ab\")\n    \"AB\"\n    >>> solve(\"#a@C\")\n    \"#A@c\"\n    \"\"\"\nfunction solve(s::String)::String \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n",
  "completions": [
    "    if s.isEmpty():\n        return s\n    else:\n        return s.toLowerCase() if s[0].isLowerCase() else s.toUpperCase()\n",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.toLowerCase() if s[0].isLowerCase() else s.toUpperCase()\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.toLowerCase() if s[0].isLowerCase() else s.toUpperCase()",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].toUpper() if s[0].isalpha() else s[0].toLower() + s[1:]",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")\n",
    "    if not s:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]\n",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]\n",
    "    if s[0] in \"0123456789\":\n        return s[::-1]\n    else:\n        return s\n",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if s[0] is not '#':\n        return s\n    else:\n        return '#' + s[1:]\n",
    "    if s == \"\"\n        return \"\"\n    else:\n        i = 0\n        while i < len(s):\n            if s[i].isalpha():\n                if s[i].isupper():\n                    s[i] = s[i].lower()\n                else:\n                    s[i] = s[i].upper()\n            i += 1\n        return s\n",
    "    if not s:\n        return s\n    \n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n",
    "    if s == \"\" or s == \" \":\n        return s\n    \n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if s[0] is not '#':\n        return s\n    else:\n        return '#' + s[1:].lower()\n",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        i = 0\n        while i < len(s):\n            if s[i].isalpha():\n                if s[i].isupper():\n                    s = s[:i] + s[i].lower() + s[i+1:]\n                else:\n                    s = s[:i] + s[i].upper() + s[i+1:]\n            i += 1\n        return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]",
    "    if s == \"\" or s == \" \":\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    else:\n        return s[::-1].replace(\"a\", \"A\").replace(\"b\", \"B\").replace(\"c\", \"C\").replace(\"d\", \"D\").replace(\"e\", \"E\").replace(\"f\", \"F\").replace(\"g\", \"G\").replace(\"h\", \"H\").replace(\"i\", \"I\").replace(\"j\", \"J\").replace(\"k\", \"K\").replace(\"l\", \"L\").replace(\"m\", \"M\").replace(\"n\", \"N\").replace(\"o\", \"O\").replace(\"p\", \"P\").replace(\"q\", \"Q\").replace(\"r\", \"R\").replace(\"s\", \"S\").replace(\"t\", \"T\").replace(\"u\", \"U\").replace(\"v\", \"V\").replace(\"w\", \"W\").replace(\"x\", \"X\").replace(\"y\", \"Y\").replace(\"z\", \"Z\")",
    "    if s.isEmpty():\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isLetter():\n            if s[i].isLower():\n                s[i] = s[i].toUpper()\n            else:\n                s[i] = s[i].toLower()\n        i += 1\n    return s\n",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if s.isEmpty() or s.isLetter()\n        return s.toLower()\n    else\n        return s.toUpper()\n",
    "    if not s: return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.toLowerCase() if s[0].isLower() else s.toUpperCase()\n",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        else:\n            i += 1\n    return s\n",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    else:\n        return s[::-1].replace(\"a\", \"A\").replace(\"b\", \"B\").replace(\"c\", \"C\").replace(\"d\", \"D\").replace(\"e\", \"E\").replace(\"f\", \"F\").replace(\"g\", \"G\").replace(\"h\", \"H\").replace(\"i\", \"I\").replace(\"j\", \"J\").replace(\"k\", \"K\").replace(\"l\", \"L\").replace(\"m\", \"M\").replace(\"n\", \"N\").replace(\"o\", \"O\").replace(\"p\", \"P\").replace(\"q\", \"Q\").replace(\"r\", \"R\").replace(\"s\", \"S\").replace(\"t\", \"T\").replace(\"u\", \"U\").replace(\"v\", \"V\").replace(\"w\", \"W\").replace(\"x\", \"X\").replace(\"y\", \"Y\").replace(\"z\", \"Z\")\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s == \"\" or s == \" \":\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]\n",
    "    if s == \"\" or s == \" \":\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s[::-1]",
    "    if s == \"\" or s == \" \":\n        return s\n    \n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s\n",
    "    if not s:\n        return s\n    \n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\").replace(\"#\",\"#\")\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    else:\n        return s[::-1].replace(\"a\", \"A\").replace(\"b\", \"B\").replace(\"c\", \"C\").replace(\"d\", \"D\").replace(\"e\", \"E\").replace(\"f\", \"F\").replace(\"g\", \"G\").replace(\"h\", \"H\").replace(\"i\", \"I\").replace(\"j\", \"J\").replace(\"k\", \"K\").replace(\"l\", \"L\").replace(\"m\", \"M\").replace(\"n\", \"N\").replace(\"o\", \"O\").replace(\"p\", \"P\").replace(\"q\", \"Q\").replace(\"r\", \"R\").replace(\"s\", \"S\").replace(\"t\", \"T\").replace(\"u\", \"U\").replace(\"v\", \"V\").replace(\"w\", \"W\").replace(\"x\", \"X\").replace(\"y\", \"Y\").replace(\"z\", \"Z\")\n",
    "    if not s:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if s == \"\" or s == \" \":\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if s == \"\"\n        return \"\"\n    else:\n        i = 0\n        while i < len(s):\n            if s[i].isalpha():\n                if s[i].isupper():\n                    s = s[:i] + s[i].lower() + s[i+1:]\n                else:\n                    s = s[:i] + s[i].upper() + s[i+1:]\n            i += 1\n        return s\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s == \"\" or s == \" \":\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.toLowerCase() if s[0].isLowerCase() else s.toUpperCase()\n",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s\n",
    "    if s == \"\"\n        return \"\"\n    else:\n        i = 0\n        while i < len(s):\n            if s[i].isalpha():\n                if s[i].isupper():\n                    s[i] = s[i].lower()\n                else:\n                    s[i] = s[i].upper()\n            i += 1\n        return s\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[0].lower() + s[1:].upper()",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.substring(0,1).toUpperCase() + s.substring(1).toLowerCase()\n",
    "    if s == \"\"\n        return \"\"\n    else:\n        i = 0\n        while i < len(s):\n            if s[i].isalpha():\n                if s[i].isupper():\n                    s[i] = s[i].lower()\n                else:\n                    s[i] = s[i].upper()\n            i += 1\n        return s\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]\n",
    "    if s[0] is not '#':\n        return s\n    else:\n        return '#' + s[1:].lower() + s[1:].upper()\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0] + solve(s[1:])",
    "    if s == \"\" or s == \" \":\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]\n",
    "    if s == \"\" or s == \" \":\n        return s\n    if s[0] in \"abcdefghijklmnopqrstuvwxyz\":\n        return s[::-1]\n    if s[0] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return s[::-1]\n    return s\n",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\").replace(\"#\",\"#\").replace(\"@\",\"@\")",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]\n",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.toLowerCase() if s[0].isLowerCase() else s.toUpperCase()\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s == \"\"\n        return \"\"\n    else:\n        return s[0] + solve(s[1:])",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]\n",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]\n",
    "    if not s:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s\n",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toLower() if s[0].isLetter() else s[0].toUpper() + s[1:]",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s\n",
    "    if not s:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    return s\n",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.chars[0].toUpperCase() if s.chars[0].isLowerCase() else s.chars[0].toLowerCase()\n",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1] if s[0].isalpha() else s\n",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        else:\n            i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if s == \"\" or s == None:\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\").replace(\"#\",\"#\").replace(\"@\",\"@\")",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if s == \"\"\n        return s\n    else:\n        return s[0] + reverse(s[1:])",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.toLowerCase() if s[0].isLowerCase() else s.toUpperCase()\n",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s\n",
    "    if s == \"\"\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]\n",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return s",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.toLowerCase() if s[0].isLowerCase() else s.toUpperCase()\n",
    "    if s.isEmpty():\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isLetter():\n            if s[i].isLower():\n                s[i] = s[i].toUpper()\n            else:\n                s[i] = s[i].toLower()\n        i += 1\n    return s\n",
    "    if s.isEmpty():\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isLetter():\n            if s[i].isLower():\n                s[i] = s[i].toUpper()\n            else:\n                s[i] = s[i].toLower()\n        i += 1\n    return s\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[0] + reverse(s[1:])",
    "    if s[0] in \"0123456789\":\n        return s[::-1]\n    else:\n        return s\n",
    "    if not s:\n        return s\n    \n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase()\n",
    "    if not s:\n        return s\n    \n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].toUpper() if s[0].isalpha() else s[0].toLower() + s[1:]",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if s == \"\"\n        return \"\"\n    else:\n        i = 0\n        while i < len(s):\n            if s[i].isalpha():\n                if s[i].isupper():\n                    s = s[i].lower() + s[i+1:]\n                else:\n                    s = s[i].upper() + s[i+1:]\n            i += 1\n        return s",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if s[0] is not '#':\n        return s\n    else:\n        return '#' + s[1:]\n",
    "    if s == \"\" or s == \" \":\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if s.isEmpty()\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toLower() if s[0].isLower() else s[0].toUpper() + s[1:]\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.toLowerCase() if s[0].isLowerCase() else s.toUpperCase()\n",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]\n",
    "    if s.isEmpty()\n        return s\n    else:\n        return s.toLower() if s[0].isLower() else s.toUpper()\n",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]\n",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")\n",
    "    if not s: return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()\n",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if s[0] is not '#':\n        return s\n    else:\n        return '#' + s[1:].lower()\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s = s[:i] + s[i].lower() + s[i+1:]\n            else:\n                s = s[:i] + s[i].upper() + s[i+1:]\n        i += 1\n    return s",
    "    if s == \"\"\n        return \"\"\n    else:\n        i = 0\n        while i < len(s):\n            if s[i].isalpha():\n                if s[i].isupper():\n                    s[i] = s[i].lower()\n                else:\n                    s[i] = s[i].upper()\n            i += 1\n        return s\n",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return s\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]\n",
    "    if not s:\n        return s\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]",
    "    if len(s) == 0:\n        return s\n    else:\n        i = 0\n        while i < len(s):\n            if s[i].isalpha():\n                if s[i].islower():\n                    s[i] = s[i].upper()\n                else:\n                    s[i] = s[i].lower()\n            i += 1\n        return s\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]",
    "    if not s:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s\n",
    "    if s.isEmpty() or s.length() == 1:\n        return s\n    \n    i = 0\n    while i < s.length() - 1:\n        if s[i].isLetter():\n            if s[i].isLower():\n                s[i] = s[i].toUpper()\n            else:\n                s[i] = s[i].toLower()\n        i += 1\n    return s",
    "    if s == \"\"\n        return \"\"\n    else:\n        return s[0] + solve(s[1:])",
    "    if s == \"\" or s == \" \":\n        return s\n    \n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s\n",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i+1:]\n        i += 1\n    return s",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if not s:\n        return s\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if not s:\n        return s\n    \n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if s == \"\" or s == \" \":\n        return s\n    if s[0] in \"abcdefghijklmnopqrstuvwxyz\":\n        return s[::-1]\n    if s[0] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return s[::-1]\n    return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s\n",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if s == \"\" or s == \" \":\n        return s\n    \n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if s.isEmpty()\n        return s\n    else:\n        i = 0\n        while i < len(s):\n            if s[i].isLetter():\n                if s[i].isLower():\n                    s[i] = s[i].toUpper()\n                else:\n                    s[i] = s[i].toLower()\n            i += 1\n        return s\n",
    "    if not s:\n        return s\n    \n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n",
    "    if not s: return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return s",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]\n",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]\n",
    "    if s == \"\" or s == \" \":\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s\n",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s\n",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1]\n",
    "    if s == \"\" or s == \" \":\n        return s\n    \n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if not s: return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if not s:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return s",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + s[1:]\n",
    "    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() if s[0].isalpha() else s[0].lower() + solve(s[1:])",
    "    if len(s) == 0:\n        return s\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return s",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\").replace(\"#\",\"#\")",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toLower() if s[0].isLetter() else s[0].toUpper() + s[1:]",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if s.isEmpty()\n        return s\n    else:\n        return s.toLowerCase() if s[0].isLowerCase() else s.toUpperCase()",
    "    if s == \"\"\n        return \"\"\n    else:\n        i = 0\n        while i < len(s):\n            if s[i].isalpha():\n                if s[i].islower():\n                    s[i] = s[i].upper()\n                else:\n                    s[i] = s[i].lower()\n            i += 1\n        return s\n",
    "    if s == \"\" or s[0] == \"#\":\n        return s\n    if s[0] in \"0123456789\":\n        return s[::-1]\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if s == \"\" or s == \" \":\n        return s\n    else:\n        return s[::-1].replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\")",
    "    if s.isEmpty():\n        return s\n    else:\n        return s[0].toUpper() if s[0].isLower() else s[0].toLower() + s[1:]",
    "    if s.isEmpty():\n        return s\n    else:\n        return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase()\n"
  ],
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ]
}