{
  "name": "HumanEval_100_make_a_pile",
  "language": "jl",
  "prompt": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ypuza9l.jl:16\nin expression starting at /tmp/tmp8ypuza9l.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmpr1utn5.jl:16\nin expression starting at /tmp/tmpmpr1utn5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr8qa1a3o.jl:16\nin expression starting at /tmp/tmpr8qa1a3o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8mbyn6i0.jl:16\nin expression starting at /tmp/tmp8mbyn6i0.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 1:\n        return Vector{Int64}[1]\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp22_8rcoh.jl:16\nin expression starting at /tmp/tmp22_8rcoh.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmputdj1ga3.jl:16\nin expression starting at /tmp/tmputdj1ga3.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprzeymbys.jl:16\nin expression starting at /tmp/tmprzeymbys.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprzeymbys.jl:16\nin expression starting at /tmp/tmprzeymbys.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + make_a_pile(n / 2)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdi8sbs72.jl:16\nin expression starting at /tmp/tmpdi8sbs72.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4zt_lepm.jl:16\nin expression starting at /tmp/tmp4zt_lepm.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpldes45oj.jl:16\nin expression starting at /tmp/tmpldes45oj.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9athtvc5.jl:16\nin expression starting at /tmp/tmp9athtvc5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n - 1) + make_a_pile(n - 2)\n        else:\n            return make_a_pile(n - 1) + make_a_pile(n - 3)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9is68cn8.jl:16\nin expression starting at /tmp/tmp9is68cn8.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7pg8_640.jl:16\nin expression starting at /tmp/tmp7pg8_640.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp71f0_d9z.jl:16\nin expression starting at /tmp/tmp71f0_d9z.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1f5pgjxs.jl:16\nin expression starting at /tmp/tmp1f5pgjxs.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return []\n    if n == 1:\n        return [n]\n    if n % 2 == 0:\n        return [n, n + 1]\n    else:\n        return [n, n + 2]\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv2p_sudt.jl:16\nin expression starting at /tmp/tmpv2p_sudt.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphiqphbom.jl:16\nin expression starting at /tmp/tmphiqphbom.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7pg8_640.jl:16\nin expression starting at /tmp/tmp7pg8_640.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyresahes.jl:16\nin expression starting at /tmp/tmpyresahes.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr8qa1a3o.jl:16\nin expression starting at /tmp/tmpr8qa1a3o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvltgye5y.jl:16\nin expression starting at /tmp/tmpvltgye5y.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf2av9fdb.jl:16\nin expression starting at /tmp/tmpf2av9fdb.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + make_a_pile(n / 2)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfw5t6w_2.jl:16\nin expression starting at /tmp/tmpfw5t6w_2.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkcumxydw.jl:16\nin expression starting at /tmp/tmpkcumxydw.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn44jnya5.jl:16\nin expression starting at /tmp/tmpn44jnya5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphiqphbom.jl:16\nin expression starting at /tmp/tmphiqphbom.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzm1f0l8y.jl:16\nin expression starting at /tmp/tmpzm1f0l8y.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([n])\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp87qiky51.jl:16\nin expression starting at /tmp/tmp87qiky51.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([n])\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp42rw1r_4.jl:16\nin expression starting at /tmp/tmp42rw1r_4.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyresahes.jl:16\nin expression starting at /tmp/tmpyresahes.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8mbyn6i0.jl:16\nin expression starting at /tmp/tmp8mbyn6i0.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyresahes.jl:16\nin expression starting at /tmp/tmpyresahes.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9athtvc5.jl:16\nin expression starting at /tmp/tmp9athtvc5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpalw1cygv.jl:16\nin expression starting at /tmp/tmpalw1cygv.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzm1f0l8y.jl:16\nin expression starting at /tmp/tmpzm1f0l8y.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf2av9fdb.jl:16\nin expression starting at /tmp/tmpf2av9fdb.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + make_a_pile(n / 2)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfw5t6w_2.jl:16\nin expression starting at /tmp/tmpfw5t6w_2.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n - 1) + make_a_pile(n - 2)\n    else:\n        return make_a_pile(n - 1) + make_a_pile(n - 3)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ptef0c_.jl:16\nin expression starting at /tmp/tmp8ptef0c_.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8mbyn6i0.jl:16\nin expression starting at /tmp/tmp8mbyn6i0.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8mbyn6i0.jl:16\nin expression starting at /tmp/tmp8mbyn6i0.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9athtvc5.jl:16\nin expression starting at /tmp/tmp9athtvc5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0punuc51.jl:16\nin expression starting at /tmp/tmp0punuc51.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw3e8mhev.jl:16\nin expression starting at /tmp/tmpw3e8mhev.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return []\n    elif n == 1:\n        return [n]\n    else:\n        if n % 2 == 0:\n            return [n, n + 1]\n        else:\n            return [n, n + 2]\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa8tqfzku.jl:16\nin expression starting at /tmp/tmpa8tqfzku.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl_2y_8w2.jl:16\nin expression starting at /tmp/tmpl_2y_8w2.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9la0n9_z.jl:16\nin expression starting at /tmp/tmp9la0n9_z.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf2av9fdb.jl:16\nin expression starting at /tmp/tmpf2av9fdb.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn44jnya5.jl:16\nin expression starting at /tmp/tmpn44jnya5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1f5pgjxs.jl:16\nin expression starting at /tmp/tmp1f5pgjxs.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return []\n    elif n == 1:\n        return [n]\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdntoh2tk.jl:16\nin expression starting at /tmp/tmpdntoh2tk.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_1bskwt_.jl:16\nin expression starting at /tmp/tmp_1bskwt_.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7pg8_640.jl:16\nin expression starting at /tmp/tmp7pg8_640.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmpr1utn5.jl:16\nin expression starting at /tmp/tmpmpr1utn5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0punuc51.jl:16\nin expression starting at /tmp/tmp0punuc51.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n - 1) + make_a_pile(n - 2)\n        else:\n            return make_a_pile(n - 1) + make_a_pile(n - 3)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9is68cn8.jl:16\nin expression starting at /tmp/tmp9is68cn8.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf2av9fdb.jl:16\nin expression starting at /tmp/tmpf2av9fdb.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp30gc0d29.jl:16\nin expression starting at /tmp/tmp30gc0d29.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyresahes.jl:16\nin expression starting at /tmp/tmpyresahes.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf2av9fdb.jl:16\nin expression starting at /tmp/tmpf2av9fdb.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n - 1) + make_a_pile(n + 1)\n    else:\n        return make_a_pile(n - 1) + make_a_pile(n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuqfzkuc3.jl:16\nin expression starting at /tmp/tmpuqfzkuc3.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi988bkz1.jl:16\nin expression starting at /tmp/tmpi988bkz1.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        return make_a_pile(n - 1) + make_a_pile(n - 2)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppfek5k_v.jl:16\nin expression starting at /tmp/tmppfek5k_v.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp996j944h.jl:16\nin expression starting at /tmp/tmp996j944h.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf2av9fdb.jl:16\nin expression starting at /tmp/tmpf2av9fdb.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ypuza9l.jl:16\nin expression starting at /tmp/tmp8ypuza9l.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn44jnya5.jl:16\nin expression starting at /tmp/tmpn44jnya5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf2av9fdb.jl:16\nin expression starting at /tmp/tmpf2av9fdb.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9la0n9_z.jl:16\nin expression starting at /tmp/tmp9la0n9_z.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyresahes.jl:16\nin expression starting at /tmp/tmpyresahes.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8mbyn6i0.jl:16\nin expression starting at /tmp/tmp8mbyn6i0.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([n])\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk363cq5n.jl:16\nin expression starting at /tmp/tmpk363cq5n.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyresahes.jl:16\nin expression starting at /tmp/tmpyresahes.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}([n])\n    if n % 2 == 0:\n        return make_a_pile(n - 1) + make_a_pile(n - 2)\n    else:\n        return make_a_pile(n - 1) + make_a_pile(n - 3)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_m6n1yge.jl:16\nin expression starting at /tmp/tmp_m6n1yge.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqte1fn95.jl:16\nin expression starting at /tmp/tmpqte1fn95.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyresahes.jl:16\nin expression starting at /tmp/tmpyresahes.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8mbyn6i0.jl:16\nin expression starting at /tmp/tmp8mbyn6i0.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyresahes.jl:16\nin expression starting at /tmp/tmpyresahes.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4zt_lepm.jl:16\nin expression starting at /tmp/tmp4zt_lepm.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmpr1utn5.jl:16\nin expression starting at /tmp/tmpmpr1utn5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1f5pgjxs.jl:16\nin expression starting at /tmp/tmp1f5pgjxs.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4ehdjwsm.jl:16\nin expression starting at /tmp/tmp4ehdjwsm.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + make_a_pile(n / 2)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprgpb4xl5.jl:16\nin expression starting at /tmp/tmprgpb4xl5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf2av9fdb.jl:16\nin expression starting at /tmp/tmpf2av9fdb.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprzeymbys.jl:16\nin expression starting at /tmp/tmprzeymbys.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp71f0_d9z.jl:16\nin expression starting at /tmp/tmp71f0_d9z.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1f5pgjxs.jl:16\nin expression starting at /tmp/tmp1f5pgjxs.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ypuza9l.jl:16\nin expression starting at /tmp/tmp8ypuza9l.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvltgye5y.jl:16\nin expression starting at /tmp/tmpvltgye5y.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 1:\n        return Vector{Int64}[1]\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp22_8rcoh.jl:16\nin expression starting at /tmp/tmp22_8rcoh.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}[0]\n    elif n == 1:\n        return Vector{Int64}[1]\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph5zc38yw.jl:16\nin expression starting at /tmp/tmph5zc38yw.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp996j944h.jl:16\nin expression starting at /tmp/tmp996j944h.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4fqy1ky9.jl:16\nin expression starting at /tmp/tmp4fqy1ky9.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_1bskwt_.jl:16\nin expression starting at /tmp/tmp_1bskwt_.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnw9ant75.jl:16\nin expression starting at /tmp/tmpnw9ant75.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi988bkz1.jl:16\nin expression starting at /tmp/tmpi988bkz1.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmpr1utn5.jl:16\nin expression starting at /tmp/tmpmpr1utn5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_1bskwt_.jl:16\nin expression starting at /tmp/tmp_1bskwt_.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp30gc0d29.jl:16\nin expression starting at /tmp/tmp30gc0d29.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7pg8_640.jl:16\nin expression starting at /tmp/tmp7pg8_640.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ypuza9l.jl:16\nin expression starting at /tmp/tmp8ypuza9l.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ypuza9l.jl:16\nin expression starting at /tmp/tmp8ypuza9l.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9athtvc5.jl:16\nin expression starting at /tmp/tmp9athtvc5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8mbyn6i0.jl:16\nin expression starting at /tmp/tmp8mbyn6i0.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}[0]\n    if n == 1:\n        return Vector{Int64}[1]\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpur0cjv8k.jl:16\nin expression starting at /tmp/tmpur0cjv8k.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        return Vector{Int64}(n, n + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpagmfw5tx.jl:16\nin expression starting at /tmp/tmpagmfw5tx.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpig1wjijt.jl:16\nin expression starting at /tmp/tmpig1wjijt.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprzeymbys.jl:16\nin expression starting at /tmp/tmprzeymbys.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        return make_a_pile(n - 1) + make_a_pile(n - 2)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppfek5k_v.jl:16\nin expression starting at /tmp/tmppfek5k_v.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpckjugngo.jl:16\nin expression starting at /tmp/tmpckjugngo.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7pg8_640.jl:16\nin expression starting at /tmp/tmp7pg8_640.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp996j944h.jl:16\nin expression starting at /tmp/tmp996j944h.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([n])\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzoof45ii.jl:16\nin expression starting at /tmp/tmpzoof45ii.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz2r528lq.jl:16\nin expression starting at /tmp/tmpz2r528lq.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuv8ellpe.jl:16\nin expression starting at /tmp/tmpuv8ellpe.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi988bkz1.jl:16\nin expression starting at /tmp/tmpi988bkz1.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprbvfdlk1.jl:16\nin expression starting at /tmp/tmprbvfdlk1.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    else:\n        return make_a_pile(n - 1) + make_a_pile(n - 2)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcv5fgmkh.jl:16\nin expression starting at /tmp/tmpcv5fgmkh.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr8qa1a3o.jl:16\nin expression starting at /tmp/tmpr8qa1a3o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmpr1utn5.jl:16\nin expression starting at /tmp/tmpmpr1utn5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmpr1utn5.jl:16\nin expression starting at /tmp/tmpmpr1utn5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpckjugngo.jl:16\nin expression starting at /tmp/tmpckjugngo.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpckjugngo.jl:16\nin expression starting at /tmp/tmpckjugngo.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ypuza9l.jl:16\nin expression starting at /tmp/tmp8ypuza9l.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphiqphbom.jl:16\nin expression starting at /tmp/tmphiqphbom.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp996j944h.jl:16\nin expression starting at /tmp/tmp996j944h.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnw9ant75.jl:16\nin expression starting at /tmp/tmpnw9ant75.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([n])\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn0ph16tv.jl:16\nin expression starting at /tmp/tmpn0ph16tv.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqte1fn95.jl:16\nin expression starting at /tmp/tmpqte1fn95.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqie4r8at.jl:16\nin expression starting at /tmp/tmpqie4r8at.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyresahes.jl:16\nin expression starting at /tmp/tmpyresahes.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n - 1) + make_a_pile(n - 2)\n        else:\n            return make_a_pile(n - 1) + make_a_pile(n - 3)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpixar3yl7.jl:16\nin expression starting at /tmp/tmpixar3yl7.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([n])\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpic83gmc7.jl:16\nin expression starting at /tmp/tmpic83gmc7.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n - 1) + make_a_pile(n - 2)\n        else:\n            return make_a_pile(n - 1) + make_a_pile(n - 3)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzfm8zi4w.jl:16\nin expression starting at /tmp/tmpzfm8zi4w.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n - 1) + make_a_pile(n - 2)\n    else:\n        return make_a_pile(n - 1) + make_a_pile(n - 3)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvbfflerj.jl:16\nin expression starting at /tmp/tmpvbfflerj.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmpr1utn5.jl:16\nin expression starting at /tmp/tmpmpr1utn5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphiqphbom.jl:16\nin expression starting at /tmp/tmphiqphbom.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        return make_a_pile(n - 1) + make_a_pile(n - 2)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppfek5k_v.jl:16\nin expression starting at /tmp/tmppfek5k_v.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvltgye5y.jl:16\nin expression starting at /tmp/tmpvltgye5y.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8mbyn6i0.jl:16\nin expression starting at /tmp/tmp8mbyn6i0.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp71f0_d9z.jl:16\nin expression starting at /tmp/tmp71f0_d9z.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n - 1) + make_a_pile(n - 2)\n        else:\n            return make_a_pile(n - 1) + make_a_pile(n - 3)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpixar3yl7.jl:16\nin expression starting at /tmp/tmpixar3yl7.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzm1f0l8y.jl:16\nin expression starting at /tmp/tmpzm1f0l8y.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmpr1utn5.jl:16\nin expression starting at /tmp/tmpmpr1utn5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxm_d7rv4.jl:16\nin expression starting at /tmp/tmpxm_d7rv4.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmpr1utn5.jl:16\nin expression starting at /tmp/tmpmpr1utn5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4zt_lepm.jl:16\nin expression starting at /tmp/tmp4zt_lepm.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n % 2 == 1:\n        return Vector{Int64}(n, n + 1)\n    else:\n        return Vector{Int64}(n, n + 2)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph7sx4c4a.jl:16\nin expression starting at /tmp/tmph7sx4c4a.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprqk6h5ne.jl:16\nin expression starting at /tmp/tmprqk6h5ne.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf2av9fdb.jl:16\nin expression starting at /tmp/tmpf2av9fdb.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq691trqu.jl:16\nin expression starting at /tmp/tmpq691trqu.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp30gc0d29.jl:16\nin expression starting at /tmp/tmp30gc0d29.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf2av9fdb.jl:16\nin expression starting at /tmp/tmpf2av9fdb.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqte1fn95.jl:16\nin expression starting at /tmp/tmpqte1fn95.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmputdj1ga3.jl:16\nin expression starting at /tmp/tmputdj1ga3.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0punuc51.jl:16\nin expression starting at /tmp/tmp0punuc51.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn44jnya5.jl:16\nin expression starting at /tmp/tmpn44jnya5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg_ucdny5.jl:16\nin expression starting at /tmp/tmpg_ucdny5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([n])\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2 + 1)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpic83gmc7.jl:16\nin expression starting at /tmp/tmpic83gmc7.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8mbyn6i0.jl:16\nin expression starting at /tmp/tmp8mbyn6i0.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n - 1) + make_a_pile(n - 2)\n    else:\n        return make_a_pile(n - 1) + make_a_pile(n - 3)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292598,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvbfflerj.jl:16\nin expression starting at /tmp/tmpvbfflerj.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n / 2) + make_a_pile(n / 2)\n    else:\n        return make_a_pile(n / 2) + make_a_pile(n / 2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9athtvc5.jl:16\nin expression starting at /tmp/tmp9athtvc5.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    if n == 1:\n        return Vector{Int64}\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8mbyn6i0.jl:16\nin expression starting at /tmp/tmp8mbyn6i0.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsa1qd93o.jl:16\nin expression starting at /tmp/tmpsa1qd93o.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}\n    elif n == 1:\n        return Vector{Int64}\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb__z61ik.jl:16\nin expression starting at /tmp/tmpb__z61ik.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}([n])\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2 + 1)\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd82ilkdc.jl:16\nin expression starting at /tmp/tmpd82ilkdc.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqte1fn95.jl:16\nin expression starting at /tmp/tmpqte1fn95.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n / 2) + make_a_pile(n / 2)\n        else:\n            return make_a_pile(n / 2) + make_a_pile(n / 2) + make_a_pile(n / 2)\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292600,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4qiys3qg.jl:16\nin expression starting at /tmp/tmp4qiys3qg.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    elif n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzm1f0l8y.jl:16\nin expression starting at /tmp/tmpzm1f0l8y.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}(0)\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqte1fn95.jl:16\nin expression starting at /tmp/tmpqte1fn95.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    if n == 1:\n        return Vector{Int64}(1)\n    if n % 2 == 0:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    else:\n        return make_a_pile(n/2) + make_a_pile(n/2) + 1\n\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk3eyq7d.jl:16\nin expression starting at /tmp/tmpsk3eyq7d.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a vector, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64} \n    if n == 0:\n        return Vector{Int64}()\n    elif n == 1:\n        return Vector{Int64}(1)\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n/2) + make_a_pile(n/2)\n        else:\n            return make_a_pile(n/2) + make_a_pile(n/2) + 1\nusing Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3) == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) == [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi988bkz1.jl:16\nin expression starting at /tmp/tmpi988bkz1.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}