{
  "name": "HumanEval_18_how_many_times",
  "language": "jl",
  "prompt": "\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n",
  "tests": "using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n",
  "completions": [
    "    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    if substring == \"\"\n        return 0\n    else:\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    return how_many_times_helper(string, substring, 0, len(string))",
    "    return count_overlaping_cases(string, substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    return how_many_times_rec(string, substring, 0)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    return len(string) - string.indexOf(substring) - 1",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += j - i\n        i = j\n    return count",
    "    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    return len(string) - string.indexOf(substring) - 1",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i == len(substring):\n            count += 1\n        i = j\n    return count",
    "    return sum(1 for i in range(0, len(string) - len(substring) + 1) \n               if string[i:i + len(substring)] == substring)",
    "    if substring == \"\" or string == \"\" \n        return 0 \n    else: \n        return substring.count(string) ",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(substring) + how_many_times(string, substring[1:])",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return how_many_times_rec(string, substring, 0)",
    "    return how_many_times_rec(string, substring, 0)",
    "    return len(string) - string.indexOf(substring) - 1",
    "    return how_many_times_rec(string, substring, 0)",
    "    return len(string) - string.indexOf(substring) - 1",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    return how_many_times_rec(string, substring, 0)",
    "    return how_many_times(string, substring, 0, len(string))",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i == len(substring):\n            count += 1\n        i = j\n    return count",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(substring) + how_many_times(string, substring[1:])",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(substring, 0, string.length())",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return how_many_times(string, substring, 0, len(string))",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(substring) + how_many_times(string, substring[1:])",
    "    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])",
    "    if substring == \"\"\n        return 0\n    else:\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    return how_many_times_rec(string, substring, 0)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    return how_many_times_rec(string, substring, 0, 0)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return len(string) - string.indexOf(substring) - 1",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    if substring == \"\" then\n        return 0\n    else\n        return substring.count(string, 0, substring.length)",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return count(string, substring, 0, len(string))",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j <= len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    return how_many_times_helper(string, substring, 0, len(string))",
    "    return count(string, substring)",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return count(string, substring)",
    "    if substring == \"\" then return 0\n    return substring.count(substring, 0, string.length)",
    "    return count(string, substring)",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += j - i\n        i = j\n    return count",
    "    return len(string.split(substring)) - 1",
    "    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring, 0, string.length)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = 0\n        while j < len(substring):\n            if string[i + j] == substring[j]:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    return how_many_times_helper(string, substring, 0, len(string))",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    return how_many_times_rec(string, substring, 0)",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return how_many_times_rec(string, substring, 0)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return count(string, substring)",
    "    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])",
    "    return count(string, substring)",
    "    if substring == \"\" or string == \"\"\n        return 0\n    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:], substring[1:])",
    "    return count_overlaping_cases(string, substring)",
    "    return how_many_times_rec(string, substring, 0)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n            if j == len(string):\n                count += 1\n                break\n        i = j\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    if substring == \"\"\n        return 0\n    else:\n        return substring.count(substring) + how_many_times(string, substring[1:])",
    "    return how_many_times_rec(string, substring, 0, 0)",
    "    return len(string) - string.count(substring) - substring.count(string)",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return how_many_times_helper(string, substring, 0, len(string))",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring, 0, string.length)",
    "    return len(string.findall(substring))",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring) + how_many_times(string, substring[1:])",
    "    return len(string) - string.indexOf(substring) - 1",
    "    return how_many_times_rec(string, substring, 0)",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += j - i\n        i = j\n    return count",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring, 0, string.length)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring)",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return how_many_times_helper(string, substring, 0, len(string))",
    "    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring, 0, string.length)",
    "    if substring == \"\" or string == \"\"\n        return 0\n    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:], substring[1:])",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    return how_many_times_rec(string, substring, 0, 0)",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            count += 1\n            i += 1\n            while i < len(string) and substring[0] == string[i]:\n                count += 1\n                i += 1\n        else:\n            i += 1\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i == len(substring):\n            count += 1\n        i = j\n    return count",
    "    return how_many_times_rec(string, substring, 0, 0)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    return how_many_times_rec(string, substring, 0)",
    "    return len(string) - string.indexOf(substring) - 1",
    "    string = string\n    substring = substring\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count",
    "    return how_many_times_rec(string, substring, 0)",
    "    return how_many_times_rec(string, substring, 0, 0)",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = 0\n        while j < len(substring):\n            if string[i + j] == substring[j]:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    return how_many_times(string, substring, 0)",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    return how_many_times_rec(string, substring, 0)",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j <= len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    return how_many_times_helper(string, substring, 0, len(string))",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return how_many_times_helper(string, substring, 0, len(string))",
    "    return how_many_times_rec(string, substring, 0)",
    "    return len(string) - string.indexOf(substring) - 1",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return how_many_times_rec(string, substring, 0)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    return count(string, substring)",
    "    if substring == \"\"\n        return 0\n    else\n        return string.count(substring, 0, len(string))",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    if substring == \"\" then\n        return 0\n    else\n        return substring.count(substring, 0, string.length)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i == len(substring):\n            count += 1\n        i = j\n    return count",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
    "    return count_overlaping_cases(string, substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    if substring == \"\"\n        return 0\n    else\n        return string.count(substring, 0, len(string))",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string) and substring == string[j:j+len(substring)]:\n            j += 1\n            count += 1\n        i = j\n    return count",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    return len(string) - string.indexOf(substring) - 1",
    "    return how_many_times_rec(string, substring, 0)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    return len(string) - string.indexOf(substring) - 1",
    "    if substring == \"\"\n        return 0\n    else\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    if substring == \"\"\n        return 0\n    else:\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    return count(string, substring)",
    "    return len(string) - string.indexOf(substring) - 1",
    "    return how_many_times_helper(string, substring, 0, len(string))",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    if substring == \"\"\n        return 0\n    else:\n        return substring.count(string) + how_many_times(string[1:], substring)",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return len(string.findall(substring))",
    "    return how_many_times_rec(string, substring, 0)",
    "    return count_overlaping_cases(string, substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j < len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    return len(string) - string.indexOf(substring) - substring.length + 1",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i + len(substring)\n        while j <= len(string):\n            if string[i:j] == substring:\n                count += 1\n            j += 1\n        i += 1\n    return count",
    "    return how_many_times_rec(string, substring, 0, len(string))",
    "    return count_overlaping_substring(string, substring)",
    "    string = string.toLower()\n    substring = substring.toLower()\n    count = 0\n    i = 0\n    while i < len(string):\n        j = i\n        while j < len(string) and substring[0] == string[j]:\n            j += 1\n        if j - i > 0:\n            count += 1\n        i = j\n    return count",
    "    return how_many_times_rec(string, substring, 0)",
    "    string = string\n    substring = substring\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            count = count + 1\n            i = i + 1\n            while i < len(string) and substring[0] == string[i]:\n                count = count + 1\n                i = i + 1\n        else:\n            i = i + 1\n    return count"
  ],
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ]
}