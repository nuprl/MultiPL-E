language: swift
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.count == 0 {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpm_1q8v1k/tmpm_1q8v1k.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96a56b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96a53b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96a53b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96a53af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_1q8v1k                        0x000055b02d16578b <unavailable> + 6027

    5    libc.so.6                          0x00002b96a58a5460 __libc_start_main +
    245

    6    tmpm_1q8v1k                        0x000055b02d1652d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp38im6a6_/tmp38im6a6_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac521faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac521ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac521ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac521ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38im6a6_                        0x000055824847481b <unavailable> + 6171

    5    libc.so.6                          0x00002ac522196460 __libc_start_main +
    245

    6    tmp38im6a6_                        0x0000558248474369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.last == \"[\" {\n                stack.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpuwhbjesk/tmpuwhbjesk.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8f7ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8f79d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8f79d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8f79d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuwhbjesk                        0x000055a9580d686b <unavailable> + 6251

    5    libc.so.6                          0x00002af8f7ece460 __libc_start_main +
    245

    6    tmpuwhbjesk                        0x000055a9580d63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in string {\n\
    \        if c == \"[\" {\n            stack.push(c)\n        } else if c == \"\
    ]\" {\n            if stack.isEmpty {\n                return false\n        \
    \    } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx_o6cvcy.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.count == 0 {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpm_1q8v1k/tmpm_1q8v1k.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96a56b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96a53b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96a53b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96a53af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_1q8v1k                        0x000055b02d16578b <unavailable> + 6027

    5    libc.so.6                          0x00002b96a58a5460 __libc_start_main +
    245

    6    tmpm_1q8v1k                        0x000055b02d1652d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.count == 0 {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpm_1q8v1k/tmpm_1q8v1k.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96a56b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96a53b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96a53b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96a53af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_1q8v1k                        0x000055b02d16578b <unavailable> + 6027

    5    libc.so.6                          0x00002b96a58a5460 __libc_start_main +
    245

    6    tmpm_1q8v1k                        0x000055b02d1652d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp38im6a6_/tmp38im6a6_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac521faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac521ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac521ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac521ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38im6a6_                        0x000055824847481b <unavailable> + 6171

    5    libc.so.6                          0x00002ac522196460 __libc_start_main +
    245

    6    tmp38im6a6_                        0x0000558248474369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.count == 0 {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpm_1q8v1k/tmpm_1q8v1k.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96a56b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96a53b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96a53b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96a53af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_1q8v1k                        0x000055b02d16578b <unavailable> + 6027

    5    libc.so.6                          0x00002b96a58a5460 __libc_start_main +
    245

    6    tmpm_1q8v1k                        0x000055b02d1652d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(element: char)\n     \
    \   } else if char == \"]\" {\n            if stack.isEmpty() {\n            \
    \    return false\n            } else {\n                stack.pop()\n       \
    \     }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv98j4qke.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    // TODO: Implement\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpuh25tzsv/tmpuh25tzsv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b313b638c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313b32fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313b32f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313b32e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuh25tzsv                        0x0000560d00e4425b <unavailable> + 4699

    5    libc.so.6                          0x00002b313b824460 __libc_start_main +
    245

    6    tmpuh25tzsv                        0x0000560d00e43ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in string {\n\
    \        if c == \"[\" {\n            stack.push(c)\n        } else if c == \"\
    ]\" {\n            if stack.isEmpty {\n                return false\n        \
    \    } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx_o6cvcy.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.count == 0 {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpm_1q8v1k/tmpm_1q8v1k.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96a56b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96a53b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96a53b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96a53af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_1q8v1k                        0x000055b02d16578b <unavailable> + 6027

    5    libc.so.6                          0x00002b96a58a5460 __libc_start_main +
    245

    6    tmpm_1q8v1k                        0x000055b02d1652d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.count > 0 {\n                stack.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpq3d_dnww/tmpq3d_dnww.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b278b19dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b278ae94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b278ae94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b278ae937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3d_dnww                        0x0000564360bdb78b <unavailable> + 6027

    5    libc.so.6                          0x00002b278b389460 __libc_start_main +
    245

    6    tmpq3d_dnww                        0x0000564360bdb2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(element: char)\n     \
    \   } else if char == \"]\" {\n            if stack.isEmpty() {\n            \
    \    return false\n            } else {\n                stack.pop()\n       \
    \     }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv98j4qke.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp38im6a6_/tmp38im6a6_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac521faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac521ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac521ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac521ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38im6a6_                        0x000055824847481b <unavailable> + 6171

    5    libc.so.6                          0x00002ac522196460 __libc_start_main +
    245

    6    tmp38im6a6_                        0x0000558248474369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"\
    []]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zki9j_.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in string\
    \ {\n        if char == \"[\" {\n            stack.push(char)\n        } else\
    \ if char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnimuseal.swift:18:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013503
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return true if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string:\
    \ \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n\
    /// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\"\
    )\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n\
    \        if char == \"[\" {\n            stack.append(char)\n        } else if\
    \ char == \"]\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp4uuu4n0h/tmp4uuu4n0h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2bdd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2baccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2bacc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2bacb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4uuu4n0h                        0x000055c12fdd57bb <unavailable> + 6075

    5    libc.so.6                          0x00002b6d2bfc1460 __libc_start_main +
    245

    6    tmp4uuu4n0h                        0x000055c12fdd5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013504
