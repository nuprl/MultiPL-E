name: HumanEval_150_x_or_y
language: swift
prompt: "\n/// A simple program which should return the value of x if n is \n/// a\
  \ prime number and should return the value of y otherwise.\n/// Examples:\n/// >>>\
  \ x_or_y(n: 7, x: 34, y: 12)\n/// 34\n/// >>> x_or_y(n: 15, x: 8, y: 5)\n/// 5\n\
  func x_or_y(n: Int, x: Int, y: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(x_or_y(n: 7, x: 34, y: 12) == 34)\nassert(x_or_y(n:\
  \ 15, x: 8, y: 5) == 5)\nassert(x_or_y(n: 3, x: 33, y: 5212) == 33)\nassert(x_or_y(n:\
  \ 1259, x: 3, y: 52) == 3)\nassert(x_or_y(n: 7919, x: -1, y: 12) == -1)\nassert(x_or_y(n:\
  \ 3609, x: 1245, y: 583) == 583)\nassert(x_or_y(n: 91, x: 56, y: 129) == 129)\n\
  assert(x_or_y(n: 6, x: 34, y: 1234) == 1234)\nassert(x_or_y(n: 1, x: 2, y: 0) ==\
  \ 0)\nassert(x_or_y(n: 2, x: 2, y: 0) == 2)"
completions: ['    return 0', '    return 0', "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", '    return 0', '    return 0', " \
    \   if is_prime(n: n) {\n        return x\n    } else {\n        return y\n  \
    \  }", "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n      \
    \  return y\n    }", '    return n.isPrime() ? x : y', '    return 0', "    if\
    \ is_prime(n: n) {\n        return x\n    } else {\n        return y\n    }",
  '    return is_prime(n: n) ? x : y', '    return n.isPrime() ? x : y', "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", '    return
    0', '    return 0', "    if is_prime(n: n) {\n        return x\n    } else {\n\
    \        return y\n    }", '    return n.isPrime() ? x : y', "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", '    return
    0', '    return is_prime(n: n) ? x : y', '    return 0', '    return 0', '    return
    0', "    if is_prime(n: n) {\n        return x\n    } else {\n        return y\n\
    \    }", "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", '    return 0', "    if is_prime(n: n) {\n        return x\n    }\
    \ else {\n        return y\n    }", "    if is_prime(n: n) {\n        return x\n\
    \    } else {\n        return y\n    }", '    return 0', '    return n.isPrime()
    ? x : y', "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n      \
    \  return y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n\
    \        return y\n    }", '    return n % 2 == 0 ? y : x', "    // TODO: Write\
    \ your implementation here\n    return 0", "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n      \
    \  return x\n    } else {\n        return y\n    }", '    return n.isPrime() ?
    x : y', '    return is_prime(n: n) ? x : y', "    if is_prime(n: n) {\n      \
    \  return x\n    } else {\n        return y\n    }", '    return n % 2 == 0 ?
    y : x', "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n      \
    \  return y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n\
    \        return y\n    }", "    if is_prime(n: n) {\n        return x\n    } else\
    \ {\n        return y\n    }", '    return 0', "    if is_prime(n: n) {\n    \
    \    return x\n    } else {\n        return y\n    }", "    if is_prime(n: n)\
    \ {\n        return x\n    } else {\n        return y\n    }", '    return 0',
  '    return 0', '    return n.isPrime() ? x : y', "    var result = 0\n    if is_prime(n:\
    \ n) {\n        result = x\n    } else {\n        result = y\n    }\n    return\
    \ result", "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n      \
    \  return y\n    }", '    return 0', '    return is_prime(n: n) ? x : y', '    return
    0', "    if is_prime(n: n) {\n        return x\n    } else {\n        return y\n\
    \    }", "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n      \
    \  return y\n    }", '    return 0', "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n      \
    \  return x\n    } else {\n        return y\n    }", '    return 0', "    var\
    \ result = 0\n    if is_prime(n: n) {\n        result = x\n    } else {\n    \
    \    result = y\n    }\n    return result", '    return n % 2 == 0 ? y : x', " \
    \   if is_prime(n: n) {\n        return x\n    } else {\n        return y\n  \
    \  }", "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n      \
    \  return y\n    }", '    return 0', "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", "    // TODO: Implement this function\n\
    \    return 0", "    if is_prime(n: n) {\n        return x\n    } else {\n   \
    \     return y\n    }", "    if is_prime(n: n) {\n        return x\n    } else\
    \ {\n        return y\n    }", "    if is_prime(n: n) {\n        return x\n  \
    \  } else {\n        return y\n    }", "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", '    return is_prime(n: n) ? x :
    y', "    if is_prime(n: n) {\n        return x\n    } else {\n        return y\n\
    \    }", "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n      \
    \  return y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n\
    \        return y\n    }", "    var result = 0\n    if n % 2 == 0 {\n        result\
    \ = y\n    } else {\n        result = x\n    }\n    return result", "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", '    return
    is_prime(n: n) ? x : y', '    return 0', "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n      \
    \  return x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n\
    \        return x\n    } else {\n        return y\n    }", '    return 0', '    return
    0', '    return n.isPrime() ? x : y', "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", '    return 0', "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", '    return
    0', '    return is_prime(n: n) ? x : y', "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", '    return 0', '    return 0', '    return
    0', '    return is_prime(n: n) ? x : y', "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n      \
    \  return x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n\
    \        return x\n    } else {\n        return y\n    }", '    return 0', " \
    \   if is_prime(n: n) {\n        return x\n    } else {\n        return y\n  \
    \  }", "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n      \
    \  return y\n    }", '    return n.isPrime() ? x : y', '    return n.isPrime()
    ? x : y', '    return 0', '    return n.isPrime() ? x : y', "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", '    return
    0', '    return 0', '    return n.isPrime() ? x : y', "    if is_prime(n: n) {\n\
    \        return x\n    } else {\n        return y\n    }", "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", '    return
    0', "    if is_prime(n: n) {\n        return x\n    } else {\n        return y\n\
    \    }", '    return n.isPrime() ? x : y', "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", '    return is_prime(n: n) ? x :
    y', "    if is_prime(n: n) {\n        return x\n    } else {\n        return y\n\
    \    }", "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n      \
    \  return y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n\
    \        return y\n    }", '    return 0', '    return 0', '    return n.isPrime()
    ? x : y', "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", '    return n.isPrime() ? x : y', "    if n.isPrime() {\n       \
    \ return x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n\
    \        return x\n    } else {\n        return y\n    }", '    return is_prime(n:
    n) ? x : y', '    return 0', '    return is_prime(n: n) ? x : y', "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", '    return
    0', '    return 0', "    if is_prime(n: n) {\n        return x\n    } else {\n\
    \        return y\n    }", "    if is_prime(n: n) {\n        return x\n    } else\
    \ {\n        return y\n    }", "    if is_prime(n: n) {\n        return x\n  \
    \  } else {\n        return y\n    }", "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n      \
    \  return x\n    } else {\n        return y\n    }", '    return 0', '    return
    0', "    if is_prime(n: n) {\n        return x\n    } else {\n        return y\n\
    \    }", "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", "    if is_prime(n: n) {\n        return x\n    } else {\n      \
    \  return y\n    }", '    return n.isPrime() ? x : y', '    return 0', '    return
    0', '    return 0', '    return 0', "    if is_prime(n: n) {\n        return x\n\
    \    } else {\n        return y\n    }", '    return n.isPrime() ? x : y', " \
    \   if is_prime(n: n) {\n        return x\n    } else {\n        return y\n  \
    \  }", '    return 0', '    return 0', "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n      \
    \  return x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n\
    \        return x\n    } else {\n        return y\n    }", '    return 0', " \
    \   if is_prime(n: n) {\n        return x\n    } else {\n        return y\n  \
    \  }", '    return n % 2 == 0 ? y : x', "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n      \
    \  return x\n    } else {\n        return y\n    }", '    return n % 2 == 0 ?
    y : x', "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", '    return is_prime(n: n) ? x : y', '    return is_prime(n: n) ?
    x : y', '    return 0', '    return n % 2 == 0 ? y : x', "    if is_prime(n: n)\
    \ {\n        return x\n    } else {\n        return y\n    }", '    return n.isPrime()
    ? x : y', '    return 0', "    if is_prime(n: n) {\n        return x\n    } else\
    \ {\n        return y\n    }", "    if is_prime(n: n) {\n        return x\n  \
    \  } else {\n        return y\n    }", '    return 0', "    if is_prime(n: n)\
    \ {\n        return x\n    } else {\n        return y\n    }", "    if is_prime(n:\
    \ n) {\n        return x\n    } else {\n        return y\n    }", '    return
    0', "    if is_prime(n: n) {\n        return x\n    } else {\n        return y\n\
    \    }", "    if is_prime(n: n) {\n        return x\n    } else {\n        return\
    \ y\n    }", '    return n.isPrime() ? x : y', '    return 0', '    return 0',
  '    return is_prime(n: n) ? x : y', "    if is_prime(n: n) {\n        return x\n\
    \    } else {\n        return y\n    }", "    if is_prime(n: n) {\n        return\
    \ x\n    } else {\n        return y\n    }", "    if is_prime(n: n) {\n      \
    \  return x\n    } else {\n        return y\n    }"]
stop_tokens:
- "\n}"
