language: swift
name: HumanEval_161_solve
results:
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpylyqlddg.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggle() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpye22d95r.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggle() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpye22d95r.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggle'\n    return s.map { $0.isLetter ? $0.toggle() : $0 }\n\
    \                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpylyqlddg.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpdhan4kuj/tmpdhan4kuj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add3d325c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add3d01cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add3d01c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add3d01b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhan4kuj                        0x000055e2c49fa8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002add3d511460 __libc_start_main +
    245

    6    tmpdhan4kuj                        0x000055e2c49fa429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return String(s.reversed())\n    }\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result += String(c.isUppercase ? c.lowercased() : c.uppercased())\n       \
    \ } else {\n            result += String(c)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_rregeta.swift:15:33: error: cannot find 'CharacterSet' in scope\n\
    \    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n            \
    \                    ^~~~~~~~~~~~\n/tmp/tmp_rregeta.swift:15:10: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n       ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return String(s.reversed())\n    }\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp508k8z95.swift:15:33: error: cannot find 'CharacterSet' in scope\n\
    \    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n            \
    \                    ^~~~~~~~~~~~\n/tmp/tmp508k8z95.swift:15:10: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n       ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return String(s.reversed())\n    }\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result += String(c.isUppercase ? c.lowercased() : c.uppercased())\n       \
    \ } else {\n            result += String(c)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_rregeta.swift:15:33: error: cannot find 'CharacterSet' in scope\n\
    \    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n            \
    \                    ^~~~~~~~~~~~\n/tmp/tmp_rregeta.swift:15:10: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n       ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxishqhth/tmpxishqhth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26402dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae263d24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae263d24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae263d237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxishqhth                        0x0000564ae1ba08d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae264219460 __libc_start_main +
    245

    6    tmpxishqhth                        0x0000564ae1ba0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    guard !s.isEmpty else { return\
    \ \"\" }\n    let letters = s.filter { $0.isLetter }\n    guard !letters.isEmpty\
    \ else { return String(s.reversed()) }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.contains(\"[a-zA-Z]\"\
    ) {\n        return String(s.reversed())\n    } else {\n        return s.lowercased()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp0lawhf6n/tmp0lawhf6n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90557adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90554a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90554a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90554a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0lawhf6n                        0x00005627493f45e7 <unavailable> + 5607

    5    libc.so.6                          0x00002b9055999460 __libc_start_main +
    245

    6    tmp0lawhf6n                        0x00005627493f4229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.isEmpty ? \"\" : String(s.map\
    \ { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpv0n6eu2i/tmpv0n6eu2i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69f1a7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69f1771b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69f1771988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69f17707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0n6eu2i                        0x0000558da282e767 <unavailable> + 5991

    5    libc.so.6                          0x00002b69f1c66460 __libc_start_main +
    245

    6    tmpv0n6eu2i                        0x0000558da282e2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = CharacterSet.letters\n\
    \    let digits = CharacterSet.decimalDigits\n    var result = \"\"\n    for c\
    \ in s {\n        if letters.contains(c.unicodeScalars.first!) {\n           \
    \ result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ if digits.contains(c.unicodeScalars.first!) {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp2gincscm.swift:15:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n/tmp/tmp2gincscm.swift:16:18:\
    \ error: cannot find 'CharacterSet' in scope\n    let digits = CharacterSet.decimalDigits\n\
    \                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxishqhth/tmpxishqhth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26402dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae263d24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae263d24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae263d237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxishqhth                        0x0000564ae1ba08d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae264219460 __libc_start_main +
    245

    6    tmpxishqhth                        0x0000564ae1ba0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = CharacterSet.letters\n\
    \    var result = \"\"\n    for char in s {\n        if letters.contains(char.unicodeScalars.first!)\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmptjr5m_k9.swift:15:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggle() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpye22d95r.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggle() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpye22d95r.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggle'\n    return s.map { $0.isLetter ? $0.toggle() : $0 }\n\
    \                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpylyqlddg.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    let\
    \ letters = CharacterSet.letters\n    for char in s {\n        if letters.contains(char.unicodeScalars.first!)\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp2z0fl9om.swift:16:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    var\
    \ isLetter = false\n    for char in s {\n        if char.isLetter {\n        \
    \    result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \            isLetter = true\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    if !isLetter {\n        result = String(result.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpylyqlddg.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxishqhth/tmpxishqhth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26402dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae263d24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae263d24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae263d237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxishqhth                        0x0000564ae1ba08d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae264219460 __libc_start_main +
    245

    6    tmpxishqhth                        0x0000564ae1ba0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpylyqlddg.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    var\
    \ letters = [Character]()\n    for c in s {\n        if c.isLetter {\n       \
    \     letters.append(c)\n        }\n    }\n    if letters.isEmpty {\n        for\
    \ c in s {\n            result.append(c)\n        }\n        return String(result.reversed())\n\
    \    }\n    for c in s {\n        if c.isLetter {\n            if c.isUppercase\
    \ {\n                result.append(c.lowercased())\n            } else {\n   \
    \             result.append(c.uppercased())\n            }\n        } else {\n\
    \            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.reversed().map { $0.isLetter\
    \ ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp2t1h34a9.swift:15:43: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.reversed().map\
    \ { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n\
    \                              ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2t1h34a9.swift:15:60: error: result values in '? :' expression have mismatching\
    \ types 'String' and 'String.Element' (aka 'Character')\n    return s.reversed().map\
    \ { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n\
    \                                            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpylyqlddg.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpylyqlddg.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    var\
    \ isLetter = false\n    for char in s {\n        if char.isLetter {\n        \
    \    isLetter = true\n            if char.isLowercase {\n                result.append(char.uppercased())\n\
    \            } else {\n                result.append(char.lowercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if !isLetter {\n        return String(result.reversed())\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.reversed().map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxuvwaqep.swift:15:43: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.reversed().map\
    \ { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 }.joined()\n                              ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.isEmpty ? s : s.map\
    \ { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxybj8ym5.swift:15:48: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.isEmpty ? s\
    \ : s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 }.joined()\n                                   ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var str = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            if char.isUppercase {\n    \
    \            str.append(char.lowercased())\n            } else {\n           \
    \     str.append(char.uppercased())\n            }\n        } else {\n       \
    \     str.append(char)\n        }\n    }\n    if str.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmptfb5x030/tmptfb5x030.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee36b3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee36831b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee36831988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee368307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfb5x030                        0x000055ce94d108d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aee36d26460 __libc_start_main +
    245

    6    tmptfb5x030                        0x000055ce94d10429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxishqhth/tmpxishqhth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26402dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae263d24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae263d24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae263d237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxishqhth                        0x0000564ae1ba08d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae264219460 __libc_start_main +
    245

    6    tmpxishqhth                        0x0000564ae1ba0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    var\
    \ isLetter = false\n    for char in s {\n        if char.isLetter {\n        \
    \    isLetter = true\n            result += String(char.isLowercase ? char.uppercased()\
    \ : char.lowercased())\n        } else {\n            result += String(char)\n\
    \        }\n    }\n    return isLetter ? result : String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    let nonLetters = s.filter { !$0.isLetter }\n    if letters.isEmpty {\n\
    \        return String(nonLetters.reversed())\n    }\n    return String(letters.map\
    \ { $0.isUppercase ? $0.lowercased() : $0.uppercased() } + nonLetters.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpt1jbl1om.swift:20:86: error: operator function '+' requires the\
    \ types 'String.Element' (aka 'Character') and 'String' be equivalent\n    return\
    \ String(letters.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() } +\
    \ nonLetters.reversed())\n                                                   \
    \                                  ^\nSwift.RangeReplaceableCollection:3:35: note:\
    \ where 'Self.Element' = 'String.Element' (aka 'Character'), 'Other.Element' =\
    \ 'String'\n    @inlinable public static func + <Other>(lhs: Other, rhs: Self)\
    \ -> Self where Other : Sequence, Self.Element == Other.Element\n            \
    \                      ^\n"
  stdout: ''
  timestamp: 1659824499
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpdhan4kuj/tmpdhan4kuj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add3d325c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add3d01cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add3d01c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add3d01b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhan4kuj                        0x000055e2c49fa8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002add3d511460 __libc_start_main +
    245

    6    tmpdhan4kuj                        0x000055e2c49fa429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            if c.isLowercase {\n        \
    \        result.append(c.uppercased())\n            } else {\n               \
    \ result.append(c.lowercased())\n            }\n        } else {\n           \
    \ result.append(c)\n        }\n    }\n    if result.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyqh06yz8/tmpyqh06yz8.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcaf5cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcaf2c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcaf2c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcaf2c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyqh06yz8                        0x0000564331c3d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002afcaf7b7460 __libc_start_main +
    245

    6    tmpyqh06yz8                        0x0000564331c3d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return String(s.reversed())\n    }\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1ek_n9c7.swift:15:33: error: cannot find 'CharacterSet' in scope\n\
    \    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n            \
    \                    ^~~~~~~~~~~~\n/tmp/tmp1ek_n9c7.swift:15:10: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n       ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return String(s.reversed())\n    }\n\
    \    var result = \"\"\n    for char in s {\n        if char.isLetter {\n    \
    \        result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp508k8z95.swift:15:33: error: cannot find 'CharacterSet' in scope\n\
    \    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n            \
    \                    ^~~~~~~~~~~~\n/tmp/tmp508k8z95.swift:15:10: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n       ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.isEmpty ? s : s.map\
    \ { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_z5dv__4.swift:15:48: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.isEmpty ? s\
    \ : s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() :\
    \ $0 }.joined()\n                                   ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_z5dv__4.swift:15:65: error: result values in '? :' expression have mismatching\
    \ types 'String' and 'String.Element' (aka 'Character')\n    return s.isEmpty\
    \ ? s : s.map { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased()\
    \ : $0 }.joined()\n                                                 ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpylyqlddg.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpylyqlddg.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
