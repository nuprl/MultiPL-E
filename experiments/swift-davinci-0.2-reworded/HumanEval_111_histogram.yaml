name: HumanEval_111_histogram
language: swift
prompt: "\n/// Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n/// of the letter with the most repetition and containing the corresponding\
  \ count.\n/// If several letters have the same occurrence, return all of them.\n\
  /// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"\
  c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n///\
  \ >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test:\
  \ \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String\
  \ : Int]\nfunc histogram(test: String) -> [String : Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" :\
  \ 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
  assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\"\
  \ : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
  \ \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
  \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
  ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
completions: ["    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var result = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if result[letter] == nil {\n            result[letter] = 1\n    \
    \    } else {\n            result[letter]! += 1\n        }\n    }\n    return\
    \ result", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var histogram = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram", "    var result = [String : Int]()\n\
    \    var max = 0\n    let letters = test.components(separatedBy: \" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            result[letter] = 1\n       \
    \     if 1 > max {\n                max = 1\n            }\n        }\n    }\n\
    \    var finalResult = [String : Int]()\n    for (key, value) in result {\n  \
    \      if value == max {\n            finalResult[key] = value\n        }\n  \
    \  }\n    return finalResult", "    var result = [String : Int]()\n    var max\
    \ = 0\n    for letter in test.components(separatedBy: \" \") {\n        if let\
    \ count = result[letter] {\n            result[letter] = count + 1\n         \
    \   if count + 1 > max {\n                max = count + 1\n            }\n   \
    \     } else {\n            result[letter] = 1\n            if 1 > max {\n   \
    \             max = 1\n            }\n        }\n    }\n    var finalResult =\
    \ [String : Int]()\n    for (key, value) in result {\n        if value == max\
    \ {\n            finalResult[key] = value\n        }\n    }\n    return finalResult",
  "    var histogram = [String : Int]()\n    let letters = test.split(separator: \"\
    \ \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let value = histogram[letter]\
    \ {\n            histogram[letter] = value + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var result\
    \ = [String : Int]()\n    var max = 0\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            result[letter] = 1\n       \
    \     if 1 > max {\n                max = 1\n            }\n        }\n    }\n\
    \    return result.filter { $0.value == max }", "    var result = [String : Int]()\n\
    \    let words = test.components(separatedBy: \" \")\n    for word in words {\n\
    \        if result[word] == nil {\n            result[word] = 1\n        } else\
    \ {\n            result[word]! += 1\n        }\n    }\n    return result", " \
    \   var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict", "    let letters = test.split(separator: \" \")\n    var dict\
    \ = [String : Int]()\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict", "    var dict\
    \ = [String : Int]()\n    var max = 0\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i]! += 1\n        }\n        if dict[i]!\
    \ > max {\n            max = dict[i]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for (key, value) in dict {\n        if value == max {\n      \
    \      result[key] = value\n        }\n    }\n    return result", "    var result\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.split(separator: \" \")\n    var max = 0\n    for letter in letters {\n\
    \        if let count = result[String(letter)] {\n            result[String(letter)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            result[String(letter)] = 1\n\
    \            if 1 > max {\n                max = 1\n            }\n        }\n\
    \    }\n    var finalResult = [String : Int]()\n    for (letter, count) in result\
    \ {\n        if count == max {\n            finalResult[letter] = count\n    \
    \    }\n    }\n    return finalResult", "    var result = [String : Int]()\n \
    \   let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    for char in test.characters {\n        if let count = dict[String(char)]\
    \ {\n            dict[String(char)] = count + 1\n        } else {\n          \
    \  dict[String(char)] = 1\n        }\n    }\n    return dict"]
stop_tokens:
- "\n}"
