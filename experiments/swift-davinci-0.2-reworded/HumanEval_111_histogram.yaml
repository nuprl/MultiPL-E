name: HumanEval_111_histogram
language: swift
prompt: "\n/// Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n/// of the letter with the most repetition and containing the corresponding\
  \ count.\n/// If several letters have the same occurrence, return all of them.\n\
  /// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"\
  c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n///\
  \ >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test:\
  \ \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String\
  \ : Int]\nfunc histogram(test: String) -> [String : Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" :\
  \ 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
  assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\"\
  \ : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
  \ \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
  \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
  ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
completions: ["    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var result = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if result[letter] == nil {\n            result[letter] = 1\n    \
    \    } else {\n            result[letter]! += 1\n        }\n    }\n    return\
    \ result", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var histogram = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram", "    var result = [String : Int]()\n\
    \    var max = 0\n    let letters = test.components(separatedBy: \" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            result[letter] = 1\n       \
    \     if 1 > max {\n                max = 1\n            }\n        }\n    }\n\
    \    var finalResult = [String : Int]()\n    for (key, value) in result {\n  \
    \      if value == max {\n            finalResult[key] = value\n        }\n  \
    \  }\n    return finalResult", "    var result = [String : Int]()\n    var max\
    \ = 0\n    for letter in test.components(separatedBy: \" \") {\n        if let\
    \ count = result[letter] {\n            result[letter] = count + 1\n         \
    \   if count + 1 > max {\n                max = count + 1\n            }\n   \
    \     } else {\n            result[letter] = 1\n            if 1 > max {\n   \
    \             max = 1\n            }\n        }\n    }\n    var finalResult =\
    \ [String : Int]()\n    for (key, value) in result {\n        if value == max\
    \ {\n            finalResult[key] = value\n        }\n    }\n    return finalResult",
  "    var histogram = [String : Int]()\n    let letters = test.split(separator: \"\
    \ \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let value = histogram[letter]\
    \ {\n            histogram[letter] = value + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var result\
    \ = [String : Int]()\n    var max = 0\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            result[letter] = 1\n       \
    \     if 1 > max {\n                max = 1\n            }\n        }\n    }\n\
    \    return result.filter { $0.value == max }", "    var result = [String : Int]()\n\
    \    let words = test.components(separatedBy: \" \")\n    for word in words {\n\
    \        if result[word] == nil {\n            result[word] = 1\n        } else\
    \ {\n            result[word]! += 1\n        }\n    }\n    return result", " \
    \   var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict", "    let letters = test.split(separator: \" \")\n    var dict\
    \ = [String : Int]()\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict", "    var dict\
    \ = [String : Int]()\n    var max = 0\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i]! += 1\n        }\n        if dict[i]!\
    \ > max {\n            max = dict[i]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for (key, value) in dict {\n        if value == max {\n      \
    \      result[key] = value\n        }\n    }\n    return result", "    var result\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.split(separator: \" \")\n    var max = 0\n    for letter in letters {\n\
    \        if let count = result[String(letter)] {\n            result[String(letter)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            result[String(letter)] = 1\n\
    \            if 1 > max {\n                max = 1\n            }\n        }\n\
    \    }\n    var finalResult = [String : Int]()\n    for (letter, count) in result\
    \ {\n        if count == max {\n            finalResult[letter] = count\n    \
    \    }\n    }\n    return finalResult", "    var result = [String : Int]()\n \
    \   let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    for char in test.characters {\n        if let count = dict[String(char)]\
    \ {\n            dict[String(char)] = count + 1\n        } else {\n          \
    \  dict[String(char)] = 1\n        }\n    }\n    return dict", "    var dict =\
    \ [String : Int]()\n    let letters = test.split(separator: \" \")\n    for letter\
    \ in letters {\n        if let count = dict[String(letter)] {\n            dict[String(letter)]\
    \ = count + 1\n        } else {\n            dict[String(letter)] = 1\n      \
    \  }\n    }\n    return dict", "    var result: [String : Int] = [:]\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result", "    var result = [String : Int]()\n    var max = 0\n    for char in\
    \ test.split(separator: \" \") {\n        if let count = result[String(char)]\
    \ {\n            result[String(char)] = count + 1\n            if count + 1 >\
    \ max {\n                max = count + 1\n            }\n        } else {\n  \
    \          result[String(char)] = 1\n            if 1 > max {\n              \
    \  max = 1\n            }\n        }\n    }\n    return result.filter { $0.value\
    \ == max }", "    var dict = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if let count = dict[word] {\n     \
    \       dict[word] = count + 1\n        } else {\n            dict[word] = 1\n\
    \        }\n    }\n    return dict", "    var histogram = [String : Int]()\n \
    \   let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var dict = [String : Int]()\n    var max =\
    \ 0\n    for char in test.characters {\n        if char != \" \" {\n         \
    \   if let count = dict[String(char)] {\n                dict[String(char)] =\
    \ count + 1\n                if count + 1 > max {\n                    max = count\
    \ + 1\n                }\n            } else {\n                dict[String(char)]\
    \ = 1\n                if 1 > max {\n                    max = 1\n           \
    \     }\n            }\n        }\n    }\n    var result = [String : Int]()\n\
    \    for (key, value) in dict {\n        if value == max {\n            result[key]\
    \ = value\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    var max = 0\n    var maxLetters = [String]()\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if let count = dict[letter] {\n            dict[letter] =\
    \ count + 1\n            if count + 1 > max {\n                max = count + 1\n\
    \                maxLetters = [letter]\n            } else if count + 1 == max\
    \ {\n                maxLetters.append(letter)\n            }\n        } else\
    \ {\n            dict[letter] = 1\n            if max == 0 {\n               \
    \ max = 1\n                maxLetters = [letter]\n            }\n        }\n \
    \   }\n    var result = [String : Int]()\n    for letter in maxLetters {\n   \
    \     result[letter] = max\n    }\n    return result", "    let letters = test.components(separatedBy:\
    \ \" \")\n    var dict = [String : Int]()\n    for letter in letters {\n     \
    \   if let count = dict[letter] {\n            dict[letter] = count + 1\n    \
    \    } else {\n            dict[letter] = 1\n        }\n    }\n    return dict",
  "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var dict\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = dict[letter] {\n        \
    \    dict[letter] = count + 1\n        } else {\n            dict[letter] = 1\n\
    \        }\n    }\n    return dict", "    var histogram = [String : Int]()\n \
    \   let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram", "    var dict = [String : Int]()\n  \
    \  var max = 0\n    var maxKeys = [String]()\n    for char in test.characters\
    \ {\n        if char != \" \" {\n            if let count = dict[String(char)]\
    \ {\n                dict[String(char)] = count + 1\n                if count\
    \ + 1 > max {\n                    max = count + 1\n                    maxKeys\
    \ = [String(char)]\n                } else if count + 1 == max {\n           \
    \         maxKeys.append(String(char))\n                }\n            } else\
    \ {\n                dict[String(char)] = 1\n                if max == 0 {\n \
    \                   max = 1\n                    maxKeys = [String(char)]\n  \
    \              }\n            }\n        }\n    }\n    var result = [String :\
    \ Int]()\n    for key in maxKeys {\n        result[key] = max\n    }\n    return\
    \ result", "    var result = [String : Int]()\n    var max = 0\n    for letter\
    \ in test.split(separator: \" \") {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n            if count + 1\
    \ > max {\n                max = count + 1\n            }\n        } else {\n\
    \            result[String(letter)] = 1\n            if 1 > max {\n          \
    \      max = 1\n            }\n        }\n    }\n    return result.filter { $0.value\
    \ == max }", "    var dict = [String : Int]()\n    var max = 0\n    for char in\
    \ test.characters {\n        if char == \" \" {\n            continue\n      \
    \  }\n        if dict[String(char)] == nil {\n            dict[String(char)] =\
    \ 1\n        } else {\n            dict[String(char)]! += 1\n        }\n     \
    \   if dict[String(char)]! > max {\n            max = dict[String(char)]!\n  \
    \      }\n    }\n    var result = [String : Int]()\n    for (key, value) in dict\
    \ {\n        if value == max {\n            result[key] = value\n        }\n \
    \   }\n    return result", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for item in array {\n        if let count = dict[item] {\n     \
    \       dict[item] = count + 1\n        } else {\n            dict[item] = 1\n\
    \        }\n    }\n    return dict", "    var dict = [String : Int]()\n    var\
    \ max = 0\n    for letter in test.components(separatedBy: \" \") {\n        if\
    \ let count = dict[letter] {\n            dict[letter] = count + 1\n        }\
    \ else {\n            dict[letter] = 1\n        }\n        if dict[letter]! >\
    \ max {\n            max = dict[letter]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for (key, value) in dict {\n        if value == max {\n      \
    \      result[key] = value\n        }\n    }\n    return result", "    var dict\
    \ = [String : Int]()\n    let array = test.components(separatedBy: \" \")\n  \
    \  for letter in array {\n        if dict[letter] == nil {\n            dict[letter]\
    \ = 1\n        } else {\n            dict[letter]! += 1\n        }\n    }\n  \
    \  return dict", "    var dict = [String : Int]()\n    var max = 0\n    for char\
    \ in test.split(separator: \" \") {\n        if let count = dict[String(char)]\
    \ {\n            dict[String(char)] = count + 1\n            if count + 1 > max\
    \ {\n                max = count + 1\n            }\n        } else {\n      \
    \      dict[String(char)] = 1\n            if 1 > max {\n                max =\
    \ 1\n            }\n        }\n    }\n    var result = [String : Int]()\n    for\
    \ (key, value) in dict {\n        if value == max {\n            result[key] =\
    \ value\n        }\n    }\n    return result", "    var histogram = [String :\
    \ Int]()\n    let letters = test.components(separatedBy: \" \")\n    for letter\
    \ in letters {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.split(separator: \" \")\n    for letter in letters {\n        if result[String(letter)]\
    \ == nil {\n            result[String(letter)] = 1\n        } else {\n       \
    \     result[String(letter)]! += 1\n        }\n    }\n    return result", "  \
    \  var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    var\
    \ max = 0\n    for letter in test.split(separator: \" \") {\n        if let count\
    \ = histogram[String(letter)] {\n            histogram[String(letter)] = count\
    \ + 1\n            if count + 1 > max {\n                max = count + 1\n   \
    \         }\n        } else {\n            histogram[String(letter)] = 1\n   \
    \         if 1 > max {\n                max = 1\n            }\n        }\n  \
    \  }\n    var result = [String : Int]()\n    for (key, value) in histogram {\n\
    \        if value == max {\n            result[key] = value\n        }\n    }\n\
    \    return result", "    var result = [String : Int]()\n    var max = 0\n   \
    \ let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n            if count + 1 > max {\n                max = count + 1\n   \
    \         }\n        } else {\n            result[letter] = 1\n            if\
    \ 1 > max {\n                max = 1\n            }\n        }\n    }\n    return\
    \ result.filter { $0.value == max }", "    var result = [String : Int]()\n   \
    \ var max = 0\n    for letter in test.split(separator: \" \") {\n        if let\
    \ count = result[String(letter)] {\n            result[String(letter)] = count\
    \ + 1\n            if count + 1 > max {\n                max = count + 1\n   \
    \         }\n        } else {\n            result[String(letter)] = 1\n      \
    \      if 1 > max {\n                max = 1\n            }\n        }\n    }\n\
    \    return result.filter { $0.value == max }", "    var dict = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if dict[letter] == nil {\n            dict[letter] = 1\n        }\
    \ else {\n            dict[letter]! += 1\n        }\n    }\n    return dict",
  "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var dict\
    \ = [String : Int]()\n    let array = test.components(separatedBy: \" \")\n  \
    \  for i in array {\n        if dict[i] == nil {\n            dict[i] = 1\n  \
    \      } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return\
    \ dict", "    var result = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if result[word] == nil {\n        \
    \    result[word] = 1\n        } else {\n            result[word]! += 1\n    \
    \    }\n    }\n    return result", "    var result = [String : Int]()\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        result[letter] = (result[letter] ?? 0) + 1\n    }\n    return result",
  "    var histogram = [String : Int]()\n    var max = 0\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n            if count +\
    \ 1 > max {\n                max = count + 1\n            }\n        } else {\n\
    \            histogram[String(letter)] = 1\n            if 1 > max {\n       \
    \         max = 1\n            }\n        }\n    }\n    var result = [String :\
    \ Int]()\n    for (letter, count) in histogram {\n        if count == max {\n\
    \            result[letter] = count\n        }\n    }\n    return result", " \
    \   var dict = [String : Int]()\n    let arr = test.components(separatedBy: \"\
    \ \")\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] =\
    \ 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return\
    \ dict", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict", "    var dict = [String : Int]()\n    let\
    \ arr = test.components(separatedBy: \" \")\n    for i in arr {\n        if dict[i]\
    \ == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! +=\
    \ 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n  \
    \  let array = test.components(separatedBy: \" \")\n    for i in array {\n   \
    \     if dict[i] == nil {\n            dict[i] = 1\n        } else {\n       \
    \     dict[i] = dict[i]! + 1\n        }\n    }\n    return dict", "    var histogram\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for char in array {\n\
    \        if let count = dict[char] {\n            dict[char] = count + 1\n   \
    \     } else {\n            dict[char] = 1\n        }\n    }\n    return dict",
  "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var dict\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if dict[letter] == nil {\n            dict[letter]\
    \ = 1\n        } else {\n            dict[letter]! += 1\n        }\n    }\n  \
    \  return dict", "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var dict = [String : Int]()\n\
    \    var maxCount = 0\n    for letter in test.split(separator: \" \") {\n    \
    \    if let count = dict[String(letter)] {\n            dict[String(letter)] =\
    \ count + 1\n            if count + 1 > maxCount {\n                maxCount =\
    \ count + 1\n            }\n        } else {\n            dict[String(letter)]\
    \ = 1\n            if maxCount == 0 {\n                maxCount = 1\n        \
    \    }\n        }\n    }\n    var result = [String : Int]()\n    for (key, value)\
    \ in dict {\n        if value == maxCount {\n            result[key] = value\n\
    \        }\n    }\n    return result", "    var result: [String : Int] = [:]\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var dict = [String : Int]()\n    var max = 0\n    for\
    \ letter in test.split(separator: \" \") {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n            if count + 1 >\
    \ max {\n                max = count + 1\n            }\n        } else {\n  \
    \          dict[String(letter)] = 1\n            if 1 > max {\n              \
    \  max = 1\n            }\n        }\n    }\n    return dict.filter { $0.value\
    \ == max }", "    var result = [String : Int]()\n    var max = 0\n    for letter\
    \ in test.split(separator: \" \") {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n            if count + 1\
    \ > max {\n                max = count + 1\n            }\n        } else {\n\
    \            result[String(letter)] = 1\n            if 1 > max {\n          \
    \      max = 1\n            }\n        }\n    }\n    return result.filter { $0.value\
    \ == max }", "    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram",
  "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var result = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var dict\
    \ = [String : Int]()\n    let array = test.components(separatedBy: \" \")\n  \
    \  for i in array {\n        if let count = dict[i] {\n            dict[i] = count\
    \ + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return\
    \ dict", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = histogram[letter] {\n            histogram[letter] = count +\
    \ 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n \
    \   return histogram", "    var dict = [String : Int]()\n    let array = test.split(separator:\
    \ \" \")\n    for letter in array {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict", "    var result\
    \ = [String : Int]()\n    let letters = test.split(separator: \" \")\n    var\
    \ max = 0\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n            if count + 1\
    \ > max {\n                max = count + 1\n            }\n        } else {\n\
    \            result[String(letter)] = 1\n            if 1 > max {\n          \
    \      max = 1\n            }\n        }\n    }\n    return result.filter { $0.value\
    \ == max }", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for word in array {\n        if let count = dict[word] {\n     \
    \       dict[word] = count + 1\n        } else {\n            dict[word] = 1\n\
    \        }\n    }\n    return dict", "    var dict = [String : Int]()\n    let\
    \ array = test.components(separatedBy: \" \")\n    for i in array {\n        if\
    \ dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]\
    \ = dict[i]! + 1\n        }\n    }\n    return dict", "    var histogram = [String\
    \ : Int]()\n    let letters = test.components(separatedBy: \" \")\n    for letter\
    \ in letters {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var dict = [String : Int]()\n    let array\
    \ = test.components(separatedBy: \" \")\n    for i in array {\n        if let\
    \ count = dict[i] {\n            dict[i] = count + 1\n        } else {\n     \
    \       dict[i] = 1\n        }\n    }\n    return dict", "    var dict = [String\
    \ : Int]()\n    let letters = test.components(separatedBy: \" \")\n    for letter\
    \ in letters {\n        if dict[letter] == nil {\n            dict[letter] = 1\n\
    \        } else {\n            dict[letter]! += 1\n        }\n    }\n    return\
    \ dict", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var dict = [String : Int]()\n    let arr =\
    \ test.split(separator: \" \")\n    for i in arr {\n        if dict[String(i)]\
    \ == nil {\n            dict[String(i)] = 1\n        } else {\n            dict[String(i)]!\
    \ += 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for i in array {\n \
    \       if let value = dict[i] {\n            dict[i] = value + 1\n        } else\
    \ {\n            dict[i] = 1\n        }\n    }\n    return dict", "    var dict\
    \ = [String : Int]()\n    let array = test.components(separatedBy: \" \")\n  \
    \  for i in array {\n        if dict[i] == nil {\n            dict[i] = 1\n  \
    \      } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return\
    \ dict", "    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    var maxCount = 0\n    for letter in letters {\n        if result[String(letter)]\
    \ == nil {\n            result[String(letter)] = 1\n        } else {\n       \
    \     result[String(letter)]! += 1\n        }\n        if result[String(letter)]!\
    \ > maxCount {\n            maxCount = result[String(letter)]!\n        }\n  \
    \  }\n    return result.filter { $0.value == maxCount }", "    var result = [String\
    \ : Int]()\n    let letters = test.components(separatedBy: \" \")\n    for letter\
    \ in letters {\n        if result[letter] == nil {\n            result[letter]\
    \ = 1\n        } else {\n            result[letter]! += 1\n        }\n    }\n\
    \    return result", "    var histogram = [String : Int]()\n    for letter in\
    \ test.split(separator: \" \") {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram",
  "    var dict = [String : Int]()\n    var max = 0\n    var maxArray = [String]()\n\
    \    let array = test.split(separator: \" \")\n    for i in array {\n        if\
    \ dict[String(i)] == nil {\n            dict[String(i)] = 1\n        } else {\n\
    \            dict[String(i)]! += 1\n        }\n        if dict[String(i)]! > max\
    \ {\n            max = dict[String(i)]!\n            maxArray = [String(i)]\n\
    \        } else if dict[String(i)]! == max {\n            maxArray.append(String(i))\n\
    \        }\n    }\n    for i in maxArray {\n        dict[i] = max\n    }\n   \
    \ return dict", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for i in array {\n \
    \       if let value = dict[i] {\n            dict[i] = value + 1\n        } else\
    \ {\n            dict[i] = 1\n        }\n    }\n    return dict", "    var histogram\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for i in array {\n \
    \       if let count = dict[i] {\n            dict[i] = count + 1\n        } else\
    \ {\n            dict[i] = 1\n        }\n    }\n    return dict", "    var result:\
    \ [String : Int] = [:]\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    var max = 0\n    for char in test.components(separatedBy: \" \") {\n    \
    \    if let count = dict[char] {\n            dict[char] = count + 1\n       \
    \ } else {\n            dict[char] = 1\n        }\n        if dict[char]! > max\
    \ {\n            max = dict[char]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for (key, value) in dict {\n        if value == max {\n      \
    \      result[key] = value\n        }\n    }\n    return result", "    var dict\
    \ = [String : Int]()\n    let letters = test.split(separator: \" \")\n    for\
    \ letter in letters {\n        if dict[String(letter)] == nil {\n            dict[String(letter)]\
    \ = 1\n        } else {\n            dict[String(letter)]! += 1\n        }\n \
    \   }\n    return dict", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for letter in array {\n        if dict[letter] == nil {\n      \
    \      dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n  \
    \      }\n    }\n    return dict", "    var histogram = [String : Int]()\n   \
    \ let letters = test.split(separator: \" \")\n    for letter in letters {\n  \
    \      if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if result[letter] == nil {\n            result[letter] = 1\n        } else {\n\
    \            result[letter]! += 1\n        }\n    }\n    return result", "   \
    \ var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if let count = result[String(letter)] {\n            result[String(letter)]\
    \ = count + 1\n        } else {\n            result[String(letter)] = 1\n    \
    \    }\n    }\n    return result", "    var dict = [String : Int]()\n    let words\
    \ = test.split(separator: \" \")\n    for word in words {\n        if let count\
    \ = dict[String(word)] {\n            dict[String(word)] = count + 1\n       \
    \ } else {\n            dict[String(word)] = 1\n        }\n    }\n    return dict",
  "    var dict = [String : Int]()\n    var max = 0\n    for char in test.characters\
    \ {\n        if char != \" \" {\n            if let count = dict[String(char)]\
    \ {\n                dict[String(char)] = count + 1\n                if count\
    \ + 1 > max {\n                    max = count + 1\n                }\n      \
    \      } else {\n                dict[String(char)] = 1\n                if 1\
    \ > max {\n                    max = 1\n                }\n            }\n   \
    \     }\n    }\n    var result = [String : Int]()\n    for (key, value) in dict\
    \ {\n        if value == max {\n            result[key] = value\n        }\n \
    \   }\n    return result", "    var result = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = result[letter] {\n            result[letter] = count + 1\n  \
    \      } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if dict[String(letter)] == nil {\n            dict[String(letter)] =\
    \ 1\n        } else {\n            dict[String(letter)]! += 1\n        }\n   \
    \ }\n    return dict", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.split(separator: \" \")\n    for letter in letters {\n        if let\
    \ count = result[String(letter)] {\n            result[String(letter)] = count\
    \ + 1\n        } else {\n            result[String(letter)] = 1\n        }\n \
    \   }\n    return result", "    var histogram = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = histogram[letter] {\n            histogram[letter] = count +\
    \ 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n \
    \   return histogram", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    var max = 0\n    for letter in test.characters {\n        if let value =\
    \ dict[String(letter)] {\n            dict[String(letter)] = value + 1\n     \
    \       if value + 1 > max {\n                max = value + 1\n            }\n\
    \        } else {\n            dict[String(letter)] = 1\n            if 1 > max\
    \ {\n                max = 1\n            }\n        }\n    }\n    var result\
    \ = [String : Int]()\n    for (key, value) in dict {\n        if value == max\
    \ {\n            result[key] = value\n        }\n    }\n    return result", " \
    \   var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if let count = dict[i] {\n           \
    \ dict[i] = count + 1\n        } else {\n            dict[i] = 1\n        }\n\
    \    }\n    return dict", "    var histogram = [String : Int]()\n    let letters\
    \ = test.split(separator: \" \")\n    for letter in letters {\n        if let\
    \ count = histogram[String(letter)] {\n            histogram[String(letter)] =\
    \ count + 1\n        } else {\n            histogram[String(letter)] = 1\n   \
    \     }\n    }\n    return histogram", "    var histogram = [String : Int]()\n\
    \    var maxCount = 0\n    for letter in test.split(separator: \" \") {\n    \
    \    if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n            if count + 1 > maxCount {\n                maxCount\
    \ = count + 1\n            }\n        } else {\n            histogram[String(letter)]\
    \ = 1\n            if 1 > maxCount {\n                maxCount = 1\n         \
    \   }\n        }\n    }\n    var result = [String : Int]()\n    for (letter, count)\
    \ in histogram {\n        if count == maxCount {\n            result[letter] =\
    \ count\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    var max = 0\n    for char in test.split(separator: \" \") {\n        if let\
    \ count = dict[String(char)] {\n            dict[String(char)] = count + 1\n \
    \           if count + 1 > max {\n                max = count + 1\n          \
    \  }\n        } else {\n            dict[String(char)] = 1\n            if 1 >\
    \ max {\n                max = 1\n            }\n        }\n    }\n    var result\
    \ = [String : Int]()\n    for (key, value) in dict {\n        if value == max\
    \ {\n            result[key] = value\n        }\n    }\n    return result", " \
    \   var result = [String : Int]()\n    let letters = test.split(separator: \"\
    \ \")\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result", "   \
    \ var dict = [String : Int]()\n    let array = test.split(separator: \" \")\n\
    \    for letter in array {\n        if let count = dict[String(letter)] {\n  \
    \          dict[String(letter)] = count + 1\n        } else {\n            dict[String(letter)]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if dict[letter] == nil {\n            dict[letter] = 1\n        }\
    \ else {\n            dict[letter]! += 1\n        }\n    }\n    return dict",
  "    var dict = [String : Int]()\n    let letters = test.split(separator: \" \"\
    )\n    for letter in letters {\n        if let count = dict[String(letter)] {\n\
    \            dict[String(letter)] = count + 1\n        } else {\n            dict[String(letter)]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for char in array {\n\
    \        if let count = dict[char] {\n            dict[char] = count + 1\n   \
    \     } else {\n            dict[char] = 1\n        }\n    }\n    return dict",
  "    var histogram: [String : Int] = [:]\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var result = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for letter in array\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var result\
    \ = [String : Int]()\n    let letters = test.split(separator: \" \")\n    for\
    \ letter in letters {\n        if result[String(letter)] == nil {\n          \
    \  result[String(letter)] = 1\n        } else {\n            result[String(letter)]!\
    \ += 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for i in array {\n \
    \       if dict[i] == nil {\n            dict[i] = 1\n        } else {\n     \
    \       dict[i] = dict[i]! + 1\n        }\n    }\n    return dict", "    let letters\
    \ = test.components(separatedBy: \" \")\n    var dict = [String : Int]()\n   \
    \ for letter in letters {\n        if let count = dict[letter] {\n           \
    \ dict[letter] = count + 1\n        } else {\n            dict[letter] = 1\n \
    \       }\n    }\n    return dict", "    var result = [String : Int]()\n    let\
    \ letters = test.split(separator: \" \")\n    for letter in letters {\n      \
    \  if let count = result[String(letter)] {\n            result[String(letter)]\
    \ = count + 1\n        } else {\n            result[String(letter)] = 1\n    \
    \    }\n    }\n    return result", "    var histogram = [String : Int]()\n   \
    \ let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    var maxCount\
    \ = 0\n    for letter in test.split(separator: \" \") {\n        let count = result[String(letter)]\
    \ ?? 0\n        result[String(letter)] = count + 1\n        maxCount = max(maxCount,\
    \ count + 1)\n    }\n    return result.filter { $0.value == maxCount }", "   \
    \ var result = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if let count = result[word] {\n   \
    \         result[word] = count + 1\n        } else {\n            result[word]\
    \ = 1\n        }\n    }\n    return result", "    var result: [String : Int] =\
    \ [:]\n    let array = test.components(separatedBy: \" \")\n    for item in array\
    \ {\n        if result[item] == nil {\n            result[item] = 1\n        }\
    \ else {\n            result[item]! += 1\n        }\n    }\n    return result",
  "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram", "    var dict = [String : Int]()\n  \
    \  let array = test.components(separatedBy: \" \")\n    for i in array {\n   \
    \     if dict[i] == nil {\n            dict[i] = 1\n        } else {\n       \
    \     dict[i] = dict[i]! + 1\n        }\n    }\n    return dict", "    var result\
    \ = [String : Int]()\n    let letters = test.split(separator: \" \")\n    for\
    \ letter in letters {\n        if result[String(letter)] == nil {\n          \
    \  result[String(letter)] = 1\n        } else {\n            result[String(letter)]!\
    \ += 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for i in array {\n \
    \       if result[i] == nil {\n            result[i] = 1\n        } else {\n \
    \           result[i] = result[i]! + 1\n        }\n    }\n    return result",
  "    var result = [String : Int]()\n    let letters = test.split(separator: \" \"\
    )\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result", "   \
    \ var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.components(separatedBy: \" \") {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var result = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if result[i] == nil {\n            result[i]\
    \ = 1\n        } else {\n            result[i] = result[i]! + 1\n        }\n \
    \   }\n    return result", "    var result = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = result[letter] {\n            result[letter] = count + 1\n  \
    \      } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result", "    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = dict[letter] {\n            dict[letter] = count +\
    \ 1\n        } else {\n            dict[letter] = 1\n        }\n    }\n    return\
    \ dict", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict", "    var dict = [String : Int]()\n    var\
    \ max = 0\n    let array = test.components(separatedBy: \" \")\n    for i in array\
    \ {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n\
    \            dict[i]! += 1\n        }\n        if dict[i]! > max {\n         \
    \   max = dict[i]!\n        }\n    }\n    var result = [String : Int]()\n    for\
    \ (key, value) in dict {\n        if value == max {\n            result[key] =\
    \ value\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    let testArray = test.components(separatedBy: \" \")\n    for item in testArray\
    \ {\n        if let count = result[item] {\n            result[item] = count +\
    \ 1\n        } else {\n            result[item] = 1\n        }\n    }\n    return\
    \ result", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict", "    var dict = [String : Int]()\n    var\
    \ max = 0\n    for char in test.characters {\n        if char != \" \" {\n   \
    \         if let count = dict[String(char)] {\n                dict[String(char)]\
    \ = count + 1\n                if count + 1 > max {\n                    max =\
    \ count + 1\n                }\n            } else {\n                dict[String(char)]\
    \ = 1\n                if 1 > max {\n                    max = 1\n           \
    \     }\n            }\n        }\n    }\n    var result = [String : Int]()\n\
    \    for (key, value) in dict {\n        if value == max {\n            result[key]\
    \ = value\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    for letter in array\
    \ {\n        if dict[letter] == nil {\n            dict[letter] = 1\n        }\
    \ else {\n            dict[letter]! += 1\n        }\n    }\n    return dict",
  "    var dict = [String : Int]()\n    let array = test.components(separatedBy: \"\
    \ \")\n    for letter in array {\n        if let count = dict[letter] {\n    \
    \        dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if dict[String(letter)] == nil {\n            dict[String(letter)] =\
    \ 1\n        } else {\n            dict[String(letter)]! += 1\n        }\n   \
    \ }\n    return dict", "    var dict = [String : Int]()\n    let arr = test.components(separatedBy:\
    \ \" \")\n    var max = 0\n    for i in arr {\n        if let count = dict[i]\
    \ {\n            dict[i] = count + 1\n        } else {\n            dict[i] =\
    \ 1\n        }\n        if dict[i]! > max {\n            max = dict[i]!\n    \
    \    }\n    }\n    var result = [String : Int]()\n    for i in dict {\n      \
    \  if i.value == max {\n            result[i.key] = i.value\n        }\n    }\n\
    \    return result", "    var histogram = [String : Int]()\n    let letters =\
    \ test.components(separatedBy: \" \")\n    for letter in letters {\n        if\
    \ let count = histogram[letter] {\n            histogram[letter] = count + 1\n\
    \        } else {\n            histogram[letter] = 1\n        }\n    }\n    return\
    \ histogram", "    var dict = [String : Int]()\n    let arr = test.components(separatedBy:\
    \ \" \")\n    for i in arr {\n        if let count = dict[i] {\n            dict[i]\
    \ = count + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n \
    \   return dict", "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.split(separator: \" \") {\n     \
    \   if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram", "    var dict = [String : Int]()\n  \
    \  let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if dict[letter] == nil {\n            dict[letter] = 1\n        }\
    \ else {\n            dict[letter]! += 1\n        }\n    }\n    return dict",
  "    var dict = [String : Int]()\n    let array = test.split(separator: \" \")\n\
    \    for i in array {\n        if dict[String(i)] == nil {\n            dict[String(i)]\
    \ = 1\n        } else {\n            dict[String(i)]! += 1\n        }\n    }\n\
    \    return dict", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var result = [String : Int]()\n\
    \    let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for item in array {\n        if let count = dict[item] {\n     \
    \       dict[item] = count + 1\n        } else {\n            dict[item] = 1\n\
    \        }\n    }\n    return dict", "    var result = [String : Int]()\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if result[letter] == nil {\n            result[letter] = 1\n        }\
    \ else {\n            result[letter]! += 1\n        }\n    }\n    return result",
  "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var result = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if let count = result[String(letter)] {\n            result[String(letter)]\
    \ = count + 1\n        } else {\n            result[String(letter)] = 1\n    \
    \    }\n    }\n    return result", "    var histogram = [String : Int]()\n   \
    \ let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = result[letter] {\n            result[letter] = count + 1\n  \
    \      } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result", "    var dict = [String : Int]()\n    var max = 0\n    for char in\
    \ test.components(separatedBy: \" \") {\n        if let count = dict[char] {\n\
    \            dict[char] = count + 1\n        } else {\n            dict[char]\
    \ = 1\n        }\n        if dict[char]! > max {\n            max = dict[char]!\n\
    \        }\n    }\n    var result = [String : Int]()\n    for (key, value) in\
    \ dict {\n        if value == max {\n            result[key] = value\n       \
    \ }\n    }\n    return result", "    var result = [String : Int]()\n    let letters\
    \ = test.split(separator: \" \")\n    for letter in letters {\n        if let\
    \ count = result[String(letter)] {\n            result[String(letter)] = count\
    \ + 1\n        } else {\n            result[String(letter)] = 1\n        }\n \
    \   }\n    return result", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for letter in array {\n        if dict[letter] == nil {\n      \
    \      dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n  \
    \      }\n    }\n    return dict", "    let words = test.split(separator: \" \"\
    )\n    var dict = [String : Int]()\n    for word in words {\n        if let count\
    \ = dict[String(word)] {\n            dict[String(word)] = count + 1\n       \
    \ } else {\n            dict[String(word)] = 1\n        }\n    }\n    return dict",
  "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var result\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        if result[letter] == nil {\n           \
    \ result[letter] = 1\n        } else {\n            result[letter]! += 1\n   \
    \     }\n    }\n    return result", "    var histogram = [String : Int]()\n  \
    \  let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = result[letter] {\n            result[letter] = count + 1\n  \
    \      } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result", "    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict", "    var dict = [String : Int]()\n    var\
    \ max = 0\n    for letter in test.split(separator: \" \") {\n        if let count\
    \ = dict[String(letter)] {\n            dict[String(letter)] = count + 1\n   \
    \         if count + 1 > max {\n                max = count + 1\n            }\n\
    \        } else {\n            dict[String(letter)] = 1\n            if 1 > max\
    \ {\n                max = 1\n            }\n        }\n    }\n    var result\
    \ = [String : Int]()\n    for (key, value) in dict {\n        if value == max\
    \ {\n            result[key] = value\n        }\n    }\n    return result", " \
    \   var dict = [String : Int]()\n    var max = 0\n    for char in test.split(separator:\
    \ \" \") {\n        if let count = dict[String(char)] {\n            dict[String(char)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            dict[String(char)] = 1\n   \
    \         if max == 0 {\n                max = 1\n            }\n        }\n \
    \   }\n    var result = [String : Int]()\n    for (key, value) in dict {\n   \
    \     if value == max {\n            result[key] = value\n        }\n    }\n \
    \   return result", "    var dict = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if dict[String(letter)] == nil\
    \ {\n            dict[String(letter)] = 1\n        } else {\n            dict[String(letter)]!\
    \ += 1\n        }\n    }\n    return dict", "    var dictionary: [String : Int]\
    \ = [:]\n    let array = test.components(separatedBy: \" \")\n    for item in\
    \ array {\n        if let count = dictionary[item] {\n            dictionary[item]\
    \ = count + 1\n        } else {\n            dictionary[item] = 1\n        }\n\
    \    }\n    return dictionary", "    var result = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if result[letter] == nil {\n            result[letter] = 1\n        } else {\n\
    \            result[letter]! += 1\n        }\n    }\n    return result", "   \
    \ var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    var max = 0\n    var maxLetters = [String]()\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if let count = dict[letter] {\n            dict[letter] =\
    \ count + 1\n            if count + 1 > max {\n                max = count + 1\n\
    \                maxLetters = [letter]\n            } else if count + 1 == max\
    \ {\n                maxLetters.append(letter)\n            }\n        } else\
    \ {\n            dict[letter] = 1\n            if max == 0 {\n               \
    \ max = 1\n                maxLetters = [letter]\n            }\n        }\n \
    \   }\n    for letter in maxLetters {\n        dict[letter] = max\n    }\n   \
    \ return dict", "    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for item in array {\n        if let value = dict[item] {\n     \
    \       dict[item] = value + 1\n        } else {\n            dict[item] = 1\n\
    \        }\n    }\n    return dict", "    var result = [String : Int]()\n    let\
    \ letters = test.split(separator: \" \")\n    var max = 0\n    for letter in letters\
    \ {\n        if let count = result[String(letter)] {\n            result[String(letter)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            result[String(letter)] = 1\n\
    \            if 1 > max {\n                max = 1\n            }\n        }\n\
    \    }\n    return result.filter { $0.value == max }", "    var histogram = [String\
    \ : Int]()\n    let letters = test.components(separatedBy: \" \")\n    for letter\
    \ in letters {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if result[letter] == nil {\n            result[letter] = 1\n        } else {\n\
    \            result[letter]! += 1\n        }\n    }\n    return result", "   \
    \ var histogram = [String : Int]()\n    var max = 0\n    for letter in test.split(separator:\
    \ \" \") {\n        if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n        if histogram[String(letter)]! > max {\n            max = histogram[String(letter)]!\n\
    \        }\n    }\n    return histogram.filter { $0.value == max }", "    var\
    \ result = [String : Int]()\n    let words = test.components(separatedBy: \" \"\
    )\n    for word in words {\n        if let count = result[word] {\n          \
    \  result[word] = count + 1\n        } else {\n            result[word] = 1\n\
    \        }\n    }\n    return result", "    var result = [String : Int]()\n  \
    \  let letters = test.components(separatedBy: \" \")\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    let words = test.split(separator: \" \")\n    for word\
    \ in words {\n        if let count = histogram[String(word)] {\n            histogram[String(word)]\
    \ = count + 1\n        } else {\n            histogram[String(word)] = 1\n   \
    \     }\n    }\n    return histogram", "    var dict = [String : Int]()\n    let\
    \ array = test.components(separatedBy: \" \")\n    for i in array {\n        if\
    \ dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]\
    \ = dict[i]! + 1\n        }\n    }\n    return dict", "    let letters = test.split(separator:\
    \ \" \")\n    var count = [String : Int]()\n    for letter in letters {\n    \
    \    if let value = count[String(letter)] {\n            count[String(letter)]\
    \ = value + 1\n        } else {\n            count[String(letter)] = 1\n     \
    \   }\n    }\n    return count"]
stop_tokens:
- "\n}"
