language: swift
name: HumanEval_153_Strongest_Extension
results:
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.uppercased().count) - Double(extension_name.lowercased().count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp5tw1dsfi/tmp5tw1dsfi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0195c6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0195966b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0195966988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01959657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5tw1dsfi                        0x000055f1b219aa2d <unavailable> + 6701

    5    libc.so.6                          0x00002b0195e5b460 __libc_start_main +
    245

    6    tmp5tw1dsfi                        0x000055f1b219a5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0.0\n        for char in extension_name\
    \ {\n            if char.isUppercase {\n                extension_strength +=\
    \ 1\n            } else {\n                extension_strength -= 1\n         \
    \   }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpi5zmdd6z/tmpi5zmdd6z.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf6360cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf63303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf63303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf633027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi5zmdd6z                        0x000055c94756e7cd <unavailable> + 6093

    5    libc.so.6                          0x00002abf637f8460 __libc_start_main +
    245

    6    tmpi5zmdd6z                        0x000055c94756e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let strength = Double(extension_name.filter{$0.isUppercase}.count)\
    \ - Double(extension_name.filter{$0.isLowercase}.count)\n        if strength >\
    \ strongest_extension_strength {\n            strongest_extension_strength = strength\n\
    \            strongest_extension = extension_name\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp2rcyicvp/tmp2rcyicvp.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2caf507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2caf1feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2caf1fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2caf1fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rcyicvp                        0x00005595f24d7cdc <unavailable> + 7388

    5    libc.so.6                          0x00002b2caf6f3460 __libc_start_main +
    245

    6    tmp2rcyicvp                        0x00005595f24d73e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0\n        for character in extension_name\
    \ {\n            if character.isUppercase {\n                extension_strength\
    \ += 1\n            } else {\n                extension_strength -= 1\n      \
    \      }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp78qq_1cy/tmp78qq_1cy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ec8350c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ec8047b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ec8047988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ec80467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78qq_1cy                        0x000055d38f15c81d <unavailable> + 6173

    5    libc.so.6                          0x00002b7ec853c460 __libc_start_main +
    245

    6    tmp78qq_1cy                        0x000055d38f15c3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest = \"\"\n    var\
    \ strength = 0\n    for ext in extensions {\n        var cap = 0\n        var\
    \ sm = 0\n        for c in ext {\n            if c.isUppercase {\n           \
    \     cap += 1\n            } else {\n                sm += 1\n            }\n\
    \        }\n        if cap - sm > strength {\n            strength = cap - sm\n\
    \            strongest = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmph1ktropt/tmph1ktropt.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb0517ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb04e71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb04e71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb04e707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1ktropt                        0x000056352f87fa3d <unavailable> + 6717

    5    libc.so.6                          0x00002abb05366460 __libc_start_main +
    245

    6    tmph1ktropt                        0x000056352f87f5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpbfrb055e/tmpbfrb055e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92db601c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92db2f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92db2f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92db2f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfrb055e                        0x000055a0be59bcdc <unavailable> + 7388

    5    libc.so.6                          0x00002b92db7ed460 __libc_start_main +
    245

    6    tmpbfrb055e                        0x000055a0be59b3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpycf6yvbj/tmpycf6yvbj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89dc0dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89dbdd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89dbdd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89dbdd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpycf6yvbj                        0x000056393fa1dcdc <unavailable> + 7388

    5    libc.so.6                          0x00002b89dc2c7460 __libc_start_main +
    245

    6    tmpycf6yvbj                        0x000056393fa1d3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0.0\n        for char in extension_name\
    \ {\n            if char.isUppercase {\n                extension_strength +=\
    \ 1\n            } else {\n                extension_strength -= 1\n         \
    \   }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpahii34pc/tmpahii34pc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c9985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c967cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c967c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c967b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahii34pc                        0x000055be774cda8d <unavailable> + 6797

    5    libc.so.6                          0x00002ab8c9b71460 __libc_start_main +
    245

    6    tmpahii34pc                        0x000055be774cd619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter({$0.isUppercase}).count\
    \ - extension_name.filter({$0.isLowercase}).count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmprvdqhnwf/tmprvdqhnwf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa57a03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa576fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa576fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa576f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvdqhnwf                        0x0000555a6113cfac <unavailable> + 8108

    5    libc.so.6                          0x00002afa57bef460 __libc_start_main +
    245

    6    tmprvdqhnwf                        0x0000555a6113c6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let cap = extension_name.filter { $0.isUppercase }.count\n      \
    \  let sm = extension_name.filter { $0.isLowercase }.count\n        let strength\
    \ = Double(cap) - Double(sm)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpomqurf55/tmpomqurf55.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61c4ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61c1c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61c1c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61c1c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomqurf55                        0x0000555d7b6b2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab61c6b8460 __libc_start_main +
    245

    6    tmpomqurf55                        0x0000555d7b6b2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter({$0.isUppercase}).count\
    \ - extension_name.filter({$0.isLowercase}).count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp1d042ugf/tmp1d042ugf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe75039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe74d30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe74d30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe74d2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1d042ugf                        0x0000555e2b59cd2c <unavailable> + 7468

    5    libc.so.6                          0x00002afe75225460 __libc_start_main +
    245

    6    tmp1d042ugf                        0x0000555e2b59c439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter{$0.isUppercase}.count)\
    \ - Double(extension_name.filter{$0.isLowercase}.count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj2q8u51x/tmpj2q8u51x.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4205ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4202c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4202c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4202c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2q8u51x                        0x0000565346e5cf4c <unavailable> + 8012

    5    libc.so.6                          0x00002ba4207b8460 __libc_start_main +
    245

    6    tmpj2q8u51x                        0x0000565346e5c659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.uppercased().count) - Double(extension_name.lowercased().count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp3nfcjzim/tmp3nfcjzim.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b164dbd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b164d8c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b164d8c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b164d8c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nfcjzim                        0x000055adcd33e7bd <unavailable> + 6077

    5    libc.so.6                          0x00002b164ddbc460 __libc_start_main +
    245

    6    tmp3nfcjzim                        0x000055adcd33e349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var strength = 0.0\n        for char in extension_name {\n      \
    \      if char.isUppercase {\n                strength += 1\n            } else\
    \ {\n                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpxsd8qtx0/tmpxsd8qtx0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2323ff4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2323cebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2323ceb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2323cea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxsd8qtx0                        0x000055992abc4a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b23241e0460 __libc_start_main +
    245

    6    tmpxsd8qtx0                        0x000055992abc45c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var cap = 0\n        var sm = 0\n        for char in extension_name {\n\
    \            if char.isUppercase {\n                cap += 1\n            } else\
    \ {\n                sm += 1\n            }\n        }\n        let strength =\
    \ Double(cap) - Double(sm)\n        if strength > strongest_strength {\n     \
    \       strongest_strength = strength\n            strongest_extension = extension_name\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmprl2wre5a/tmprl2wre5a.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38792d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3878fd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3878fd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3878fcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprl2wre5a                        0x00005560193d9a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b38794c5460 __libc_start_main +
    245

    6    tmprl2wre5a                        0x00005560193d95c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let cap = extension_name.filter { $0.isUppercase }.count\n      \
    \  let sm = extension_name.filter { $0.isLowercase }.count\n        let strength\
    \ = Double(cap) - Double(sm)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpomqurf55/tmpomqurf55.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61c4ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61c1c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61c1c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61c1c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomqurf55                        0x0000555d7b6b2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab61c6b8460 __libc_start_main +
    245

    6    tmpomqurf55                        0x0000555d7b6b2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var uppercase_count = 0\n        var lowercase_count = 0\n        for\
    \ char in extension_name {\n            if char.isUppercase {\n              \
    \  uppercase_count += 1\n            } else if char.isLowercase {\n          \
    \      lowercase_count += 1\n            }\n        }\n        let strength =\
    \ Double(uppercase_count) - Double(lowercase_count)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp328awida/tmp328awida.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ef4adbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ef47d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ef47d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ef47d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp328awida                        0x0000560930d72f1c <unavailable> + 7964

    5    libc.so.6                          0x00002b0ef4cc7460 __libc_start_main +
    245

    6    tmp328awida                        0x0000560930d72629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for char in extension_name {\n           \
    \ if char.isUppercase {\n                strength += 1\n            } else {\n\
    \                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj0f8am5w/tmpj0f8am5w.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cbfd9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cbfa93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cbfa93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cbfa927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0f8am5w                        0x000055930f3f1a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b0cbff88460 __libc_start_main +
    245

    6    tmpj0f8am5w                        0x000055930f3f15c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter{$0.isUppercase}.count) - Double(extension_name.filter{$0.isLowercase}.count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpzudb96wo/tmpzudb96wo.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94f5f12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94f5c09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94f5c09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94f5c087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzudb96wo                        0x000055cb66710cdc <unavailable> + 7388

    5    libc.so.6                          0x00002b94f60fe460 __libc_start_main +
    245

    6    tmpzudb96wo                        0x000055cb667103e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter { $0.isUppercase }.count\
    \ - extension_name.filter { $0.isLowercase }.count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj378rpcd/tmpj378rpcd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ff5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ff2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95ff2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95ff2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj378rpcd                        0x00005604f77a0fac <unavailable> + 8108

    5    libc.so.6                          0x00002b95ff7b1460 __libc_start_main +
    245

    6    tmpj378rpcd                        0x00005604f77a06b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var uppercase_count = 0\n        var lowercase_count = 0\n        for\
    \ char in extension_name {\n            if char.isUppercase {\n              \
    \  uppercase_count += 1\n            } else if char.isLowercase {\n          \
    \      lowercase_count += 1\n            }\n        }\n        let strength =\
    \ Double(uppercase_count) - Double(lowercase_count)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp328awida/tmp328awida.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ef4adbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ef47d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ef47d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ef47d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp328awida                        0x0000560930d72f1c <unavailable> + 7964

    5    libc.so.6                          0x00002b0ef4cc7460 __libc_start_main +
    245

    6    tmp328awida                        0x0000560930d72629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let strength = extension_name.filter({$0.isUppercase}).count - extension_name.filter({$0.isLowercase}).count\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension_name\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmps6kw69wi/tmps6kw69wi.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af62edbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af62eab5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af62eab5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af62eab47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6kw69wi                        0x0000557dc12f2fac <unavailable> + 8108

    5    libc.so.6                          0x00002af62efaa460 __libc_start_main +
    245

    6    tmps6kw69wi                        0x0000557dc12f26b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter{$0.isUppercase}.count) - Double(extension_name.filter{$0.isLowercase}.count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpzudb96wo/tmpzudb96wo.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94f5f12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94f5c09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94f5c09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94f5c087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzudb96wo                        0x000055cb66710cdc <unavailable> + 7388

    5    libc.so.6                          0x00002b94f60fe460 __libc_start_main +
    245

    6    tmpzudb96wo                        0x000055cb667103e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for char in extension_name {\n           \
    \ if char.isUppercase {\n                strength += 1\n            } else {\n\
    \                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpehd61u67/tmpehd61u67.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5832299c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5831f90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5831f90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5831f8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehd61u67                        0x000055ef89f097cd <unavailable> + 6093

    5    libc.so.6                          0x00002b5832485460 __libc_start_main +
    245

    6    tmpehd61u67                        0x000055ef89f09359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmps5drzfl1/tmps5drzfl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafabbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafa8b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafa8b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafa8b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5drzfl1                        0x000056326023ea2d <unavailable> + 6701

    5    libc.so.6                          0x00002acafada9460 __libc_start_main +
    245

    6    tmps5drzfl1                        0x000056326023e5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let strength = Double(extension_name.uppercased().count) - Double(extension_name.lowercased().count)\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension_name\n        }\n  \
    \  }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpr5gdhdd_/tmpr5gdhdd_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b4f47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b4c3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b4c3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b4c3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5gdhdd_                        0x0000562fdf4277bd <unavailable> + 6077

    5    libc.so.6                          0x00002b57b5133460 __libc_start_main +
    245

    6    tmpr5gdhdd_                        0x0000562fdf427349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter{$0.isUppercase}.count) - Double(extension_name.filter{$0.isLowercase}.count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpt00gg2i9/tmpt00gg2i9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eb5959c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eb5650b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eb5650988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eb564f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt00gg2i9                        0x0000563738432f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b3eb5b45460 __libc_start_main +
    245

    6    tmpt00gg2i9                        0x0000563738432659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let extension_strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpqu3j_dak/tmpqu3j_dak.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b280bcc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b280b9b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b280b9b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b280b9b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqu3j_dak                        0x000055bfbb9dff6c <unavailable> + 8044

    5    libc.so.6                          0x00002b280beae460 __libc_start_main +
    245

    6    tmpqu3j_dak                        0x000055bfbb9df679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter{$0.isUppercase}.count\
    \ - extension_name.filter{$0.isLowercase}.count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp7mbyz782/tmp7mbyz782.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53dd65cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53dd353b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53dd353988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53dd3527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7mbyz782                        0x00005557b9187d2c <unavailable> + 7468

    5    libc.so.6                          0x00002b53dd848460 __libc_start_main +
    245

    6    tmp7mbyz782                        0x00005557b9187439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter({$0.isUppercase}).count)\
    \ - Double(extension_name.filter({$0.isLowercase}).count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpen22ioiw/tmpen22ioiw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac954034c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac953d2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac953d2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac953d2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen22ioiw                        0x000055a12bbd1f4c <unavailable> + 8012

    5    libc.so.6                          0x00002ac954220460 __libc_start_main +
    245

    6    tmpen22ioiw                        0x000055a12bbd1659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let strength = Double(extension_name.uppercased().count) - Double(extension_name.lowercased().count)\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension_name\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpsmnykbai/tmpsmnykbai.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d60874c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d6056bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d6056b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d6056a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsmnykbai                        0x000055d0621dfa2d <unavailable> + 6701

    5    libc.so.6                          0x00002b8d60a60460 __libc_start_main +
    245

    6    tmpsmnykbai                        0x000055d0621df5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmps5drzfl1/tmps5drzfl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafabbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafa8b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafa8b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafa8b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5drzfl1                        0x000056326023ea2d <unavailable> + 6701

    5    libc.so.6                          0x00002acafada9460 __libc_start_main +
    245

    6    tmps5drzfl1                        0x000056326023e5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.uppercased().count) - Double(extension_name.lowercased().count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp5tw1dsfi/tmp5tw1dsfi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0195c6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0195966b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0195966988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01959657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5tw1dsfi                        0x000055f1b219aa2d <unavailable> + 6701

    5    libc.so.6                          0x00002b0195e5b460 __libc_start_main +
    245

    6    tmp5tw1dsfi                        0x000055f1b219a5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpbfrb055e/tmpbfrb055e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92db601c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92db2f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92db2f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92db2f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfrb055e                        0x000055a0be59bcdc <unavailable> + 7388

    5    libc.so.6                          0x00002b92db7ed460 __libc_start_main +
    245

    6    tmpbfrb055e                        0x000055a0be59b3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for ext in extensions {\n        let strength\
    \ = Double(ext.filter{$0.isUppercase}.count) - Double(ext.filter{$0.isLowercase}.count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = ext\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp_eewc_4v/tmp_eewc_4v.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ad2dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10acfd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10acfd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10acfd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_eewc_4v                        0x0000565126829f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b10ad4cb460 __libc_start_main +
    245

    6    tmp_eewc_4v                        0x0000565126829659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if strength >\
    \ strongest_extension_strength {\n            strongest_extension_strength = strength\n\
    \            strongest_extension = extension_name\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpkx9qayvn/tmpkx9qayvn.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcd6af3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcd67eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcd67ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcd67e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkx9qayvn                        0x0000557b5f0e8f1c <unavailable> + 7964

    5    libc.so.6                          0x00002abcd6cdf460 __libc_start_main +
    245

    6    tmpkx9qayvn                        0x0000557b5f0e8629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest = \"\"\n    var\
    \ strength = 0\n    for ext in extensions {\n        var cap = 0\n        var\
    \ sm = 0\n        for c in ext {\n            if c.isUppercase {\n           \
    \     cap += 1\n            } else {\n                sm += 1\n            }\n\
    \        }\n        if cap - sm > strength {\n            strength = cap - sm\n\
    \            strongest = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmph1ktropt/tmph1ktropt.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb0517ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb04e71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb04e71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb04e707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1ktropt                        0x000056352f87fa3d <unavailable> + 6717

    5    libc.so.6                          0x00002abb05366460 __libc_start_main +
    245

    6    tmph1ktropt                        0x000056352f87f5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmps5drzfl1/tmps5drzfl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafabbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafa8b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafa8b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafa8b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5drzfl1                        0x000056326023ea2d <unavailable> + 6701

    5    libc.so.6                          0x00002acafada9460 __libc_start_main +
    245

    6    tmps5drzfl1                        0x000056326023e5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for ext in extensions {\n     \
    \   let CAP = ext.filter { $0.isUppercase }.count\n        let SM = ext.filter\
    \ { $0.isLowercase }.count\n        let strength = CAP - SM\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = ext\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp2hspisf9/tmp2hspisf9.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76607d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76604cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76604cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76604ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hspisf9                        0x000055e56854afac <unavailable> + 8108

    5    libc.so.6                          0x00002b76609c0460 __libc_start_main +
    245

    6    tmp2hspisf9                        0x000055e56854a6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter { $0.isUppercase }.count\
    \ - extension_name.filter { $0.isLowercase }.count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj378rpcd/tmpj378rpcd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ff5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ff2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95ff2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95ff2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj378rpcd                        0x00005604f77a0fac <unavailable> + 8108

    5    libc.so.6                          0x00002b95ff7b1460 __libc_start_main +
    245

    6    tmpj378rpcd                        0x00005604f77a06b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for character in extension_name {\n            if character.isUppercase {\n\
    \                upper_case_count += 1\n            } else if character.isLowercase\
    \ {\n                lower_case_count += 1\n            }\n        }\n       \
    \ let extension_strength = Double(upper_case_count) - Double(lower_case_count)\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp1viqoghf/tmp1viqoghf.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c74fb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c74cadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c74cad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c74cac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1viqoghf                        0x000055ec6786af1c <unavailable> + 7964

    5    libc.so.6                          0x00002b3c751a2460 __libc_start_main +
    245

    6    tmp1viqoghf                        0x000055ec6786a629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_strength = 0\n    for extension_name in extensions {\n    \
    \    let strength = extension_name.filter({$0.isUppercase}).count - extension_name.filter({$0.isLowercase}).count\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpkzfxktl1/tmpkzfxktl1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e11238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e10f2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e10f2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e10f2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkzfxktl1                        0x000055ebc6c30fac <unavailable> + 8108

    5    libc.so.6                          0x00002b7e11424460 __libc_start_main +
    245

    6    tmpkzfxktl1                        0x000055ebc6c306b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for ext in extensions {\n        let strength\
    \ = Double(ext.filter { $0.isUppercase }.count) - Double(ext.filter { $0.isLowercase\
    \ }.count)\n        if strength > strongest_strength {\n            strongest_strength\
    \ = strength\n            strongest_extension = ext\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv3gxqrg8/tmpv3gxqrg8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fbff88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fbfc7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fbfc7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fbfc7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3gxqrg8                        0x00005626fdad8f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b0fc0174460 __libc_start_main +
    245

    6    tmpv3gxqrg8                        0x00005626fdad8659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for ext in extensions {\n        let strength\
    \ = Double(ext.filter { $0.isUppercase }.count) - Double(ext.filter { $0.isLowercase\
    \ }.count)\n        if strength > strongest_strength {\n            strongest_strength\
    \ = strength\n            strongest_extension = ext\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpk0w89qq2/tmpk0w89qq2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25bcb8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25bc884b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25bc884988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25bc8837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk0w89qq2                        0x00005555be89ccdc <unavailable> + 7388

    5    libc.so.6                          0x00002b25bcd79460 __libc_start_main +
    245

    6    tmpk0w89qq2                        0x00005555be89c3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var uppercase_count = 0\n        var lowercase_count = 0\n        for\
    \ char in extension_name {\n            if char.isUppercase {\n              \
    \  uppercase_count += 1\n            } else if char.isLowercase {\n          \
    \      lowercase_count += 1\n            }\n        }\n        let strength =\
    \ Double(uppercase_count) - Double(lowercase_count)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp328awida/tmp328awida.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ef4adbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ef47d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ef47d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ef47d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp328awida                        0x0000560930d72f1c <unavailable> + 7964

    5    libc.so.6                          0x00002b0ef4cc7460 __libc_start_main +
    245

    6    tmp328awida                        0x0000560930d72629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter{$0.isUppercase}.count) - Double(extension_name.filter{$0.isLowercase}.count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpt00gg2i9/tmpt00gg2i9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eb5959c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eb5650b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eb5650988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eb564f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt00gg2i9                        0x0000563738432f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b3eb5b45460 __libc_start_main +
    245

    6    tmpt00gg2i9                        0x0000563738432659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter { $0.isUppercase }.count\
    \ - extension_name.filter { $0.isLowercase }.count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj378rpcd/tmpj378rpcd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ff5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ff2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95ff2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95ff2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj378rpcd                        0x00005604f77a0fac <unavailable> + 8108

    5    libc.so.6                          0x00002b95ff7b1460 __libc_start_main +
    245

    6    tmpj378rpcd                        0x00005604f77a06b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for letter in extension_name {\n         \
    \   if letter.isUppercase {\n                strength += 1\n            } else\
    \ {\n                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdpsqwvw0/tmpdpsqwvw0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa6c5a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa6c29cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa6c29c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa6c29b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpsqwvw0                        0x000055c5d063ea3d <unavailable> + 6717

    5    libc.so.6                          0x00002baa6c791460 __libc_start_main +
    245

    6    tmpdpsqwvw0                        0x000055c5d063e5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for ext in extensions {\n  \
    \      var cap = 0\n        var sm = 0\n        for char in ext {\n          \
    \  if char.isUppercase {\n                cap += 1\n            } else {\n   \
    \             sm += 1\n            }\n        }\n        let strength = Double(cap)\
    \ - Double(sm)\n        if strength > strongest_extension_strength {\n       \
    \     strongest_extension_strength = strength\n            strongest_extension\
    \ = ext\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpha99_04t/tmpha99_04t.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6663516c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b666320db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b666320d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b666320c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpha99_04t                        0x0000556b83606a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b6663702460 __libc_start_main +
    245

    6    tmpha99_04t                        0x0000556b836065c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let upper_case_count = extension_name.filter({$0.isUppercase}).count\n\
    \        let lower_case_count = extension_name.filter({$0.isLowercase}).count\n\
    \        let extension_strength = Double(upper_case_count) - Double(lower_case_count)\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension_name\n            strongest_extension_strength = extension_strength\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpil3nyq62/tmpil3nyq62.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b804f666c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b804f35db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b804f35d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b804f35c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpil3nyq62                        0x000055db0dbe5cdc <unavailable> + 7388

    5    libc.so.6                          0x00002b804f852460 __libc_start_main +
    245

    6    tmpil3nyq62                        0x000055db0dbe53e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var strength = 0.0\n        for char in extension_name {\n      \
    \      if char.isUppercase {\n                strength += 1\n            } else\
    \ {\n                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpxsd8qtx0/tmpxsd8qtx0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2323ff4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2323cebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2323ceb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2323cea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxsd8qtx0                        0x000055992abc4a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b23241e0460 __libc_start_main +
    245

    6    tmpxsd8qtx0                        0x000055992abc45c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0\n        for char in extension_name {\n\
    \            if char.isUppercase {\n                extension_strength += 1\n\
    \            } else {\n                extension_strength -= 1\n            }\n\
    \        }\n        if extension_strength > strongest_extension_strength {\n \
    \           strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return class_name + \".\" + strongest_extension\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpws1bpy4g/tmpws1bpy4g.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0932a3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0932735b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0932735988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09327347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpws1bpy4g                        0x00005588a973881d <unavailable> + 6173

    5    libc.so.6                          0x00002b0932c2a460 __libc_start_main +
    245

    6    tmpws1bpy4g                        0x00005588a97383a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0\n        for character in extension_name\
    \ {\n            if character.isUppercase {\n                extension_strength\
    \ += 1\n            } else {\n                extension_strength -= 1\n      \
    \      }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmphm3whj91/tmphm3whj91.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b841591ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8415615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8415615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84156147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphm3whj91                        0x0000562791df1a8d <unavailable> + 6797

    5    libc.so.6                          0x00002b8415b0a460 __libc_start_main +
    245

    6    tmphm3whj91                        0x0000562791df1619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let extension_strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdfaieqyc/tmpdfaieqyc.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81a2e0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81a2b05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81a2b05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81a2b047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfaieqyc                        0x000055efd22cff1c <unavailable> + 7964

    5    libc.so.6                          0x00002b81a2ffa460 __libc_start_main +
    245

    6    tmpdfaieqyc                        0x000055efd22cf629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for character in extension_name {\n            if character.isUppercase {\n\
    \                upper_case_count += 1\n            } else if character.isLowercase\
    \ {\n                lower_case_count += 1\n            }\n        }\n       \
    \ let strength = Double(upper_case_count) - Double(lower_case_count)\n       \
    \ if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension_name\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp4fayqwy5/tmp4fayqwy5.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0fbef3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0fbbeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0fbbea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0fbbe97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fayqwy5                        0x000055d0670f4f1c <unavailable> + 7964

    5    libc.so.6                          0x00002ae0fc0df460 __libc_start_main +
    245

    6    tmp4fayqwy5                        0x000055d0670f4629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for char in extension_name {\n           \
    \ if char.isUppercase {\n                strength += 1\n            } else {\n\
    \                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj0f8am5w/tmpj0f8am5w.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cbfd9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cbfa93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cbfa93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cbfa927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0f8am5w                        0x000055930f3f1a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b0cbff88460 __libc_start_main +
    245

    6    tmpj0f8am5w                        0x000055930f3f15c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0.0\n        for letter in extension_name\
    \ {\n            if letter.isUppercase {\n                extension_strength +=\
    \ 1\n            } else {\n                extension_strength -= 1\n         \
    \   }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpe3nqzogv/tmpe3nqzogv.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6d34b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6d31adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6d31ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6d31ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3nqzogv                        0x000055c2c47b9a3d <unavailable> + 6717

    5    libc.so.6                          0x00002ae6d36a2460 __libc_start_main +
    245

    6    tmpe3nqzogv                        0x000055c2c47b95c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    let class_name = class_name\n\
    \    let extensions = extensions\n    var strongest_extension = \"\"\n    var\
    \ strongest_extension_strength = 0\n    for extension_name in extensions {\n \
    \       var extension_strength = 0\n        for char in extension_name {\n   \
    \         if char.isUppercase {\n                extension_strength += 1\n   \
    \         } else {\n                extension_strength -= 1\n            }\n \
    \       }\n        if extension_strength > strongest_extension_strength {\n  \
    \          strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp16bz3usb/tmp16bz3usb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae07d78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae07d485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae07d485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae07d4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16bz3usb                        0x00005619645a5a3d <unavailable> + 6717

    5    libc.so.6                          0x00002ae07d97a460 __libc_start_main +
    245

    6    tmp16bz3usb                        0x00005619645a55c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var uppercase_count = 0\n        var lowercase_count = 0\n      \
    \  for letter in extension_name {\n            if letter.isUppercase {\n     \
    \           uppercase_count += 1\n            } else if letter.isLowercase {\n\
    \                lowercase_count += 1\n            }\n        }\n        let extension_strength\
    \ = Double(uppercase_count) - Double(lowercase_count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp9qdsaxoa/tmp9qdsaxoa.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dca2cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dc9fc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dc9fc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dc9fc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9qdsaxoa                        0x000055842a58af1c <unavailable> + 7964

    5    libc.so.6                          0x00002b2dca4b9460 __libc_start_main +
    245

    6    tmp9qdsaxoa                        0x000055842a58a629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    let class_name = class_name\n\
    \    let extensions = extensions\n    var strongest_extension = \"\"\n    var\
    \ strongest_extension_strength = 0\n    for extension_name in extensions {\n \
    \       var extension_strength = 0\n        for char in extension_name {\n   \
    \         if char.isUppercase {\n                extension_strength += 1\n   \
    \         } else {\n                extension_strength -= 1\n            }\n \
    \       }\n        if extension_strength > strongest_extension_strength {\n  \
    \          strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return class_name + \".\" + strongest_extension\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp4ter8iu4/tmp4ter8iu4.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f05c02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f058f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f058f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f058f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ter8iu4                        0x000055ebd0da97cd <unavailable> + 6093

    5    libc.so.6                          0x00002b4f05dee460 __libc_start_main +
    245

    6    tmp4ter8iu4                        0x000055ebd0da9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp0rkn6exw/tmp0rkn6exw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8571fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad856ef1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad856ef1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad856ef07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0rkn6exw                        0x000055d83bf8bf4c <unavailable> + 8012

    5    libc.so.6                          0x00002ad8573e6460 __libc_start_main +
    245

    6    tmp0rkn6exw                        0x000055d83bf8b659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let extension_strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdfaieqyc/tmpdfaieqyc.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81a2e0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81a2b05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81a2b05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81a2b047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfaieqyc                        0x000055efd22cff1c <unavailable> + 7964

    5    libc.so.6                          0x00002b81a2ffa460 __libc_start_main +
    245

    6    tmpdfaieqyc                        0x000055efd22cf629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter { $0.isUppercase }.count\
    \ - extension_name.filter { $0.isLowercase }.count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj378rpcd/tmpj378rpcd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ff5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ff2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95ff2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95ff2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj378rpcd                        0x00005604f77a0fac <unavailable> + 8108

    5    libc.so.6                          0x00002b95ff7b1460 __libc_start_main +
    245

    6    tmpj378rpcd                        0x00005604f77a06b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for ext in extensions {\n        var strength\
    \ = 0.0\n        for char in ext {\n            if char.isUppercase {\n      \
    \          strength += 1\n            } else {\n                strength -= 1\n\
    \            }\n        }\n        if strength > strongest_strength {\n      \
    \      strongest_strength = strength\n            strongest_extension = ext\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpaxmje28j/tmpaxmje28j.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab651784c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab65147bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab65147b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab65147a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaxmje28j                        0x0000561fc092ba3d <unavailable> + 6717

    5    libc.so.6                          0x00002ab651970460 __libc_start_main +
    245

    6    tmpaxmje28j                        0x0000561fc092b5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let extension_strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdfaieqyc/tmpdfaieqyc.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81a2e0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81a2b05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81a2b05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81a2b047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfaieqyc                        0x000055efd22cff1c <unavailable> + 7964

    5    libc.so.6                          0x00002b81a2ffa460 __libc_start_main +
    245

    6    tmpdfaieqyc                        0x000055efd22cf629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.uppercased().count) - Double(extension_name.lowercased().count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp5tw1dsfi/tmp5tw1dsfi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0195c6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0195966b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0195966988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01959657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5tw1dsfi                        0x000055f1b219aa2d <unavailable> + 6701

    5    libc.so.6                          0x00002b0195e5b460 __libc_start_main +
    245

    6    tmp5tw1dsfi                        0x000055f1b219a5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp0rkn6exw/tmp0rkn6exw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8571fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad856ef1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad856ef1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad856ef07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0rkn6exw                        0x000055d83bf8bf4c <unavailable> + 8012

    5    libc.so.6                          0x00002ad8573e6460 __libc_start_main +
    245

    6    tmp0rkn6exw                        0x000055d83bf8b659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0\n        for char in extension_name {\n\
    \            if char.isUppercase {\n                extension_strength += 1\n\
    \            } else {\n                extension_strength -= 1\n            }\n\
    \        }\n        if extension_strength > strongest_extension_strength {\n \
    \           strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmplhz3u810/tmplhz3u810.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2820dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad281dd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad281dd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad281dd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplhz3u810                        0x000055a069228a8d <unavailable> + 6797

    5    libc.so.6                          0x00002ad2822c7460 __libc_start_main +
    245

    6    tmplhz3u810                        0x000055a069228619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for ext in extensions {\n        var strength\
    \ = 0.0\n        for char in ext {\n            if char.isUppercase {\n      \
    \          strength += 1\n            } else {\n                strength -= 1\n\
    \            }\n        }\n        if strength > strongest_strength {\n      \
    \      strongest_strength = strength\n            strongest_extension = ext\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpaxmje28j/tmpaxmje28j.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab651784c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab65147bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab65147b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab65147a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaxmje28j                        0x0000561fc092ba3d <unavailable> + 6717

    5    libc.so.6                          0x00002ab651970460 __libc_start_main +
    245

    6    tmpaxmje28j                        0x0000561fc092b5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for ext in extensions {\n        let strength\
    \ = Double(ext.uppercased().count) - Double(ext.lowercased().count)\n        if\
    \ strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp1s9u95s2/tmp1s9u95s2.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac712774c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac71246bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac71246b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac71246a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1s9u95s2                        0x0000562b2e6b5a2d <unavailable> + 6701

    5    libc.so.6                          0x00002ac712960460 __libc_start_main +
    245

    6    tmp1s9u95s2                        0x0000562b2e6b55b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter({$0.isUppercase}).count\
    \ - extension_name.filter({$0.isLowercase}).count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp1d042ugf/tmp1d042ugf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe75039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe74d30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe74d30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe74d2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1d042ugf                        0x0000555e2b59cd2c <unavailable> + 7468

    5    libc.so.6                          0x00002afe75225460 __libc_start_main +
    245

    6    tmp1d042ugf                        0x0000555e2b59c439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmps5drzfl1/tmps5drzfl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafabbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafa8b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafa8b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafa8b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5drzfl1                        0x000056326023ea2d <unavailable> + 6701

    5    libc.so.6                          0x00002acafada9460 __libc_start_main +
    245

    6    tmps5drzfl1                        0x000056326023e5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0.0\n        for char in extension_name\
    \ {\n            if char.isUppercase {\n                extension_strength +=\
    \ 1\n            } else {\n                extension_strength -= 1\n         \
    \   }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpi5zmdd6z/tmpi5zmdd6z.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf6360cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf63303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf63303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf633027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi5zmdd6z                        0x000055c94756e7cd <unavailable> + 6093

    5    libc.so.6                          0x00002abf637f8460 __libc_start_main +
    245

    6    tmpi5zmdd6z                        0x000055c94756e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0.0\n        for char in extension_name\
    \ {\n            if char.isUppercase {\n                extension_strength +=\
    \ 1\n            } else {\n                extension_strength -= 1\n         \
    \   }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv4c88s_i/tmpv4c88s_i.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6a8334c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6a802bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6a802b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6a802a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4c88s_i                        0x000055b2e8c2ca3d <unavailable> + 6717

    5    libc.so.6                          0x00002ae6a8520460 __libc_start_main +
    245

    6    tmpv4c88s_i                        0x000055b2e8c2c5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmps5drzfl1/tmps5drzfl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafabbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafa8b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafa8b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafa8b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5drzfl1                        0x000056326023ea2d <unavailable> + 6701

    5    libc.so.6                          0x00002acafada9460 __libc_start_main +
    245

    6    tmps5drzfl1                        0x000056326023e5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension_strength = extension_strength\n\
    \            strongest_extension = extension_name\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmprf12y5rt/tmprf12y5rt.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed8a21ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed89f11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed89f11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed89f107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprf12y5rt                        0x00005633e30387bd <unavailable> + 6077

    5    libc.so.6                          0x00002aed8a406460 __libc_start_main +
    245

    6    tmprf12y5rt                        0x00005633e3038349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for char in extension_name {\n           \
    \ if char.isUppercase {\n                strength += 1\n            } else {\n\
    \                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj0f8am5w/tmpj0f8am5w.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cbfd9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cbfa93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cbfa93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cbfa927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0f8am5w                        0x000055930f3f1a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b0cbff88460 __libc_start_main +
    245

    6    tmpj0f8am5w                        0x000055930f3f15c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter({ $0.isUppercase\
    \ }).count) - Double(extension_name.filter({ $0.isLowercase }).count)\n      \
    \  if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmph9o34uzd/tmph9o34uzd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d0194dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d01644b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d01644988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d016437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph9o34uzd                        0x00005562a9c45f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b9d01b39460 __libc_start_main +
    245

    6    tmph9o34uzd                        0x00005562a9c45659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpbfrb055e/tmpbfrb055e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92db601c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92db2f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92db2f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92db2f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfrb055e                        0x000055a0be59bcdc <unavailable> + 7388

    5    libc.so.6                          0x00002b92db7ed460 __libc_start_main +
    245

    6    tmpbfrb055e                        0x000055a0be59b3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var strength = 0.0\n        for char in extension_name {\n      \
    \      if char.isUppercase {\n                strength += 1\n            } else\
    \ {\n                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpxsd8qtx0/tmpxsd8qtx0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2323ff4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2323cebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2323ceb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2323cea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxsd8qtx0                        0x000055992abc4a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b23241e0460 __libc_start_main +
    245

    6    tmpxsd8qtx0                        0x000055992abc45c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for character in extension_name {\n            if character.isUppercase {\n\
    \                upper_case_count += 1\n            } else if character.isLowercase\
    \ {\n                lower_case_count += 1\n            }\n        }\n       \
    \ let extension_strength = upper_case_count - lower_case_count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpcdeh9y9k/tmpcdeh9y9k.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8863211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8862f08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8862f08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8862f077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdeh9y9k                        0x0000556479d9ff6c <unavailable> + 8044

    5    libc.so.6                          0x00002b88633fd460 __libc_start_main +
    245

    6    tmpcdeh9y9k                        0x0000556479d9f679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0\n        for char in extension_name {\n\
    \            if char.isUppercase {\n                extension_strength += 1\n\
    \            } else {\n                extension_strength -= 1\n            }\n\
    \        }\n        if extension_strength > strongest_extension_strength {\n \
    \           strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return class_name + \".\" + strongest_extension\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpws1bpy4g/tmpws1bpy4g.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0932a3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0932735b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0932735988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09327347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpws1bpy4g                        0x00005588a973881d <unavailable> + 6173

    5    libc.so.6                          0x00002b0932c2a460 __libc_start_main +
    245

    6    tmpws1bpy4g                        0x00005588a97383a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var cap = 0\n        var sm = 0\n        for char in extension_name\
    \ {\n            if char.isUppercase {\n                cap += 1\n           \
    \ } else {\n                sm += 1\n            }\n        }\n        let strength\
    \ = Double(cap) - Double(sm)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpy_0v8nr5/tmpy_0v8nr5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eefb18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eef80fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eef80f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eef80e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_0v8nr5                        0x0000557b0ea67a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b9eefd04460 __libc_start_main +
    245

    6    tmpy_0v8nr5                        0x0000557b0ea675c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var upper_count = 0\n        var lower_count = 0\n        for letter in\
    \ extension_name {\n            if letter.isUppercase {\n                upper_count\
    \ += 1\n            } else {\n                lower_count += 1\n            }\n\
    \        }\n        let strength = Double(upper_count) - Double(lower_count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj_zpofyn/tmpj_zpofyn.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fd4897c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fd458eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fd458e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fd458d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_zpofyn                        0x000055975fc60a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b2fd4a83460 __libc_start_main +
    245

    6    tmpj_zpofyn                        0x000055975fc605c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmps5drzfl1/tmps5drzfl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafabbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafa8b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafa8b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafa8b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5drzfl1                        0x000056326023ea2d <unavailable> + 6701

    5    libc.so.6                          0x00002acafada9460 __libc_start_main +
    245

    6    tmps5drzfl1                        0x000056326023e5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0.0\n        for char in extension_name\
    \ {\n            if char.isUppercase {\n                extension_strength +=\
    \ 1\n            } else {\n                extension_strength -= 1\n         \
    \   }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpi5zmdd6z/tmpi5zmdd6z.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf6360cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf63303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf63303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf633027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi5zmdd6z                        0x000055c94756e7cd <unavailable> + 6093

    5    libc.so.6                          0x00002abf637f8460 __libc_start_main +
    245

    6    tmpi5zmdd6z                        0x000055c94756e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    let class_name = class_name\n\
    \    var strongest_extension = \"\"\n    var strongest_extension_strength = 0\n\
    \    for extension_name in extensions {\n        var extension_name = extension_name\n\
    \        var extension_strength = 0\n        for char in extension_name {\n  \
    \          if char.isUppercase {\n                extension_strength += 1\n  \
    \          } else {\n                extension_strength -= 1\n            }\n\
    \        }\n        if extension_strength > strongest_extension_strength {\n \
    \           strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpq1wj3xje/tmpq1wj3xje.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c63478c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c6316fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c6316f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c6316e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1wj3xje                        0x000055724ad93a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b2c63664460 __libc_start_main +
    245

    6    tmpq1wj3xje                        0x000055724ad935c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpycf6yvbj/tmpycf6yvbj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89dc0dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89dbdd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89dbdd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89dbdd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpycf6yvbj                        0x000056393fa1dcdc <unavailable> + 7388

    5    libc.so.6                          0x00002b89dc2c7460 __libc_start_main +
    245

    6    tmpycf6yvbj                        0x000056393fa1d3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp0rkn6exw/tmp0rkn6exw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8571fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad856ef1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad856ef1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad856ef07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0rkn6exw                        0x000055d83bf8bf4c <unavailable> + 8012

    5    libc.so.6                          0x00002ad8573e6460 __libc_start_main +
    245

    6    tmp0rkn6exw                        0x000055d83bf8b659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let upper_case_count = extension_name.filter { $0.isUppercase }.count\n\
    \        let lower_case_count = extension_name.filter { $0.isLowercase }.count\n\
    \        let strength = Double(upper_case_count) - Double(lower_case_count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpsgv40n_2/tmpsgv40n_2.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f51dadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f51aa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f51aa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f51aa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgv40n_2                        0x0000564e8b458f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b6f51f99460 __libc_start_main +
    245

    6    tmpsgv40n_2                        0x0000564e8b458659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for char in extension_name {\n           \
    \ if char.isUppercase {\n                strength += 1\n            } else {\n\
    \                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj0f8am5w/tmpj0f8am5w.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cbfd9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cbfa93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cbfa93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cbfa927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0f8am5w                        0x000055930f3f1a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b0cbff88460 __libc_start_main +
    245

    6    tmpj0f8am5w                        0x000055930f3f15c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_ in extensions {\n     \
    \   let strength = Double(extension_.filter { $0.isUppercase }.count) - Double(extension_.filter\
    \ { $0.isLowercase }.count)\n        if strength > strongest_strength {\n    \
    \        strongest_strength = strength\n            strongest_extension = extension_\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpgkocto8c/tmpgkocto8c.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77671c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7766ebeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7766ebe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7766ebd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgkocto8c                        0x00005563c76a8f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b77673b3460 __libc_start_main +
    245

    6    tmpgkocto8c                        0x00005563c76a8659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    let class_name = class_name\n\
    \    let extensions = extensions\n    var strongest_extension = \"\"\n    var\
    \ strongest_extension_strength = 0.0\n    for extension_name in extensions {\n\
    \        var upper_case_count = 0\n        var lower_case_count = 0\n        for\
    \ character in extension_name {\n            if character.isUppercase {\n    \
    \            upper_case_count += 1\n            } else if character.isLowercase\
    \ {\n                lower_case_count += 1\n            }\n        }\n       \
    \ let extension_strength = Double(upper_case_count) - Double(lower_case_count)\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmptbgbntc_/tmptbgbntc_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e1de00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e1daf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e1daf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e1daf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbgbntc_                        0x000055e4ad788f1c <unavailable> + 7964

    5    libc.so.6                          0x00002b2e1dfec460 __libc_start_main +
    245

    6    tmptbgbntc_                        0x000055e4ad788629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let cap = extension_name.filter { $0.isUppercase }.count\n      \
    \  let sm = extension_name.filter { $0.isLowercase }.count\n        let strength\
    \ = Double(cap) - Double(sm)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpomqurf55/tmpomqurf55.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61c4ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61c1c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61c1c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61c1c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomqurf55                        0x0000555d7b6b2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab61c6b8460 __libc_start_main +
    245

    6    tmpomqurf55                        0x0000555d7b6b2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmps5drzfl1/tmps5drzfl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafabbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafa8b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafa8b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafa8b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5drzfl1                        0x000056326023ea2d <unavailable> + 6701

    5    libc.so.6                          0x00002acafada9460 __libc_start_main +
    245

    6    tmps5drzfl1                        0x000056326023e5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var strength = 0.0\n        for char in extension_name {\n      \
    \      if char.isUppercase {\n                strength += 1\n            } else\
    \ {\n                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpxsd8qtx0/tmpxsd8qtx0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2323ff4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2323cebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2323ceb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2323cea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxsd8qtx0                        0x000055992abc4a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b23241e0460 __libc_start_main +
    245

    6    tmpxsd8qtx0                        0x000055992abc45c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter{$0.isUppercase}.count\
    \ - extension_name.filter{$0.isLowercase}.count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpvnjoyk97/tmpvnjoyk97.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafa4de5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafa4adcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafa4adc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafa4adb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvnjoyk97                        0x00005624edebcfac <unavailable> + 8108

    5    libc.so.6                          0x00002aafa4fd1460 __libc_start_main +
    245

    6    tmpvnjoyk97                        0x00005624edebc6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for ext in extensions {\n  \
    \      var uppercase_count = 0\n        var lowercase_count = 0\n        for char\
    \ in ext {\n            if char.isUppercase {\n                uppercase_count\
    \ += 1\n            } else if char.isLowercase {\n                lowercase_count\
    \ += 1\n            }\n        }\n        let strength = Double(uppercase_count)\
    \ - Double(lowercase_count)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = ext\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpflwv1j3l/tmpflwv1j3l.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaee9e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaee6d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaee6d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaee6d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpflwv1j3l                        0x000055d39d678f1c <unavailable> + 7964

    5    libc.so.6                          0x00002adaeebcc460 __libc_start_main +
    245

    6    tmpflwv1j3l                        0x000055d39d678629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmps5drzfl1/tmps5drzfl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafabbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafa8b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafa8b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafa8b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5drzfl1                        0x000056326023ea2d <unavailable> + 6701

    5    libc.so.6                          0x00002acafada9460 __libc_start_main +
    245

    6    tmps5drzfl1                        0x000056326023e5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for ext in extensions {\n        var strength\
    \ = 0.0\n        for char in ext {\n            if char.isUppercase {\n      \
    \          strength += 1\n            } else {\n                strength -= 1\n\
    \            }\n        }\n        if strength > strongest_strength {\n      \
    \      strongest_strength = strength\n            strongest_extension = ext\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmprxz08k_9/tmprxz08k_9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac6177fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac61476b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac61476988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac614757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxz08k_9                        0x0000557082b847cd <unavailable> + 6093

    5    libc.so.6                          0x00002aac6196b460 __libc_start_main +
    245

    6    tmprxz08k_9                        0x0000557082b84359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if strength >\
    \ strongest_extension_strength {\n            strongest_extension_strength = strength\n\
    \            strongest_extension = extension_name\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpkx9qayvn/tmpkx9qayvn.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcd6af3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcd67eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcd67ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcd67e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkx9qayvn                        0x0000557b5f0e8f1c <unavailable> + 7964

    5    libc.so.6                          0x00002abcd6cdf460 __libc_start_main +
    245

    6    tmpkx9qayvn                        0x0000557b5f0e8629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let cap = extension_name.filter { $0.isUppercase }.count\n      \
    \  let sm = extension_name.filter { $0.isLowercase }.count\n        let strength\
    \ = Double(cap) - Double(sm)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpomqurf55/tmpomqurf55.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61c4ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61c1c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61c1c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61c1c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomqurf55                        0x0000555d7b6b2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab61c6b8460 __libc_start_main +
    245

    6    tmpomqurf55                        0x0000555d7b6b2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0\n        for character in extension_name\
    \ {\n            if character.isUppercase {\n                extension_strength\
    \ += 1\n            } else {\n                extension_strength -= 1\n      \
    \      }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp78qq_1cy/tmp78qq_1cy.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ec8350c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ec8047b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ec8047988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ec80467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78qq_1cy                        0x000055d38f15c81d <unavailable> + 6173

    5    libc.so.6                          0x00002b7ec853c460 __libc_start_main +
    245

    6    tmp78qq_1cy                        0x000055d38f15c3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let extension_strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdfaieqyc/tmpdfaieqyc.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81a2e0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81a2b05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81a2b05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81a2b047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfaieqyc                        0x000055efd22cff1c <unavailable> + 7964

    5    libc.so.6                          0x00002b81a2ffa460 __libc_start_main +
    245

    6    tmpdfaieqyc                        0x000055efd22cf629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let extension_strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdfaieqyc/tmpdfaieqyc.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81a2e0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81a2b05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81a2b05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81a2b047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfaieqyc                        0x000055efd22cff1c <unavailable> + 7964

    5    libc.so.6                          0x00002b81a2ffa460 __libc_start_main +
    245

    6    tmpdfaieqyc                        0x000055efd22cf629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_strength = 0\n    for ext in extensions {\n        let strength\
    \ = ext.filter { $0.isUppercase }.count - ext.filter { $0.isLowercase }.count\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = ext\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp3c331b2c/tmp3c331b2c.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1874885c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b187457cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b187457c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b187457b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3c331b2c                        0x000055c9571f6fac <unavailable> + 8108

    5    libc.so.6                          0x00002b1874a71460 __libc_start_main +
    245

    6    tmp3c331b2c                        0x000055c9571f66b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest = \"\"\n    var\
    \ strength = 0\n    for ext in extensions {\n        var cap = 0\n        var\
    \ sm = 0\n        for char in ext {\n            if char.isUppercase {\n     \
    \           cap += 1\n            } else {\n                sm += 1\n        \
    \    }\n        }\n        if cap - sm > strength {\n            strength = cap\
    \ - sm\n            strongest = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdzq4hqx_/tmpdzq4hqx_.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed89e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed86d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed86d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed86d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzq4hqx_                        0x0000561dd5f53a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b4ed8bcd460 __libc_start_main +
    245

    6    tmpdzq4hqx_                        0x0000561dd5f535c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for char in extension_name {\n           \
    \ if char.isUppercase {\n                strength += 1\n            } else {\n\
    \                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpehd61u67/tmpehd61u67.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5832299c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5831f90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5831f90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5831f8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehd61u67                        0x000055ef89f097cd <unavailable> + 6093

    5    libc.so.6                          0x00002b5832485460 __libc_start_main +
    245

    6    tmpehd61u67                        0x000055ef89f09359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let extension_strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdfaieqyc/tmpdfaieqyc.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81a2e0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81a2b05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81a2b05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81a2b047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfaieqyc                        0x000055efd22cff1c <unavailable> + 7964

    5    libc.so.6                          0x00002b81a2ffa460 __libc_start_main +
    245

    6    tmpdfaieqyc                        0x000055efd22cf629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let extension_strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdfaieqyc/tmpdfaieqyc.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81a2e0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81a2b05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81a2b05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81a2b047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfaieqyc                        0x000055efd22cff1c <unavailable> + 7964

    5    libc.so.6                          0x00002b81a2ffa460 __libc_start_main +
    245

    6    tmpdfaieqyc                        0x000055efd22cf629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for character in extension_name {\n            if character.isUppercase {\n\
    \                upper_case_count += 1\n            } else if character.isLowercase\
    \ {\n                lower_case_count += 1\n            }\n        }\n       \
    \ let extension_strength = upper_case_count - lower_case_count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpcdeh9y9k/tmpcdeh9y9k.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8863211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8862f08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8862f08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8862f077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdeh9y9k                        0x0000556479d9ff6c <unavailable> + 8044

    5    libc.so.6                          0x00002b88633fd460 __libc_start_main +
    245

    6    tmpcdeh9y9k                        0x0000556479d9f679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for ext in extensions {\n  \
    \      let cap = ext.filter { $0.isUppercase }.count\n        let sm = ext.filter\
    \ { $0.isLowercase }.count\n        let strength = Double(cap) - Double(sm)\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = ext\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpn1maedmf/tmpn1maedmf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e6cc30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e6c927b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e6c927988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e6c9267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn1maedmf                        0x000055d157fe9f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b4e6ce1c460 __libc_start_main +
    245

    6    tmpn1maedmf                        0x000055d157fe9659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest = \"\"\n    var\
    \ strength = 0\n    for ext in extensions {\n        var cap = 0\n        var\
    \ sm = 0\n        for char in ext {\n            if char.isUppercase {\n     \
    \           cap += 1\n            } else {\n                sm += 1\n        \
    \    }\n        }\n        if cap - sm > strength {\n            strength = cap\
    \ - sm\n            strongest = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdzq4hqx_/tmpdzq4hqx_.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed89e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed86d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed86d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed86d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzq4hqx_                        0x0000561dd5f53a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b4ed8bcd460 __libc_start_main +
    245

    6    tmpdzq4hqx_                        0x0000561dd5f535c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let strength = Double(extension_name.uppercased().count) - Double(extension_name.lowercased().count)\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension_name\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpsmnykbai/tmpsmnykbai.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d60874c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d6056bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d6056b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d6056a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsmnykbai                        0x000055d0621dfa2d <unavailable> + 6701

    5    libc.so.6                          0x00002b8d60a60460 __libc_start_main +
    245

    6    tmpsmnykbai                        0x000055d0621df5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter{$0.isUppercase}.count)\
    \ - Double(extension_name.filter{$0.isLowercase}.count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmprh00x_77/tmprh00x_77.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab923af1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9237e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9237e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9237e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprh00x_77                        0x0000561180417cdc <unavailable> + 7388

    5    libc.so.6                          0x00002ab923cdd460 __libc_start_main +
    245

    6    tmprh00x_77                        0x00005611804173e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for character in extension_name {\n            if character.isUppercase {\n\
    \                upper_case_count += 1\n            } else if character.isLowercase\
    \ {\n                lower_case_count += 1\n            }\n        }\n       \
    \ let extension_strength = Double(upper_case_count) - Double(lower_case_count)\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension_name\n            strongest_extension_strength = extension_strength\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpfygwugj9/tmpfygwugj9.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d61d87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d61a7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d61a7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d61a7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfygwugj9                        0x0000564199ee1f6c <unavailable> + 8044

    5    libc.so.6                          0x00002b4d61f73460 __libc_start_main +
    245

    6    tmpfygwugj9                        0x0000564199ee1679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_ in extensions\
    \ {\n        let extension_strength = Double(extension_.filter { $0.isUppercase\
    \ }.count) - Double(extension_.filter { $0.isLowercase }.count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_\n        }\n\
    \    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpr3xdpb2l/tmpr3xdpb2l.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08b8c97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08b898eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08b898e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08b898d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3xdpb2l                        0x000055ced5f49f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b08b8e83460 __libc_start_main +
    245

    6    tmpr3xdpb2l                        0x000055ced5f49659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension_name\n            strongest_extension_strength = extension_strength\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppiyc5fiw/tmppiyc5fiw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b793a268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7939f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7939f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7939f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiyc5fiw                        0x00005611bb9b2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b793a454460 __libc_start_main +
    245

    6    tmppiyc5fiw                        0x00005611bb9b2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for character in extension_name {\n            if character.isUppercase {\n\
    \                upper_case_count += 1\n            } else if character.isLowercase\
    \ {\n                lower_case_count += 1\n            }\n        }\n       \
    \ let strength = Double(upper_case_count) - Double(lower_case_count)\n       \
    \ if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension_name\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp4fayqwy5/tmp4fayqwy5.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0fbef3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0fbbeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0fbbea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0fbbe97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fayqwy5                        0x000055d0670f4f1c <unavailable> + 7964

    5    libc.so.6                          0x00002ae0fc0df460 __libc_start_main +
    245

    6    tmp4fayqwy5                        0x000055d0670f4629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter({ $0.isUppercase }).count\
    \ - extension_name.filter({ $0.isLowercase }).count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp3dppne72/tmp3dppne72.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cfa2e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cf9fd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cf9fd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cf9fd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dppne72                        0x000055e139f47fac <unavailable> + 8108

    5    libc.so.6                          0x00002b1cfa4cd460 __libc_start_main +
    245

    6    tmp3dppne72                        0x000055e139f476b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter{$0.isUppercase}.count)\
    \ - Double(extension_name.filter{$0.isLowercase}.count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj2q8u51x/tmpj2q8u51x.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4205ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4202c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4202c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4202c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2q8u51x                        0x0000565346e5cf4c <unavailable> + 8012

    5    libc.so.6                          0x00002ba4207b8460 __libc_start_main +
    245

    6    tmpj2q8u51x                        0x0000565346e5c659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for char in extension_name {\n           \
    \ if char.isUppercase {\n                strength += 1\n            } else {\n\
    \                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj0f8am5w/tmpj0f8am5w.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cbfd9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cbfa93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cbfa93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cbfa927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0f8am5w                        0x000055930f3f1a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b0cbff88460 __libc_start_main +
    245

    6    tmpj0f8am5w                        0x000055930f3f15c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest = \"\"\n    var\
    \ strength = 0\n    for ext in extensions {\n        var cap = 0\n        var\
    \ sm = 0\n        for char in ext {\n            if char.isUppercase {\n     \
    \           cap += 1\n            } else {\n                sm += 1\n        \
    \    }\n        }\n        if cap - sm > strength {\n            strength = cap\
    \ - sm\n            strongest = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpdzq4hqx_/tmpdzq4hqx_.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed89e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed86d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed86d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed86d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzq4hqx_                        0x0000561dd5f53a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b4ed8bcd460 __libc_start_main +
    245

    6    tmpdzq4hqx_                        0x0000561dd5f535c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for char in extension_name {\n           \
    \ if char.isUppercase {\n                strength += 1\n            } else {\n\
    \                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj0f8am5w/tmpj0f8am5w.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cbfd9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cbfa93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cbfa93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cbfa927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0f8am5w                        0x000055930f3f1a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b0cbff88460 __libc_start_main +
    245

    6    tmpj0f8am5w                        0x000055930f3f15c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if strength >\
    \ strongest_extension_strength {\n            strongest_extension_strength = strength\n\
    \            strongest_extension = extension_name\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpkx9qayvn/tmpkx9qayvn.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcd6af3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcd67eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcd67ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcd67e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkx9qayvn                        0x0000557b5f0e8f1c <unavailable> + 7964

    5    libc.so.6                          0x00002abcd6cdf460 __libc_start_main +
    245

    6    tmpkx9qayvn                        0x0000557b5f0e8629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter{$0.isUppercase}.count\
    \ - extension_name.filter{$0.isLowercase}.count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpvnjoyk97/tmpvnjoyk97.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafa4de5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafa4adcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafa4adc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafa4adb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvnjoyk97                        0x00005624edebcfac <unavailable> + 8108

    5    libc.so.6                          0x00002aafa4fd1460 __libc_start_main +
    245

    6    tmpvnjoyk97                        0x00005624edebc6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let upper_case_letters = extension_name.filter { $0.isUppercase }\n\
    \        let lower_case_letters = extension_name.filter { $0.isLowercase }\n \
    \       let strength = Double(upper_case_letters.count) - Double(lower_case_letters.count)\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension_name\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp3ncerei6/tmp3ncerei6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ed8c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ed8972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ed8972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ed89717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ncerei6                        0x0000562db23e0f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b2ed8e67460 __libc_start_main +
    245

    6    tmp3ncerei6                        0x0000562db23e0659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let upper_case_count = extension_name.filter { $0.isUppercase }.count\n\
    \        let lower_case_count = extension_name.filter { $0.isLowercase }.count\n\
    \        let strength = Double(upper_case_count) - Double(lower_case_count)\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension_name\n            strongest_extension_strength = strength\n    \
    \    }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp1d84bfmg/tmp1d84bfmg.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4abc6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4ab966b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4ab966988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4ab9657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1d84bfmg                        0x00005588d5c2cf4c <unavailable> + 8012

    5    libc.so.6                          0x00002af4abe5b460 __libc_start_main +
    245

    6    tmp1d84bfmg                        0x00005588d5c2c659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter{$0.isUppercase}.count) - Double(extension_name.filter{$0.isLowercase}.count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpt00gg2i9/tmpt00gg2i9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eb5959c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eb5650b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eb5650988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eb564f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt00gg2i9                        0x0000563738432f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b3eb5b45460 __libc_start_main +
    245

    6    tmpt00gg2i9                        0x0000563738432659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv0q5fmdq/tmpv0q5fmdq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09bbddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09b8d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09b8d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09b8d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0q5fmdq                        0x000055bcf393ff4c <unavailable> + 8012

    5    libc.so.6                          0x00002ab09bdc9460 __libc_start_main +
    245

    6    tmpv0q5fmdq                        0x000055bcf393f659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest = 0\n    var strongest_extension\
    \ = \"\"\n    for ext in extensions {\n        var cap = 0\n        var sm = 0\n\
    \        for char in ext {\n            if char.isUppercase {\n              \
    \  cap += 1\n            } else {\n                sm += 1\n            }\n  \
    \      }\n        let strength = cap - sm\n        if strength > strongest {\n\
    \            strongest = strength\n            strongest_extension = ext\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp0rjgr3k3/tmp0rjgr3k3.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9063a32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9063729b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9063729988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90637287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0rjgr3k3                        0x0000564df319ba3d <unavailable> + 6717

    5    libc.so.6                          0x00002b9063c1e460 __libc_start_main +
    245

    6    tmp0rjgr3k3                        0x0000564df319b5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest = extensions[0]\n\
    \    var strongest_strength = 0\n    for ext in extensions {\n        var strength\
    \ = 0\n        for char in ext {\n            if char.isUppercase {\n        \
    \        strength += 1\n            } else {\n                strength -= 1\n\
    \            }\n        }\n        if strength > strongest_strength {\n      \
    \      strongest = ext\n            strongest_strength = strength\n        }\n\
    \    }\n    return \"\\(class_name).\\(strongest)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmplu31e3c2/tmplu31e3c2.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b2ba7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b2b772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b2b772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b2b7717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplu31e3c2                        0x000055ef054e9a8d <unavailable> + 6797

    5    libc.so.6                          0x00002b6b2bc67460 __libc_start_main +
    245

    6    tmplu31e3c2                        0x000055ef054e9619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter{$0.isUppercase}.count)\
    \ - Double(extension_name.filter{$0.isLowercase}.count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj2q8u51x/tmpj2q8u51x.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4205ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4202c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4202c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4202c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2q8u51x                        0x0000565346e5cf4c <unavailable> + 8012

    5    libc.so.6                          0x00002ba4207b8460 __libc_start_main +
    245

    6    tmpj2q8u51x                        0x0000565346e5c659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter({$0.isUppercase}).count\
    \ - extension_name.filter({$0.isLowercase}).count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmprvdqhnwf/tmprvdqhnwf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa57a03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa576fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa576fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa576f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvdqhnwf                        0x0000555a6113cfac <unavailable> + 8108

    5    libc.so.6                          0x00002afa57bef460 __libc_start_main +
    245

    6    tmprvdqhnwf                        0x0000555a6113c6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var upper_case_count = 0\n        var lower_case_count = 0\n        for\
    \ character in extension_name {\n            if character.isUppercase {\n    \
    \            upper_case_count += 1\n            } else if character.isLowercase\
    \ {\n                lower_case_count += 1\n            }\n        }\n       \
    \ let strength = Double(upper_case_count) - Double(lower_case_count)\n       \
    \ if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension_name\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpext949sj/tmpext949sj.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0f8ec9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0f8bc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0f8bc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0f8bbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpext949sj                        0x0000562380d51f1c <unavailable> + 7964

    5    libc.so.6                          0x00002af0f90b5460 __libc_start_main +
    245

    6    tmpext949sj                        0x0000562380d51629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let upper_case_count = extension_name.filter { $0.isUppercase }.count\n\
    \        let lower_case_count = extension_name.filter { $0.isLowercase }.count\n\
    \        let strength = Double(upper_case_count) - Double(lower_case_count)\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension_name\n            strongest_extension_strength = strength\n    \
    \    }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp1d84bfmg/tmp1d84bfmg.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4abc6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4ab966b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4ab966988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4ab9657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1d84bfmg                        0x00005588d5c2cf4c <unavailable> + 8012

    5    libc.so.6                          0x00002af4abe5b460 __libc_start_main +
    245

    6    tmp1d84bfmg                        0x00005588d5c2c659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.uppercased().count) - Double(extension_name.lowercased().count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp5tw1dsfi/tmp5tw1dsfi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0195c6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0195966b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0195966988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01959657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5tw1dsfi                        0x000055f1b219aa2d <unavailable> + 6701

    5    libc.so.6                          0x00002b0195e5b460 __libc_start_main +
    245

    6    tmp5tw1dsfi                        0x000055f1b219a5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for char in extension_name {\n           \
    \ if char.isUppercase {\n                strength += 1\n            } else {\n\
    \                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpehd61u67/tmpehd61u67.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5832299c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5831f90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5831f90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5831f8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehd61u67                        0x000055ef89f097cd <unavailable> + 6093

    5    libc.so.6                          0x00002b5832485460 __libc_start_main +
    245

    6    tmpehd61u67                        0x000055ef89f09359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for char in extension_name {\n            if char.isUppercase {\n       \
    \         upper_case_count += 1\n            } else if char.isLowercase {\n  \
    \              lower_case_count += 1\n            }\n        }\n        let extension_strength\
    \ = upper_case_count - lower_case_count\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension_name\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp0p_goaif/tmp0p_goaif.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1b3344c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1b303bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1b303b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1b303a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0p_goaif                        0x000055c7544dbf6c <unavailable> + 8044

    5    libc.so.6                          0x00002ab1b3530460 __libc_start_main +
    245

    6    tmp0p_goaif                        0x000055c7544db679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter { $0.isUppercase }.count\
    \ - extension_name.filter { $0.isLowercase }.count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj378rpcd/tmpj378rpcd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ff5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ff2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95ff2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95ff2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj378rpcd                        0x00005604f77a0fac <unavailable> + 8108

    5    libc.so.6                          0x00002b95ff7b1460 __libc_start_main +
    245

    6    tmpj378rpcd                        0x00005604f77a06b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0\n        for char in extension_name {\n\
    \            if char.isUppercase {\n                extension_strength += 1\n\
    \            } else {\n                extension_strength -= 1\n            }\n\
    \        }\n        if extension_strength > strongest_extension_strength {\n \
    \           strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return class_name + \".\" + strongest_extension\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpws1bpy4g/tmpws1bpy4g.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0932a3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0932735b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0932735988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09327347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpws1bpy4g                        0x00005588a973881d <unavailable> + 6173

    5    libc.so.6                          0x00002b0932c2a460 __libc_start_main +
    245

    6    tmpws1bpy4g                        0x00005588a97383a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest = 0.0\n    var\
    \ strongest_extension = \"\"\n    for extension_name in extensions {\n       \
    \ var cap = 0\n        var sm = 0\n        for char in extension_name {\n    \
    \        if char.isUppercase {\n                cap += 1\n            } else {\n\
    \                sm += 1\n            }\n        }\n        let strength = Double(cap)\
    \ - Double(sm)\n        if strength > strongest {\n            strongest = strength\n\
    \            strongest_extension = extension_name\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpmy1_b_ei/tmpmy1_b_ei.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3ef9bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3ef6b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3ef6b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3ef6b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmy1_b_ei                        0x000055618f267a3d <unavailable> + 6717

    5    libc.so.6                          0x00002ad3efbab460 __libc_start_main +
    245

    6    tmpmy1_b_ei                        0x000055618f2675c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter{$0.isUppercase}.count) - Double(extension_name.filter{$0.isLowercase}.count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpzudb96wo/tmpzudb96wo.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94f5f12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94f5c09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94f5c09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94f5c087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzudb96wo                        0x000055cb66710cdc <unavailable> + 7388

    5    libc.so.6                          0x00002b94f60fe460 __libc_start_main +
    245

    6    tmpzudb96wo                        0x000055cb667103e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0.0\n        for char in extension_name\
    \ {\n            if char.isUppercase {\n                extension_strength +=\
    \ 1\n            } else {\n                extension_strength -= 1\n         \
    \   }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpi5zmdd6z/tmpi5zmdd6z.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf6360cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf63303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf63303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf633027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi5zmdd6z                        0x000055c94756e7cd <unavailable> + 6093

    5    libc.so.6                          0x00002abf637f8460 __libc_start_main +
    245

    6    tmpi5zmdd6z                        0x000055c94756e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpbfrb055e/tmpbfrb055e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92db601c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92db2f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92db2f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92db2f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfrb055e                        0x000055a0be59bcdc <unavailable> + 7388

    5    libc.so.6                          0x00002b92db7ed460 __libc_start_main +
    245

    6    tmpbfrb055e                        0x000055a0be59b3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let extension_strength = Double(extension_name.uppercased().count) - Double(extension_name.lowercased().count)\n\
    \        if extension_strength > strongest_strength {\n            strongest_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpzgxncxef/tmpzgxncxef.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b4e050c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b4dd47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b4dd47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b4dd467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzgxncxef                        0x000055ca720d2a2d <unavailable> + 6701

    5    libc.so.6                          0x00002b5b4e23c460 __libc_start_main +
    245

    6    tmpzgxncxef                        0x000055ca720d25b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for ext in extensions {\n        let strength\
    \ = Double(ext.filter { $0.isUppercase }.count) - Double(ext.filter { $0.isLowercase\
    \ }.count)\n        if strength > strongest_strength {\n            strongest_strength\
    \ = strength\n            strongest_extension = ext\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv3gxqrg8/tmpv3gxqrg8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fbff88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fbfc7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fbfc7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fbfc7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3gxqrg8                        0x00005626fdad8f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b0fc0174460 __libc_start_main +
    245

    6    tmpv3gxqrg8                        0x00005626fdad8659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0.0\n        for char in extension_name\
    \ {\n            if char.isUppercase {\n                extension_strength +=\
    \ 1\n            } else {\n                extension_strength -= 1\n         \
    \   }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv4c88s_i/tmpv4c88s_i.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6a8334c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6a802bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6a802b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6a802a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4c88s_i                        0x000055b2e8c2ca3d <unavailable> + 6717

    5    libc.so.6                          0x00002ae6a8520460 __libc_start_main +
    245

    6    tmpv4c88s_i                        0x000055b2e8c2c5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var strength = 0.0\n        for char in extension_name {\n           \
    \ if char.isUppercase {\n                strength += 1\n            } else {\n\
    \                strength -= 1\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj0f8am5w/tmpj0f8am5w.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cbfd9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cbfa93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cbfa93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cbfa927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0f8am5w                        0x000055930f3f1a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b0cbff88460 __libc_start_main +
    245

    6    tmpj0f8am5w                        0x000055930f3f15c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var uppercase_count = 0\n        var lowercase_count = 0\n      \
    \  for char in extension_name {\n            if char.isUppercase {\n         \
    \       uppercase_count += 1\n            } else if char.isLowercase {\n     \
    \           lowercase_count += 1\n            }\n        }\n        let strength\
    \ = Double(uppercase_count) - Double(lowercase_count)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpz_pn320d/tmpz_pn320d.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eaa1adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ea9ea4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ea9ea4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ea9ea37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_pn320d                        0x000055b483d3ef1c <unavailable> + 7964

    5    libc.so.6                          0x00002b5eaa399460 __libc_start_main +
    245

    6    tmpz_pn320d                        0x000055b483d3e629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for ext in extensions {\n        var upper_count\
    \ = 0\n        var lower_count = 0\n        for char in ext {\n            if\
    \ char.isUppercase {\n                upper_count += 1\n            } else {\n\
    \                lower_count += 1\n            }\n        }\n        let strength\
    \ = Double(upper_count) - Double(lower_count)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = ext\n        }\n    }\n    return class_name + \".\" + strongest_extension\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpoad4958h/tmpoad4958h.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6943a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6943783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6943783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69437827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoad4958h                        0x0000563663e797cd <unavailable> + 6093

    5    libc.so.6                          0x00002b6943c78460 __libc_start_main +
    245

    6    tmpoad4958h                        0x0000563663e79359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        var uppercase_count = 0\n        var lowercase_count = 0\n      \
    \  for char in extension_name {\n            if char.isUppercase {\n         \
    \       uppercase_count += 1\n            } else if char.isLowercase {\n     \
    \           lowercase_count += 1\n            }\n        }\n        let strength\
    \ = uppercase_count - lowercase_count\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp9xdg3x54/tmp9xdg3x54.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d29c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d29949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d29949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d299487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9xdg3x54                        0x000055dfb50d1f6c <unavailable> + 8044

    5    libc.so.6                          0x00002b3d29e3e460 __libc_start_main +
    245

    6    tmp9xdg3x54                        0x000055dfb50d1679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    let class_name = class_name\n\
    \    var strongest_extension = \"\"\n    var strongest_extension_strength = 0\n\
    \    for extension_name in extensions {\n        var extension_strength = 0\n\
    \        for char in extension_name {\n            if char.isUppercase {\n   \
    \             extension_strength += 1\n            } else {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpn3gx1aa7/tmpn3gx1aa7.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade45e98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade45b8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade45b8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade45b8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3gx1aa7                        0x0000560e4d5a1a3d <unavailable> + 6717

    5    libc.so.6                          0x00002ade46084460 __libc_start_main +
    245

    6    tmpn3gx1aa7                        0x0000560e4d5a15c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.uppercased().count) - Double(extension_name.lowercased().count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp5tw1dsfi/tmp5tw1dsfi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0195c6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0195966b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0195966988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01959657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5tw1dsfi                        0x000055f1b219aa2d <unavailable> + 6701

    5    libc.so.6                          0x00002b0195e5b460 __libc_start_main +
    245

    6    tmp5tw1dsfi                        0x000055f1b219a5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension: String\
    \ = \"\"\n    var strongest_extension_strength: Double = 0.0\n    for extension_name\
    \ in extensions {\n        var extension_strength: Double = 0.0\n        for char\
    \ in extension_name {\n            if char.isUppercase {\n                extension_strength\
    \ += 1\n            } else {\n                extension_strength -= 1\n      \
    \      }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpxn_iix20/tmpxn_iix20.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad571b01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5717f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5717f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5717f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxn_iix20                        0x0000557fac4977cd <unavailable> + 6093

    5    libc.so.6                          0x00002ad571ced460 __libc_start_main +
    245

    6    tmpxn_iix20                        0x0000557fac497359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter{$0.isUppercase}.count) - Double(extension_name.filter{$0.isLowercase}.count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpt00gg2i9/tmpt00gg2i9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eb5959c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eb5650b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eb5650988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eb564f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt00gg2i9                        0x0000563738432f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b3eb5b45460 __libc_start_main +
    245

    6    tmpt00gg2i9                        0x0000563738432659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let uppercase_letters = extension_name.filter { $0.isUppercase }\n\
    \        let lowercase_letters = extension_name.filter { $0.isLowercase }\n  \
    \      let strength = Double(uppercase_letters.count) - Double(lowercase_letters.count)\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension_name\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpjq0wqj8d/tmpjq0wqj8d.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7090fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd70606b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd70606988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd706057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjq0wqj8d                        0x0000558d440fff4c <unavailable> + 8012

    5    libc.so.6                          0x00002abd70afb460 __libc_start_main +
    245

    6    tmpjq0wqj8d                        0x0000558d440ff659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for ext in extensions {\n        var strength\
    \ = 0.0\n        for char in ext {\n            if char.isUppercase {\n      \
    \          strength += 1\n            } else {\n                strength -= 1\n\
    \            }\n        }\n        if strength > strongest_strength {\n      \
    \      strongest_strength = strength\n            strongest_extension = ext\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmprxz08k_9/tmprxz08k_9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac6177fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac61476b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac61476988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac614757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxz08k_9                        0x0000557082b847cd <unavailable> + 6093

    5    libc.so.6                          0x00002aac6196b460 __libc_start_main +
    245

    6    tmprxz08k_9                        0x0000557082b84359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpbfrb055e/tmpbfrb055e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92db601c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92db2f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92db2f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92db2f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfrb055e                        0x000055a0be59bcdc <unavailable> + 7388

    5    libc.so.6                          0x00002b92db7ed460 __libc_start_main +
    245

    6    tmpbfrb055e                        0x000055a0be59b3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var upper_case_count = 0\n        var lower_case_count = 0\n    \
    \    for character in extension_name {\n            if character.isUppercase {\n\
    \                upper_case_count += 1\n            } else if character.isLowercase\
    \ {\n                lower_case_count += 1\n            }\n        }\n       \
    \ let extension_strength = Double(upper_case_count) - Double(lower_case_count)\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp1viqoghf/tmp1viqoghf.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c74fb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c74cadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c74cad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c74cac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1viqoghf                        0x000055ec6786af1c <unavailable> + 7964

    5    libc.so.6                          0x00002b3c751a2460 __libc_start_main +
    245

    6    tmp1viqoghf                        0x000055ec6786a629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let strength = Double(extension_name.filter { $0.isUppercase }.count)\
    \ - Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp0rkn6exw/tmp0rkn6exw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8571fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad856ef1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad856ef1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad856ef07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0rkn6exw                        0x000055d83bf8bf4c <unavailable> + 8012

    5    libc.so.6                          0x00002ad8573e6460 __libc_start_main +
    245

    6    tmp0rkn6exw                        0x000055d83bf8b659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter{$0.isUppercase}.count)\
    \ - Double(extension_name.filter{$0.isLowercase}.count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmprh00x_77/tmprh00x_77.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab923af1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9237e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9237e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9237e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprh00x_77                        0x0000561180417cdc <unavailable> + 7388

    5    libc.so.6                          0x00002ab923cdd460 __libc_start_main +
    245

    6    tmprh00x_77                        0x00005611804173e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    let class_name = class_name\n\
    \    var strongest_extension = \"\"\n    var strongest_extension_strength = 0\n\
    \    for extension_name in extensions {\n        var extension_strength = 0\n\
    \        for char in extension_name {\n            if char.isUppercase {\n   \
    \             extension_strength += 1\n            } else {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpn3gx1aa7/tmpn3gx1aa7.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade45e98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade45b8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade45b8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade45b8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3gx1aa7                        0x0000560e4d5a1a3d <unavailable> + 6717

    5    libc.so.6                          0x00002ade46084460 __libc_start_main +
    245

    6    tmpn3gx1aa7                        0x0000560e4d5a15c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return class_name + \".\" + strongest_extension\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpbfrb055e/tmpbfrb055e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92db601c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92db2f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92db2f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92db2f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfrb055e                        0x000055a0be59bcdc <unavailable> + 7388

    5    libc.so.6                          0x00002b92db7ed460 __libc_start_main +
    245

    6    tmpbfrb055e                        0x000055a0be59b3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0.0\n        for character in extension_name\
    \ {\n            if character.isUppercase {\n                extension_strength\
    \ += 1\n            } else {\n                extension_strength -= 1\n      \
    \      }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp25f11o02/tmp25f11o02.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6f6182c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6f5e79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6f5e79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6f5e787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp25f11o02                        0x000055b449feea3d <unavailable> + 6717

    5    libc.so.6                          0x00002af6f636e460 __libc_start_main +
    245

    6    tmp25f11o02                        0x000055b449fee5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var extension_strength = 0.0\n        for character in extension_name\
    \ {\n            if character.isUppercase {\n                extension_strength\
    \ += 1\n            } else {\n                extension_strength -= 1\n      \
    \      }\n        }\n        if extension_strength > strongest_strength {\n  \
    \          strongest_strength = extension_strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpnnmtbdc4/tmpnnmtbdc4.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef19abbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef197b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef197b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef197b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnmtbdc4                        0x000055b5c6800a3d <unavailable> + 6717

    5    libc.so.6                          0x00002aef19ca7460 __libc_start_main +
    245

    6    tmpnnmtbdc4                        0x000055b5c68005c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       var upper_case_count = 0\n        var lower_case_count = 0\n        for\
    \ char in extension_name {\n            if char.isUppercase {\n              \
    \  upper_case_count += 1\n            } else if char.isLowercase {\n         \
    \       lower_case_count += 1\n            }\n        }\n        let strength\
    \ = Double(upper_case_count) - Double(lower_case_count)\n        if strength >\
    \ strongest_strength {\n            strongest_strength = strength\n          \
    \  strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpltn9skd5/tmpltn9skd5.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b264d9b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b264d6acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b264d6ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b264d6ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltn9skd5                        0x000055b3a110bf1c <unavailable> + 7964

    5    libc.so.6                          0x00002b264dba1460 __libc_start_main +
    245

    6    tmpltn9skd5                        0x000055b3a110b629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var uppercase_count = 0\n        var lowercase_count = 0\n      \
    \  for char in extension_name {\n            if char.isUppercase {\n         \
    \       uppercase_count += 1\n            } else if char.isLowercase {\n     \
    \           lowercase_count += 1\n            }\n        }\n        let strength\
    \ = Double(uppercase_count) - Double(lowercase_count)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpz_pn320d/tmpz_pn320d.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eaa1adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ea9ea4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ea9ea4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ea9ea37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_pn320d                        0x000055b483d3ef1c <unavailable> + 7964

    5    libc.so.6                          0x00002b5eaa399460 __libc_start_main +
    245

    6    tmpz_pn320d                        0x000055b483d3e629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let capital_letters = extension_name.filter { $0.isUppercase }\n\
    \        let small_letters = extension_name.filter { $0.isLowercase }\n      \
    \  let extension_strength = Double(capital_letters.count) - Double(small_letters.count)\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension_name\n            strongest_extension_strength = extension_strength\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpmyy45lkl/tmpmyy45lkl.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b76bb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b768abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b768ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b768aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmyy45lkl                        0x0000558d19a4bf4c <unavailable> + 8012

    5    libc.so.6                          0x00002b5b76da0460 __libc_start_main +
    245

    6    tmpmyy45lkl                        0x0000558d19a4b659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_strength = 0.0\n    for extension_name in extensions {\n  \
    \      let strength = Double(extension_name.filter { $0.isUppercase }.count) -\
    \ Double(extension_name.filter { $0.isLowercase }.count)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpt6br09tg/tmpt6br09tg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7485d6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7485a63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7485a63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7485a627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6br09tg                        0x000055d8cc8e7fac <unavailable> + 8108

    5    libc.so.6                          0x00002b7485f58460 __libc_start_main +
    245

    6    tmpt6br09tg                        0x000055d8cc8e76b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var extension_strength = 0.0\n        for char in extension_name\
    \ {\n            if char.isUppercase {\n                extension_strength +=\
    \ 1\n            } else {\n                extension_strength -= 1\n         \
    \   }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(Strongest_Extension(class_name:\
    \ \"Watashi\", extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\nassert(Strongest_Extension(class_name: \"Boku123\", extensions: [\"nani\",\
    \ \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name:\
    \ \"__YESIMHERE\", extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
    , \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name:\
    \ \"K\", extensions: [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\
    assert(Strongest_Extension(class_name: \"__HAHA\", extensions: [\"Tab\", \"123\"\
    , \"781345\", \"-_-\"]) == \"__HAHA.123\")\nassert(Strongest_Extension(class_name:\
    \ \"YameRore\", extensions: [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]) == \"YameRore.okIWILL123\")\nassert(Strongest_Extension(class_name:\
    \ \"finNNalLLly\", extensions: [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\
    )\nassert(Strongest_Extension(class_name: \"_\", extensions: [\"Bb\", \"91245\"\
    ]) == \"_.Bb\")\nassert(Strongest_Extension(class_name: \"Sp\", extensions: [\"\
    671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpv4c88s_i/tmpv4c88s_i.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6a8334c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6a802bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6a802b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6a802a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4c88s_i                        0x000055b2e8c2ca3d <unavailable> + 6717

    5    libc.so.6                          0x00002ae6a8520460 __libc_start_main +
    245

    6    tmpv4c88s_i                        0x000055b2e8c2c5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter{$0.isUppercase}.count)\
    \ - Double(extension_name.filter{$0.isLowercase}.count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj2q8u51x/tmpj2q8u51x.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4205ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4202c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4202c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4202c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2q8u51x                        0x0000565346e5cf4c <unavailable> + 8012

    5    libc.so.6                          0x00002ba4207b8460 __libc_start_main +
    245

    6    tmpj2q8u51x                        0x0000565346e5c659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.filter { $0.isUppercase\
    \ }.count) - Double(extension_name.filter { $0.isLowercase }.count)\n        if\
    \ extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension_name\n   \
    \     }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmppzfqs4yt/tmppzfqs4yt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb05f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb05c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb05c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb05c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzfqs4yt                        0x000055b7da5e2f4c <unavailable> + 8012

    5    libc.so.6                          0x00002acb06157460 __libc_start_main +
    245

    6    tmppzfqs4yt                        0x000055b7da5e2659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820444
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmps5drzfl1/tmps5drzfl1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafabbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafa8b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafa8b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafa8b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5drzfl1                        0x000056326023ea2d <unavailable> + 6701

    5    libc.so.6                          0x00002acafada9460 __libc_start_main +
    245

    6    tmps5drzfl1                        0x000056326023e5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let strength = extension_name.filter { $0.isUppercase }.count - extension_name.filter\
    \ { $0.isLowercase }.count\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp8mp4usf9/tmp8mp4usf9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab13be0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab13bb04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab13bb04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab13bb037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mp4usf9                        0x0000559d3186bfac <unavailable> + 8108

    5    libc.so.6                          0x00002ab13bff9460 __libc_start_main +
    245

    6    tmp8mp4usf9                        0x0000559d3186b6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let extension_strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension_strength = extension_strength\n\
    \            strongest_extension = extension_name\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(Strongest_Extension(class_name: \"Watashi\", extensions: [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmp3wup214k/tmp3wup214k.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63c118dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63c0e84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63c0e84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63c0e837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3wup214k                        0x00005641b26eb80d <unavailable> + 6157

    5    libc.so.6                          0x00002b63c1379460 __libc_start_main +
    245

    6    tmp3wup214k                        0x00005641b26eb399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659820445
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = extensions[0]\n\
    \    var strongest_extension_strength = 0\n    for extension_name in extensions\
    \ {\n        let extension_strength = extension_name.filter { $0.isUppercase }.count\
    \ - extension_name.filter { $0.isLowercase }.count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpj378rpcd/tmpj378rpcd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95ff5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95ff2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95ff2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95ff2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj378rpcd                        0x00005604f77a0fac <unavailable> + 8108

    5    libc.so.6                          0x00002b95ff7b1460 __libc_start_main +
    245

    6    tmpj378rpcd                        0x00005604f77a06b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659820443
- exit_code: -4
  program: "\n/// You will be given the name of a class (a string) and an array of\
    \ extensions.\n/// The extensions are to be used to load additional classes to\
    \ the class. The\n/// strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n/// letters in the extension's name, and let SM be\
    \ the number of lowercase letters \n/// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n/// You should find the strongest extension\
    \ and return a string in this \n/// format: ClassName.StrongestExtensionName.\n\
    /// If there are two or more extensions with the same strength, you should\n///\
    \ choose the one that comes first in the array.\n/// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n///\
    \ Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions:\
    \ [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name:\
    \ String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\
    \n    var strongest_strength = 0.0\n    for extension_name in extensions {\n \
    \       let strength = Double(extension_name.filter{$0.isUppercase}.count) - Double(extension_name.filter{$0.isLowercase}.count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(Strongest_Extension(class_name: \"Watashi\", extensions:\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
    \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
    , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
    \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
    \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
    )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\nassert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\"\
    , \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
    \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
    \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
  status: Exception
  stderr: 'tmpt00gg2i9/tmpt00gg2i9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eb5959c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eb5650b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eb5650988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eb564f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt00gg2i9                        0x0000563738432f4c <unavailable> + 8012

    5    libc.so.6                          0x00002b3eb5b45460 __libc_start_main +
    245

    6    tmpt00gg2i9                        0x0000563738432659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659820443
