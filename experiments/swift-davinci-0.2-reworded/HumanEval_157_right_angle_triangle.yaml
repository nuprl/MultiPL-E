name: HumanEval_157_right_angle_triangle
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return true if\
  \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
  /// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>>\
  \ right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
  \ Int, b: Int, c: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) ==\
  \ true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
  \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
  assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
  \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
  \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
  \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\n\
  assert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
completions: ["    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", '    return a*a + b*b == c*c
    || a*a + c*c == b*b || b*b + c*c == a*a', "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2])\n    return a * a + b * b == c * c", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n\
    \    let a = sides[0]\n    let b = sides[1]\n    let c = sides[2]\n    return\
    \ a * a + b * b == c * c", '    return (a * a + b * b == c * c) || (a * a + c
    * c == b * b) || (b * b + c * c == a * a)', "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let\
    \ sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", "    let sides = [a,\
    \ b, c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]"]
stop_tokens:
- "\n}"
