name: HumanEval_70_strange_sort_list
language: swift
prompt: "\n/// Given array of integers, return array in strange order.\n/// Strange\
  \ sorting, is when you start with the minimum value,\n/// then maximum of the remaining\
  \ integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
  \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
  /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
  func strange_sort_list(lst: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) ==\
  \ [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
  \ 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
  \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
  \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as\
  \ [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7,\
  \ 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
  \ 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
completions: ["    var lst = lst\n    var result = [Int]()\n    while lst.count >\
    \ 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    var copy = lst\n    var min\
    \ = copy.min()\n    var max = copy.max()\n    var minIndex = copy.index(of: min!)\n\
    \    var maxIndex = copy.index(of: max!)\n    var i = 0\n    while i < copy.count\
    \ {\n        if i % 2 == 0 {\n            result.append(min!)\n            copy.remove(at:\
    \ minIndex!)\n            min = copy.min()\n            minIndex = copy.index(of:\
    \ min!)\n        } else {\n            result.append(max!)\n            copy.remove(at:\
    \ maxIndex!)\n            max = copy.max()\n            maxIndex = copy.index(of:\
    \ max!)\n        }\n        i += 1\n    }\n    return result", "    var lst =\
    \ lst\n    var result: [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var sorted = lst.sorted()\n    var min = sorted.removeFirst()\n    var max\
    \ = sorted.removeLast()\n    while !sorted.isEmpty {\n        result.append(min)\n\
    \        min = sorted.removeFirst()\n        result.append(max)\n        max =\
    \ sorted.removeLast()\n    }\n    result.append(min)\n    result.append(max)\n\
    \    return result", "    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.removeFirst())\n        if let last = lst.popLast()\
    \ {\n            result.append(last)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var lst = lst\n    var i = 0\n    while !lst.isEmpty\
    \ {\n        if i % 2 == 0 {\n            result.append(lst.min()!)\n        \
    \    lst.remove(at: lst.index(of: lst.min()!)!)\n        } else {\n          \
    \  result.append(lst.max()!)\n            lst.remove(at: lst.index(of: lst.max()!)!)\n\
    \        }\n        i += 1\n    }\n    return result", "    var result = [Int]()\n\
    \    var copy = lst\n    var isAscending = true\n    while !copy.isEmpty {\n \
    \       if isAscending {\n            result.append(copy.min()!)\n           \
    \ copy.remove(at: copy.index(of: copy.min()!)!)\n        } else {\n          \
    \  result.append(copy.max()!)\n            copy.remove(at: copy.index(of: copy.max()!)!)\n\
    \        }\n        isAscending = !isAscending\n    }\n    return result", " \
    \   var lst = lst\n    var result: [Int] = []\n    while !lst.isEmpty {\n    \
    \    let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.removeAll(where: { $0 == min || $0 ==\
    \ max })\n    }\n    return result", "    var lst = lst\n    var result = [Int]()\n\
    \    while !lst.isEmpty {\n        let min = lst.min()!\n        let max = lst.max()!\n\
    \        if let minIndex = lst.firstIndex(of: min) {\n            lst.remove(at:\
    \ minIndex)\n            result.append(min)\n        }\n        if let maxIndex\
    \ = lst.firstIndex(of: max) {\n            lst.remove(at: maxIndex)\n        \
    \    result.append(max)\n        }\n    }\n    return result", "    var lst =\
    \ lst\n    var result: [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result", "    var result: [Int]\
    \ = []\n    var lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n\
    \        let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result", "    var lst = lst\n    var result: [Int]\
    \ = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n        lst.remove(at:\
    \ lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty\
    \ {\n        result.append(lst.remove(at: lst.index(of: lst.min()!)!))\n     \
    \   if !lst.isEmpty {\n            result.append(lst.remove(at: lst.index(of:\
    \ lst.max()!)!))\n        }\n    }\n    return result", "    var lst = lst\n \
    \   var result: [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var sorted = lst.sorted()\n    var i = 0\n    while sorted.count > 0 {\n\
    \        result.append(sorted[i])\n        sorted.remove(at: i)\n        if sorted.count\
    \ > 0 {\n            result.append(sorted[sorted.count - 1])\n            sorted.remove(at:\
    \ sorted.count - 1)\n        }\n    }\n    return result", "    var lst = lst\n\
    \    var result = [Int]()\n    while lst.count > 0 {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if lst.count > 0 {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0\
    \ {\n            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result", "    var\
    \ lst = lst\n    var result: [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result", "    var result: [Int]\
    \ = []\n    var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
