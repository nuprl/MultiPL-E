name: HumanEval_93_encode
language: swift
prompt: "\n/// Write a function that takes a message, and encodes in such a \n///\
  \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
  \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
  \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
  \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n/// \"\
  tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\n\
  assert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\"\
  ) == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
  \ wRkTg\")"
completions: ["    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            encodedMessage += String(char).lowercased() == \"u\" ? \"a\"\
    \ : String(char).lowercased().unicodeScalars.map({ $0.value + 2 }).map(UnicodeScalar.init).map(String.init).joined()\n\
    \        } else {\n            encodedMessage += String(char).lowercased() ==\
    \ String(char) ? String(char).uppercased() : String(char).lowercased()\n     \
    \   }\n    }\n    return encodedMessage", "    let vowels: Set<Character> = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            let nextIndex = index + 2\n            let nextChar = alphabet[nextIndex\
    \ % alphabet.count]\n            encoded.append(vowels.contains(char) ? nextChar\
    \ : nextChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)\n            let newIndex = alphabet.index(index!, offsetBy: 2)\n    \
    \        encodedMessage.append(alphabet[newIndex])\n        } else {\n       \
    \     encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n \
    \   for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            let\
    \ index = vowels.firstIndex(of: String(char).lowercased())!\n            let nextIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage += String(vowels[nextIndex]).uppercased()\n\
    \        } else {\n            encodedMessage += String(char).uppercased()\n \
    \       }\n    }\n    return encodedMessage", "    var encoded = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\
    \"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = letters.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = letters.index(index, offsetBy: 2)\n      \
    \          encodedMessage.append(letters[newIndex])\n            } else {\n  \
    \              encodedMessage.append(letters[index])\n            }\n        }\n\
    \    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in message {\n        if vowels.contains(letter)\
    \ {\n            if let index = alphabet.firstIndex(of: letter) {\n          \
    \      if index + 2 < alphabet.count {\n                    encodedMessage.append(alphabet[index\
    \ + 2])\n                } else {\n                    encodedMessage.append(alphabet[index\
    \ - 24])\n                }\n            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage.uppercased()", "    let vowels =\
    \ \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\
    \"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % alphabet.count\n\
    \            let newChar = alphabet[newIndex]\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(newChar.uppercased())\n           \
    \ } else {\n                encodedMessage.append(newChar)\n            }\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage", '    return ""', "    var encodedMessage = \"\"\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            encodedMessage\
    \ += String(char).uppercased()\n        } else {\n            encodedMessage +=\
    \ String(char).lowercased()\n        }\n    }\n    return encodedMessage", " \
    \   let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    var encodedMessage = \"\"\n    let vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            if let index = alphabet.firstIndex(of: character) {\n       \
    \         let nextIndex = index + 2\n                if nextIndex < alphabet.count\
    \ {\n                    encodedMessage.append(alphabet[nextIndex])\n        \
    \        } else {\n                    encodedMessage.append(alphabet[nextIndex\
    \ - alphabet.count])\n                }\n            }\n        } else {\n   \
    \         encodedMessage.append(character)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            if vowels.contains(char.lowercased()) {\n        \
    \        encodedMessage.append(alphabet[newIndex])\n            } else {\n   \
    \             encodedMessage.append(alphabet[newIndex].uppercased())\n       \
    \     }\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage", "    let vowels: [Character] = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    let vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter) {\n            if vowels.contains(letter) {\n                encodedMessage.append(alphabet[index\
    \ + 2])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage"]
stop_tokens:
- "\n}"
