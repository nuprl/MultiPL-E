name: HumanEval_93_encode
language: swift
prompt: "\n/// Write a function that takes a message, and encodes in such a \n///\
  \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
  \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
  \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
  \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n/// \"\
  tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\n\
  assert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\"\
  ) == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
  \ wRkTg\")"
completions: ["    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            encodedMessage += String(char).lowercased() == \"u\" ? \"a\"\
    \ : String(char).lowercased().unicodeScalars.map({ $0.value + 2 }).map(UnicodeScalar.init).map(String.init).joined()\n\
    \        } else {\n            encodedMessage += String(char).lowercased() ==\
    \ String(char) ? String(char).uppercased() : String(char).lowercased()\n     \
    \   }\n    }\n    return encodedMessage", "    let vowels: Set<Character> = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            let nextIndex = index + 2\n            let nextChar = alphabet[nextIndex\
    \ % alphabet.count]\n            encoded.append(vowels.contains(char) ? nextChar\
    \ : nextChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)\n            let newIndex = alphabet.index(index!, offsetBy: 2)\n    \
    \        encodedMessage.append(alphabet[newIndex])\n        } else {\n       \
    \     encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n \
    \   for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            let\
    \ index = vowels.firstIndex(of: String(char).lowercased())!\n            let nextIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage += String(vowels[nextIndex]).uppercased()\n\
    \        } else {\n            encodedMessage += String(char).uppercased()\n \
    \       }\n    }\n    return encodedMessage", "    var encoded = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\
    \"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = letters.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = letters.index(index, offsetBy: 2)\n      \
    \          encodedMessage.append(letters[newIndex])\n            } else {\n  \
    \              encodedMessage.append(letters[index])\n            }\n        }\n\
    \    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in message {\n        if vowels.contains(letter)\
    \ {\n            if let index = alphabet.firstIndex(of: letter) {\n          \
    \      if index + 2 < alphabet.count {\n                    encodedMessage.append(alphabet[index\
    \ + 2])\n                } else {\n                    encodedMessage.append(alphabet[index\
    \ - 24])\n                }\n            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage.uppercased()", "    let vowels =\
    \ \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\
    \"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % alphabet.count\n\
    \            let newChar = alphabet[newIndex]\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(newChar.uppercased())\n           \
    \ } else {\n                encodedMessage.append(newChar)\n            }\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage", '    return ""', "    var encodedMessage = \"\"\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            encodedMessage\
    \ += String(char).uppercased()\n        } else {\n            encodedMessage +=\
    \ String(char).lowercased()\n        }\n    }\n    return encodedMessage", " \
    \   let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    var encodedMessage = \"\"\n    let vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            if let index = alphabet.firstIndex(of: character) {\n       \
    \         let nextIndex = index + 2\n                if nextIndex < alphabet.count\
    \ {\n                    encodedMessage.append(alphabet[nextIndex])\n        \
    \        } else {\n                    encodedMessage.append(alphabet[nextIndex\
    \ - alphabet.count])\n                }\n            }\n        } else {\n   \
    \         encodedMessage.append(character)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            if vowels.contains(char.lowercased()) {\n        \
    \        encodedMessage.append(alphabet[newIndex])\n            } else {\n   \
    \             encodedMessage.append(alphabet[newIndex].uppercased())\n       \
    \     }\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage", "    let vowels: [Character] = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    let vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter) {\n            if vowels.contains(letter) {\n                encodedMessage.append(alphabet[index\
    \ + 2])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var result = \"\"\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                if let\
    \ nextIndex = alphabet.index(index, offsetBy: 2, limitedBy: alphabet.endIndex)\
    \ {\n                    result.append(alphabet[nextIndex])\n                }\
    \ else {\n                    result.append(alphabet[alphabet.startIndex])\n \
    \               }\n            } else {\n                result.append(char)\n\
    \            }\n        } else {\n            result.append(char)\n        }\n\
    \    }\n    return result", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)\n            let nextIndex = alphabet.index(index!, offsetBy: 2)\n   \
    \         encodedMessage.append(alphabet[nextIndex])\n        } else {\n     \
    \       encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    var encoded = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        }\n    }\n    return encoded", "    var encodedMessage = \"\
    \"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\
    \"\n    for char in message {\n        if vowels.contains(char) {\n          \
    \  let index = alphabet.firstIndex(of: char)\n            let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    for letter in message {\n        if let index = alphabet.firstIndex(of: String(letter).lowercased())\
    \ {\n            if vowels.contains(String(letter).lowercased()) {\n         \
    \       encodedMessage += String(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encodedMessage += String(alphabet[index]).uppercased()\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if vowels.contains(char.lowercased()) {\n\
    \            let index = alphabet.index(of: char.lowercased())!\n            let\
    \ nextIndex = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[nextIndex])\n\
    \        } else {\n            encoded.append(char.lowercased())\n        }\n\
    \    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        if vowels.contains(char.lowercased()) {\n                let newIndex\
    \ = letters.index(index, offsetBy: 2)\n                encodedMessage.append(letters[newIndex])\n\
    \            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            if ascii >= 65 && ascii <= 90 {\n    \
    \            encodedMessage.append(Character(UnicodeScalar(ascii + 32)!))\n  \
    \          } else if ascii >= 97 && ascii <= 122 {\n                encodedMessage.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                encodedMessage.append(char.lowercased())\n            } else\
    \ {\n                encodedMessage.append(char.uppercased())\n            }\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        let newIndex = index + 2\n            if newIndex > letters.count - 1\
    \ {\n                encodedMessage.append(letters[letters.index(letters.startIndex,\
    \ offsetBy: newIndex - letters.count)])\n            } else {\n              \
    \  encodedMessage.append(letters[letters.index(letters.startIndex, offsetBy: newIndex)])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += String(char).uppercased() == String(char) ? String(char).lowercased() : String(char).uppercased()\n\
    \        } else {\n            encodedMessage += String(char)\n        }\n   \
    \ }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         if vowels.contains(char.lowercased()) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encodedMessage.append(alphabet[newIndex])\n            } else {\n    \
    \            encodedMessage.append(alphabet[index])\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    for char in message {\n\
    \        if char.isLetter {\n            encodedMessage += char.isUppercase ?\
    \ char.lowercased() : char.uppercased()\n        }\n        if char.isVowel {\n\
    \            encodedMessage += char.nextTwoVowels\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var encodedMessage = \"\"\n    for char in message {\n        if\
    \ vowels.contains(char) {\n            encodedMessage.append(vowels[(vowels.firstIndex(of:\
    \ char)! + 2) % vowels.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let englishAlphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for char in message {\n     \
    \   if vowels.contains(char) {\n            if char == \"u\" {\n             \
    \   encodedMessage.append(\"a\")\n            } else {\n                let index\
    \ = englishAlphabet.firstIndex(of: char)!\n                encodedMessage.append(englishAlphabet[index\
    \ + 2])\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage.uppercased()", "    var encoded =\
    \ \"\"\n    for char in message {\n        let ascii = char.asciiValue!\n    \
    \    if ascii >= 65 && ascii <= 90 {\n            encoded.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n        } else if ascii >= 97 && ascii <= 122 {\n            encoded.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n        } else {\n            encoded.append(char)\n        }\n  \
    \  }\n    return encoded", "    var encoded = \"\"\n    for char in message {\n\
    \        if char.isLetter {\n            encoded.append(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            encoded.append(char)\n \
    \       }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if char.isLetter {\n            encodedMessage +=\
    \ char.isUppercase ? char.lowercased() : char.uppercased()\n        }\n      \
    \  if char.isVowel {\n            encodedMessage += char.next(2)\n        }\n\
    \    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                if index\
    \ + 2 > alphabet.count - 1 {\n                    encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2 - alphabet.count)])\n                } else {\n                \
    \    encodedMessage.append(alphabet[alphabet.index(index, offsetBy: 2)])\n   \
    \             }\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage = \"\"\n   \
    \ for char in message {\n        if vowels.contains(char) {\n            let index\
    \ = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n  \
    \  for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(char)\n            }\n \
    \       } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\")\n\
    \    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels: [Character] =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if vowels.contains(char) {\n            let index\
    \ = vowels.firstIndex(of: char)!\n            let newIndex = (index + 2) % vowels.count\n\
    \            encodedMessage.append(vowels[newIndex])\n        } else {\n     \
    \       encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = letters.index(index, offsetBy: 2)\n          \
    \      encoded.append(letters[newIndex])\n            } else {\n             \
    \   encoded.append(letters[index])\n            }\n        }\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    for character in message {\n \
    \       if character.isLetter {\n            if character.isUppercase {\n    \
    \            encodedMessage.append(character.lowercased())\n            } else\
    \ {\n                encodedMessage.append(character.uppercased())\n         \
    \   }\n        } else {\n            encodedMessage.append(character)\n      \
    \  }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    let\
    \ vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message {\n        if letter.isLetter\
    \ {\n            if let index = alphabet.firstIndex(of: letter.lowercased()) {\n\
    \                if vowels.contains(letter.lowercased()) {\n                 \
    \   let nextIndex = alphabet.index(index, offsetBy: 2)\n                    encodedMessage.append(alphabet[nextIndex].uppercased())\n\
    \                } else {\n                    encodedMessage.append(alphabet[index].uppercased())\n\
    \                }\n            }\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(letter.lowercased() == letter ? alphabet[index].uppercased()\
    \ : alphabet[index])\n            }\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    for character in message {\n        if character.isLetter\
    \ {\n            let unicode = character.unicodeScalars.first!.value\n       \
    \     let unicodeString = String(unicode, radix: 16, uppercase: true)\n      \
    \      let unicodeInt = Int(unicodeString, radix: 16)!\n            let newUnicode\
    \ = unicodeInt + 2\n            let newUnicodeString = String(newUnicode, radix:\
    \ 16, uppercase: true)\n            let newUnicodeScalar = UnicodeScalar(UInt32(newUnicodeString,\
    \ radix: 16)!)\n            encodedMessage.append(String(newUnicodeScalar))\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        if vowels.contains(char.lowercased()) {\n                encoded.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(letters[index])\n\
    \            }\n        }\n    }\n    return encoded", '    return ""', "    var\
    \ encodedMessage = \"\"\n    for char in message {\n        if char.isLetter {\n\
    \            if char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex].uppercased())\n         \
    \   } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    var encoded = \"\"\n    for\
    \ letter in message {\n        if letter.isUppercase {\n            encoded.append(letter.lowercased())\n\
    \        } else {\n            encoded.append(letter.uppercased())\n        }\n\
    \    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         if vowels.contains(char.lowercased()) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    var encoded = \"\"\n    let vowels = \"aeiou\"\n\
    \    for char in message {\n        let charLower = char.lowercased()\n      \
    \  if vowels.contains(charLower) {\n            let index = vowels.index(of: charLower)!\n\
    \            let nextIndex = (index + 2) % 5\n            encoded.append(vowels[nextIndex].uppercased())\n\
    \        } else {\n            encoded.append(char.uppercased())\n        }\n\
    \    }\n    return encoded", "    var encodedMessage = \"\"\n    for character\
    \ in message {\n        if character.isLetter {\n            if character.isUppercase\
    \ {\n                encodedMessage.append(character.lowercased())\n         \
    \   } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  var encodedMessage = \"\"\n    for character in message {\n        if let index\
    \ = alphabet.firstIndex(of: character.lowercased()) {\n            if vowels.contains(character.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(character)\n            }\n        }\n\
    \    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                encodedMessage.append(char.lowercased())\n            } else\
    \ {\n                encodedMessage.append(char.uppercased())\n            }\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encoded = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          let newAscii = ascii + 2\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \            encoded.append(newChar)\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels: [Character] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in\
    \ message {\n        if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter in\
    \ message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = \"abcdefghijklmnopqrstuvwxyz\".map { $0 }\n    let encoded = message.map {\
    \ char -> Character in\n        if vowels.contains(char) {\n            let index\
    \ = alphabet.firstIndex(of: char)!\n            return alphabet[(index + 2) %\
    \ alphabet.count]\n        } else {\n            return char\n        }\n    }\n\
    \    return String(encoded)", "    let vowels = \"aeiou\"\n    let alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          let newAscii = ascii + 2\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \            encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n  \
    \  for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            let newIndex = (index + 2) % alphabet.count\n            let\
    \ newChar = alphabet[newIndex]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            encoded.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index.encodedOffset + 2)])\n        } else if vowels2.contains(char)\
    \ {\n            let index = vowels2.firstIndex(of: char)!\n            encoded.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index.encodedOffset + 2)])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels: Set<Character> = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(of: char)!\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage\
    \ += alphabet[(index + 2) % alphabet.count].uppercased()\n            } else {\n\
    \                encodedMessage += alphabet[index].uppercased()\n            }\n\
    \        } else {\n            encodedMessage += String(char)\n        }\n   \
    \ }\n    return encodedMessage", "    var encoded = \"\"\n    let vowels = \"\
    aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for character\
    \ in message {\n        if vowels.contains(character.lowercased()) {\n       \
    \     let index = alphabet.index(of: character.lowercased())!\n            let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(character.lowercased())\n      \
    \  }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         if vowels.contains(char.lowercased()) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    let vowels: [Character] = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\",\
    \ \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = index + 2\n            encodedMessage.append(alphabet[newIndex])\n       \
    \ } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\",\
    \ \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var\
    \ encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for char in message {\n  \
    \      if vowels.contains(String(char).lowercased()) {\n            let index\
    \ = vowels.firstIndex(of: String(char).lowercased())!\n            encoded +=\
    \ vowels[(index + 2) % 5].uppercased()\n        } else {\n            encoded\
    \ += String(char).uppercased()\n        }\n    }\n    return encoded", "    var\
    \ encoded = \"\"\n    for char in message {\n        if char.isLetter {\n    \
    \        let ascii = char.asciiValue!\n            let isUpper = ascii >= 65 &&\
    \ ascii <= 90\n            let asciiOffset = isUpper ? 65 : 97\n            let\
    \ charOffset = isUpper ? \"A\" : \"a\"\n            let charIndex = Int(ascii)\
    \ - asciiOffset\n            let encodedIndex = (charIndex + 2) % 26\n       \
    \     let encodedChar = String(UnicodeScalar(encodedIndex + asciiOffset)!)\n \
    \           encoded += encodedChar\n        } else {\n            encoded += String(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            if let vowelIndex = vowels.firstIndex(of: char.lowercased())\
    \ {\n                encodedMessage.append(vowels[vowels.index(vowelIndex, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(letters[letters.index(index,\
    \ offsetBy: 1)])\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in message {\n   \
    \     if vowels.contains(letter) {\n            if let index = alphabet.firstIndex(of:\
    \ letter) {\n                let newIndex = index + 2\n                encodedMessage.append(alphabet[newIndex])\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            let nextIndex = (index + 2) % vowels.count\n           \
    \ encoded.append(vowels[nextIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        let newIndex = (index + 2) % letters.count\n            encoded.append(letters[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    for char in message {\n      \
    \  if char.isLetter {\n            if char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                encodedMessage.append(char.lowercased())\n            } else\
    \ {\n                encodedMessage.append(char.uppercased())\n            }\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         let newIndex = alphabet.index(index, offsetBy: 2)\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(alphabet[newIndex])\n            }\
    \ else {\n                encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels: Set<Character> =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = Array(\"\
    abcdefghijklmnopqrstuvwxyz\")\n    var encoded = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            let newIndex = index + 2\n            let newChar = letters[newIndex\
    \ % letters.count]\n            encodedMessage.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            encodedMessage.append(char.next(2))\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n \
    \   for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.firstIndex(of: char)\n            let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = letters.index(index, offsetBy: 2)\n          \
    \      encoded.append(letters[newIndex])\n            } else {\n             \
    \   encoded.append(letters[index])\n            }\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = index + 2\n            if newIndex\
    \ > alphabet.count - 1 {\n                encoded.append(alphabet[newIndex - alphabet.count])\n\
    \            } else {\n                encoded.append(alphabet[newIndex])\n  \
    \          }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        if vowels.contains(char.lowercased()) {\n                encodedMessage.append(letters[index.advanced(by:\
    \ 2)])\n            } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            if let index = alphabet.firstIndex(of:\
    \ char) {\n                let newIndex = index + 2\n                if newIndex\
    \ > alphabet.count - 1 {\n                    encodedMessage.append(alphabet[newIndex\
    \ - alphabet.count])\n                } else {\n                    encodedMessage.append(alphabet[newIndex])\n\
    \                }\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels: [Character] =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ letter in message {\n        if vowels.contains(letter) {\n            let index\
    \ = vowels.firstIndex(of: letter)!\n            let newIndex = (index + 2) % vowels.count\n\
    \            encodedMessage.append(vowels[newIndex])\n        } else {\n     \
    \       encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.index(of: char.lowercased()) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            let newChar = alphabet[newIndex]\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(newChar)\n            } else {\n  \
    \              encodedMessage.append(newChar.uppercased())\n            }\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage", "    let vowels: Set<Character> = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let vowelsInAlphabet = [\"a\", \"c\", \"e\", \"g\", \"\
    i\", \"k\", \"m\", \"o\", \"q\", \"s\", \"u\", \"w\", \"y\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = vowelsInAlphabet.firstIndex(of: String(char))!\n        \
    \    encodedMessage += vowelsInAlphabet[index + 2]\n        } else {\n       \
    \     encodedMessage += String(char).uppercased()\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for letter\
    \ in message {\n        if let ascii = letter.asciiValue {\n            if ascii\
    \ >= 65 && ascii <= 90 {\n                encoded.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n            } else if ascii >= 97 && ascii <= 122 {\n            \
    \    encoded.append(Character(UnicodeScalar(ascii - 32)!))\n            } else\
    \ {\n                encoded.append(letter)\n            }\n        }\n    }\n\
    \    for vowel in vowels {\n        encoded = encoded.replacingOccurrences(of:\
    \ vowel, with: String(vowel.asciiValue! + 2))\n    }\n    return encoded", " \
    \   let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded", '    return
    ""', "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded =\
    \ \"\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = vowels.firstIndex(of: String(char).lowercased())!\n\
    \            let newIndex = (index + 2) % vowels.count\n            encoded +=\
    \ vowels[newIndex].uppercased()\n        } else {\n            encoded += String(char).uppercased()\n\
    \        }\n    }\n    return encoded", "    let vowels: Set<Character> = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    let vowels =\
    \ \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in\
    \ message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            let isUpper = letter.isUppercase\n     \
    \       let newLetter = alphabet[alphabet.index(index, offsetBy: 2)]\n       \
    \     if isUpper {\n                encoded.append(newLetter.uppercased())\n \
    \           } else {\n                encoded.append(newLetter)\n            }\n\
    \        } else {\n            encoded.append(letter)\n        }\n    }\n    return\
    \ encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded\
    \ = \"\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = vowels.firstIndex(of: String(char).lowercased())!\n\
    \            encoded += vowels[(index + 2) % 5].uppercased()\n        } else {\n\
    \            encoded += String(char).uppercased()\n        }\n    }\n    return\
    \ encoded", "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encoded = \"\"\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = vowels.firstIndex(of: String(char).lowercased())!\n\
    \            encoded += vowels[(index + 2) % 5].uppercased()\n        } else {\n\
    \            encoded += String(char).uppercased()\n        }\n    }\n    return\
    \ encoded", "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            encodedMessage.append(char.next(2))\n        } else {\n     \
    \       encodedMessage.append(char.swapCase())\n        }\n    }\n    return encodedMessage",
  "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n \
    \   for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.firstIndex(of: char)!\n            let newIndex = (index +\
    \ 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       encodedMessage.append(char.lowercased())\n            } else {\n     \
    \           encodedMessage.append(char.uppercased())\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encoded = \"\"\n    for\
    \ char in message {\n        if char.isLetter {\n            encoded.append(encode(char:\
    \ char))\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded", "    let vowels: Set<Character> = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    var encodedMessage = \"\"\n    for letter in message {\n        if let\
    \ asciiValue = letter.asciiValue {\n            if asciiValue >= 65 && asciiValue\
    \ <= 90 {\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n            } else if asciiValue >= 97 && asciiValue <= 122 {\n  \
    \              encodedMessage.append(Character(UnicodeScalar(asciiValue - 32)!))\n\
    \            } else {\n                encodedMessage.append(letter)\n       \
    \     }\n        }\n    }\n    for vowel in vowels {\n        encodedMessage =\
    \ encodedMessage.replacingOccurrences(of: vowel, with: String(vowel.unicodeScalars.first!.value\
    \ + 2))\n    }\n    return encodedMessage", "    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)\n            encodedMessage += String(alphabet[alphabet.index(index!,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage += String(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        if vowels.contains(char.lowercased()) {\n                encoded.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(letters[index])\n\
    \            }\n        }\n    }\n    return encoded", "    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if character.isUppercase {\n\
    \            encodedMessage.append(character.lowercased())\n        } else {\n\
    \            encodedMessage.append(character.uppercased())\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         let newIndex = alphabet.index(index, offsetBy: 2)\n            if vowels.contains(char.lowercased())\
    \ {\n                encoded.append(alphabet[newIndex])\n            } else {\n\
    \                encoded.append(alphabet[newIndex].uppercased())\n           \
    \ }\n        } else {\n            encoded.append(char)\n        }\n    }\n  \
    \  return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = index + 2\n            let\
    \ newChar = alphabet[newIndex % alphabet.count]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encodedMessage.append(alphabet[newIndex])\n            } else {\n    \
    \            encodedMessage.append(alphabet[index])\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encoded = \"\"\n    let vowels = \"aeiou\"\n    let\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n      \
    \  if let index = letters.firstIndex(of: char.lowercased()) {\n            let\
    \ newIndex = index + 2\n            let newChar = letters[newIndex % letters.count]\n\
    \            encoded.append(vowels.contains(char.lowercased()) ? newChar : newChar.uppercased())\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var result = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = letters.index(index, offsetBy: 2)\n          \
    \      result.append(letters[newIndex])\n            } else {\n              \
    \  result.append(letters[index])\n            }\n        }\n    }\n    return\
    \ result", "    let vowels = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            result.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n        } else if vowels2.contains(char) {\n           \
    \ let index = vowels2.firstIndex(of: char)!\n            result.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index)])\n        } else {\n            result.append(char)\n    \
    \    }\n    }\n    return result", "    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            encoded += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased()\
    \ == \"z\" ? \"b\" : String(Array(message)[vowels.firstIndex(of: String(char).lowercased())!\
    \ + 2])\n        } else {\n            encoded += String(char).lowercased() ==\
    \ String(char) ? String(char).uppercased() : String(char).lowercased()\n     \
    \   }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        if vowels.contains(char.lowercased()) {\n                encoded.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(letters[index])\n\
    \            }\n        }\n    }\n    return encoded", "    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if alphabet.contains(char) {\n          \
    \  if vowels.contains(char) {\n                let index = alphabet.firstIndex(of:\
    \ char)!\n                let newIndex = alphabet.index(index, offsetBy: 2)\n\
    \                let newChar = alphabet[newIndex]\n                encodedMessage.append(newChar)\n\
    \            } else {\n                encodedMessage.append(char)\n         \
    \   }\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage", "    return message.map {\n        switch\
    \ $0 {\n        case \"a\":\n            return \"c\"\n        case \"e\":\n \
    \           return \"g\"\n        case \"i\":\n            return \"k\"\n    \
    \    case \"o\":\n            return \"q\"\n        case \"u\":\n            return\
    \ \"y\"\n        case \"A\":\n            return \"C\"\n        case \"E\":\n\
    \            return \"G\"\n        case \"I\":\n            return \"K\"\n   \
    \     case \"O\":\n            return \"Q\"\n        case \"U\":\n           \
    \ return \"Y\"\n        default:\n            return $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n        }\n    }", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            if letter.isUppercase {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        if char.isLetter {\n            let ascii\
    \ = char.asciiValue!\n            let encodedChar = ascii + 2\n            let\
    \ encodedCharAscii = UInt8(encodedChar)\n            encodedMessage.append(Character(UnicodeScalar(encodedCharAscii)))\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let vowelsUpper\
    \ = \"AEIOU\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    let lettersUpper\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % 5\n            encoded.append(vowels[newIndex])\n\
    \        } else if vowelsUpper.contains(char) {\n            let index = vowelsUpper.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % 5\n            encoded.append(vowelsUpper[newIndex])\n\
    \        } else if letters.contains(char) {\n            let index = letters.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % 26\n            encoded.append(letters[newIndex])\n\
    \        } else if lettersUpper.contains(char) {\n            let index = lettersUpper.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % 26\n            encoded.append(lettersUpper[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for character in message {\n        if let\
    \ index = letters.firstIndex(of: character.lowercased()) {\n            let isUppercased\
    \ = character.isUppercased\n            let newIndex = (index + 2) % letters.count\n\
    \            let newCharacter = letters[newIndex]\n            encodedMessage\
    \ += isUppercased ? newCharacter.uppercased() : newCharacter\n        } else {\n\
    \            encodedMessage += String(character)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\",\
    \ \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var\
    \ encodedMessage = \"\"\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            if let index = alphabet.firstIndex(of: character) {\n       \
    \         encodedMessage.append(alphabet[index + 2])\n            }\n        }\
    \ else {\n            encodedMessage.append(character)\n        }\n    }\n   \
    \ return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage =\
    \ \"\"\n    for letter in message {\n        let lowercaseLetter = String(letter).lowercased()\n\
    \        if vowels.contains(lowercaseLetter) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.count - 2)\n            let newLetter = alphabet[index]\n\
    \            encodedMessage.append(newLetter)\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            if String(char).lowercased()\
    \ == \"u\" {\n                encodedMessage += \"a\"\n            } else {\n\
    \                encodedMessage += String(char).lowercased().unicodeScalars.map\
    \ { UnicodeScalar(Int($0.value) + 2)! }.map { Character(UnicodeScalar($0)!) }\n\
    \            }\n        } else {\n            encodedMessage += String(char).lowercased().unicodeScalars.map\
    \ { UnicodeScalar(Int($0.value) - 32)! }.map { Character(UnicodeScalar($0)!) }\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\
    \n    for char in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = index + 2\n                encodedMessage.append(letters[newIndex\
    \ % letters.count])\n            } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of:\
    \ String(char).lowercased())! + 2)\n            encodedMessage += String(alphabet[index]).uppercased()\n\
    \        } else {\n            encodedMessage += String(char).uppercased()\n \
    \       }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n  \
    \  let vowelsSet = Set(vowels)\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let lettersSet = Set(letters)\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if lettersSet.contains(char) {\n            if vowelsSet.contains(char)\
    \ {\n                let index = letters.index(of: char)!\n                let\
    \ newIndex = letters.index(index, offsetBy: 2)\n                let newChar =\
    \ letters[newIndex]\n                encodedMessage.append(newChar)\n        \
    \    } else {\n                let index = letters.index(of: char)!\n        \
    \        let newIndex = letters.index(index, offsetBy: -2)\n                let\
    \ newChar = letters[newIndex]\n                encodedMessage.append(newChar)\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encoded = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(alphabet[index])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded", "    let vowels: Set<Character> = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    var encodedMessage = \"\"\n    for char in message {\n        if\
    \ vowels.contains(char) {\n            if let index = alphabet.firstIndex(of:\
    \ char) {\n                encodedMessage.append(alphabet[(index + 2) % alphabet.count])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels: Set<Character> =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)\n            let newIndex = index! + 2\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels: [Character] = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for character in message\
    \ {\n        if vowels.contains(character) {\n            let index = vowels.firstIndex(of:\
    \ character)!\n            let newIndex = (index + 2) % vowels.count\n       \
    \     encodedMessage.append(vowels[newIndex])\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for character in message {\n        if character.isLetter {\n           \
    \ encodedMessage += String(character.isUppercase ? character.lowercased() : character.uppercased())\n\
    \        } else {\n            encodedMessage += String(character)\n        }\n\
    \    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        let newIndex = (index + 2) % letters.count\n            encoded.append(letters[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encoded = \"\"\n    for char in message {\n        if char.isLetter\
    \ {\n            let ascii = char.asciiValue!\n            let newAscii = ascii\
    \ + 2\n            let newChar = Character(UnicodeScalar(newAscii)!)\n       \
    \     encoded.append(newChar)\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let nextIndex = letters.index(index, offsetBy: 2)\n         \
    \       encoded.append(letters[nextIndex])\n            } else {\n           \
    \     encoded.append(letters[index])\n            }\n        }\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    for char in message {\n      \
    \  if char.isLetter {\n            let ascii = char.asciiValue!\n            let\
    \ encodedAscii = ascii + 2\n            let encodedChar = Character(UnicodeScalar(encodedAscii)!)\n\
    \            encodedMessage.append(encodedChar)\n        } else {\n          \
    \  encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        encodedMessage.append(vowels[(vowels.firstIndex(of: char)! + 2) % vowels.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(alphabet[index])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            encodedMessage += char.isUppercase\
    \ ? char.lowercased() : char.uppercased()\n        }\n        if char.isVowel\
    \ {\n            encodedMessage += char.next(2)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = letters.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = (index + 2) % letters.count\n            \
    \    encodedMessage.append(letters[newIndex].uppercased())\n            } else\
    \ {\n                encodedMessage.append(letters[index].uppercased())\n    \
    \        }\n        } else {\n            encodedMessage.append(char)\n      \
    \  }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n \
    \   for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            encodedMessage\
    \ += String(char).lowercased() == \"u\" ? \"a\" : String(characters[characters.index(characters.startIndex,\
    \ offsetBy: characters.index(of: String(char).lowercased())! + 2)])\n        }\
    \ else {\n            encodedMessage += String(char).lowercased() == String(char)\
    \ ? String(characters[characters.index(characters.startIndex, offsetBy: characters.index(of:\
    \ String(char).lowercased())! - 32)]) : String(characters[characters.index(characters.startIndex,\
    \ offsetBy: characters.index(of: String(char).lowercased())! + 32)])\n       \
    \ }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    var encoded = \"\"\n    for char in message {\n        if\
    \ vowels.contains(String(char).lowercased()) {\n            encoded += String(char).lowercased()\
    \ == \"z\" ? \"b\" : String(Array(String(char).lowercased())[1])\n        } else\
    \ {\n            encoded += String(char).lowercased() == String(char) ? String(char).uppercased()\
    \ : String(char).lowercased()\n        }\n    }\n    return encoded", "    var\
    \ encodedMessage = \"\"\n    for char in message {\n        if char.isLetter {\n\
    \            encodedMessage += encode(char: char)\n        } else {\n        \
    \    encodedMessage += String(char)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            let nextChar = alphabet[nextIndex]\n\
    \            encoded.append(nextChar)\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    for\
    \ char in message {\n        let lowercaseChar = char.lowercased()\n        if\
    \ lowercaseChar == \"a\" {\n            encodedMessage += \"c\"\n        } else\
    \ if lowercaseChar == \"e\" {\n            encodedMessage += \"g\"\n        }\
    \ else if lowercaseChar == \"i\" {\n            encodedMessage += \"k\"\n    \
    \    } else if lowercaseChar == \"o\" {\n            encodedMessage += \"q\"\n\
    \        } else if lowercaseChar == \"u\" {\n            encodedMessage += \"\
    y\"\n        } else if lowercaseChar == \"y\" {\n            encodedMessage +=\
    \ \"a\"\n        } else if lowercaseChar == \" \" {\n            encodedMessage\
    \ += \" \"\n        } else {\n            encodedMessage += String(char)\n   \
    \     }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n \
    \   for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += encode(char: char)\n        } else {\n            encodedMessage += String(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let encoded = message.map\
    \ { (char) -> Character in\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char)!))\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            return alphabet[nextIndex]\n\
    \        } else {\n            return char\n        }\n    }\n    return String(encoded)",
  "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if vowels.contains(letter) {\n\
    \            let index = vowels.firstIndex(of: letter)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels: [Character] = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for letter in message\
    \ {\n        if vowels.contains(letter) {\n            let index = alphabet.firstIndex(of:\
    \ letter)!\n            let newIndex = index + 2\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    var vowels =\
    \ \"aeiou\"\n    for char in message {\n        if vowels.contains(char) {\n \
    \           let index = vowels.firstIndex(of: char)!\n            let newIndex\
    \ = index + 2\n            encodedMessage.append(vowels[newIndex])\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    for char in message {\n        let charString = String(char)\n        if\
    \ vowels.contains(charString.lowercased()) {\n            let index = alphabet.index(of:\
    \ charString.lowercased())!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage += String(alphabet[newIndex]).uppercased()\n\
    \        } else {\n            encodedMessage += charString.uppercased()\n   \
    \     }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let ascii2 = ascii + 2\n            let\
    \ char2 = Character(UnicodeScalar(ascii2)!)\n            encoded.append(char2)\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage = \"\"\n   \
    \ for char in message {\n        if vowels.contains(char) {\n            let index\
    \ = alphabet.firstIndex(of: char)!\n            let newIndex = (index + 2) % alphabet.count\n\
    \            encodedMessage.append(alphabet[newIndex])\n        } else {\n   \
    \         encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ]\n    for char in message {\n        if vowels.contains(char) {\n           \
    \ if let index = alphabet.firstIndex(of: char) {\n                let newIndex\
    \ = index + 2\n                if newIndex > alphabet.count - 1 {\n          \
    \          encodedMessage.append(alphabet[newIndex - alphabet.count])\n      \
    \          } else {\n                    encodedMessage.append(alphabet[newIndex])\n\
    \                }\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encoded = \"\"\n    for\
    \ char in message {\n        if char.isLetter {\n            encoded.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                encodedMessage.append(char.lowercased())\n            } else\
    \ {\n                encodedMessage.append(char.uppercased())\n            }\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter in\
    \ message {\n        if let index = letters.firstIndex(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                let\
    \ nextIndex = letters.index(index, offsetBy: 2)\n                encodedMessage.append(letters[nextIndex])\n\
    \            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for character\
    \ in message {\n        if vowels.contains(character) {\n            if let index\
    \ = alphabet.firstIndex(of: character) {\n                encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.firstIndex(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\
    \n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for character in message {\n\
    \        if vowels.contains(character) {\n            let index = alphabet.firstIndex(of:\
    \ character)!\n            let newIndex = index + 2\n            let newCharacter\
    \ = alphabet[newIndex]\n            encodedMessage.append(newCharacter)\n    \
    \    } else {\n            encodedMessage.append(character)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for character\
    \ in message {\n        if vowels.contains(character) {\n            let index\
    \ = alphabet.firstIndex(of: character)\n            let nextIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[nextIndex])\n     \
    \   } else {\n            encodedMessage.append(character)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          if ascii >= 65 && ascii <= 90 {\n                encodedMessage.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n            } else if ascii >= 97 && ascii <= 122 {\n            \
    \    encodedMessage.append(Character(UnicodeScalar(ascii - 32)!))\n          \
    \  }\n        } else {\n            encodedMessage.append(char)\n        }\n \
    \   }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            let index = alphabet.firstIndex(of:\
    \ char.lowercased())!\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    let vowels = \"aeiou\"\n    var encoded = \"\"\n\
    \    for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = vowels.firstIndex(of: char)!\n            let nextIndex = vowels.index(after:\
    \ index)\n            let nextNextIndex = vowels.index(after: nextIndex)\n   \
    \         encoded.append(vowels[nextNextIndex])\n        } else {\n          \
    \  encoded.append(char)\n        }\n    }\n    return encoded", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let asciiValue = ascii + (ascii >= 65\
    \ && ascii <= 90 ? 32 : -32)\n            let newAscii = asciiValue + (asciiValue\
    \ >= 97 && asciiValue <= 122 ? 2 : -24)\n            encodedMessage.append(Character(UnicodeScalar(newAscii)!))\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.index(of: char.lowercased()) {\n        \
    \    if vowels.contains(char.lowercased()) {\n                let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n  \
    \          } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        if char.isLetter {\n            let ascii\
    \ = char.asciiValue!\n            let newAscii = ascii + (ascii < 97 ? 2 : -2)\n\
    \            let newChar = Character(UnicodeScalar(newAscii)!)\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter in\
    \ message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            let isUppercased = letter.isUppercased\n            let newLetter\
    \ = alphabet[alphabet.index(index, offsetBy: 2)]\n            encodedMessage +=\
    \ isUppercased ? newLetter.uppercased() : newLetter\n        } else {\n      \
    \      encodedMessage += String(letter)\n        }\n    }\n    return encodedMessage",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n\
    \    for letter in message {\n        if let ascii = letter.asciiValue {\n   \
    \         if ascii >= 65 && ascii <= 90 {\n                encoded.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n            } else if ascii >= 97 && ascii <= 122 {\n            \
    \    encoded.append(Character(UnicodeScalar(ascii - 32)!))\n            } else\
    \ {\n                encoded.append(letter)\n            }\n        }\n    }\n\
    \    for vowel in vowels {\n        encoded = encoded.replacingOccurrences(of:\
    \ vowel, with: String(vowel.unicodeScalars.first!.value + 2))\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels: Set<Character> =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = Array(\"\
    abcdefghijklmnopqrstuvwxyz\")\n    var encoded = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        let newIndex = (index + 2) % letters.count\n            encoded.append(letters[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = index + 2\n            encodedMessage.append(alphabet[newIndex])\n       \
    \ } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    for char in message {\n\
    \        let charAscii = char.asciiValue!\n        if charAscii >= 65 && charAscii\
    \ <= 90 {\n            encodedMessage.append(Character(UnicodeScalar(charAscii\
    \ + 32)!))\n        } else if charAscii >= 97 && charAscii <= 122 {\n        \
    \    encodedMessage.append(Character(UnicodeScalar(charAscii - 32)!))\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    for char in message {\n\
    \        if char.isLetter {\n            let asciiValue = char.asciiValue!\n \
    \           let encodedChar = asciiValue + 2\n            if encodedChar > 90\
    \ {\n                encodedMessage.append(Character(UnicodeScalar(encodedChar\
    \ - 26)!))\n            } else {\n                encodedMessage.append(Character(UnicodeScalar(encodedChar)!))\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage"]
stop_tokens:
- "\n}"
