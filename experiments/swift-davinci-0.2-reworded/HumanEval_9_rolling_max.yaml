name: HumanEval_9_rolling_max
language: swift
prompt: "\n/// From a given array of integers, generate an array of rolling maximum\
  \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers:\
  \ [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == []\
  \ as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
  \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
  \ == [3, 3, 3, 100, 100])"
completions: ["    var max_so_far = numbers[0]\n    var result = [Int]()\n    result.append(max_so_far)\n\
    \    for i in 1..<numbers.count {\n        max_so_far = max(max_so_far, numbers[i])\n\
    \        result.append(max_so_far)\n    }\n    return result", "    var max_so_far\
    \ = numbers[0]\n    var result = [Int]()\n    result.append(max_so_far)\n    for\
    \ i in 1..<numbers.count {\n        if numbers[i] > max_so_far {\n           \
    \ max_so_far = numbers[i]\n        }\n        result.append(max_so_far)\n    }\n\
    \    return result", "    var result = [Int]()\n    var max = Int.min\n    for\
    \ number in numbers {\n        if number > max {\n            max = number\n \
    \       }\n        result.append(max)\n    }\n    return result", "    var max_so_far\
    \ = numbers[0]\n    var result = [Int]()\n    result.append(max_so_far)\n    for\
    \ i in 1..<numbers.count {\n        if numbers[i] > max_so_far {\n           \
    \ max_so_far = numbers[i]\n        }\n        result.append(max_so_far)\n    }\n\
    \    return result", "    var result = [Int]()\n    var max = numbers[0]\n   \
    \ for number in numbers {\n        max = max > number ? max : number\n       \
    \ result.append(max)\n    }\n    return result", "    var result = [Int]()\n \
    \   var current_max = numbers[0]\n    for number in numbers {\n        if number\
    \ > current_max {\n            current_max = number\n        }\n        result.append(current_max)\n\
    \    }\n    return result", "    var result = [Int]()\n    var max = Int.min\n\
    \    for number in numbers {\n        max = max(max, number)\n        result.append(max)\n\
    \    }\n    return result", "    var max_so_far = 0\n    var result = [Int]()\n\
    \    for number in numbers {\n        max_so_far = max(max_so_far, number)\n \
    \       result.append(max_so_far)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var max = Int.min\n    for number in numbers {\n        max =\
    \ Swift.max(max, number)\n        result.append(max)\n    }\n    return result",
  "    var result = [Int]()\n    var max = Int.min\n    for number in numbers {\n\
    \        max = Swift.max(max, number)\n        result.append(max)\n    }\n   \
    \ return result", "    var result = [Int]()\n    var max = Int.min\n    for number\
    \ in numbers {\n        max = Swift.max(max, number)\n        result.append(max)\n\
    \    }\n    return result", "    var result = [Int]()\n    var max = Int.min\n\
    \    for number in numbers {\n        max = max > number ? max : number\n    \
    \    result.append(max)\n    }\n    return result", "    var result = [Int]()\n\
    \    var max_so_far = 0\n    for number in numbers {\n        max_so_far = max(max_so_far,\
    \ number)\n        result.append(max_so_far)\n    }\n    return result", "   \
    \ var result = [Int]()\n    var current_max = 0\n    for number in numbers {\n\
    \        if number > current_max {\n            current_max = number\n       \
    \ }\n        result.append(current_max)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var max = Int.min\n    for number in numbers {\n        max =\
    \ max > number ? max : number\n        result.append(max)\n    }\n    return result",
  "    var result = [Int]()\n    var max = numbers[0]\n    result.append(max)\n  \
    \  for i in 1..<numbers.count {\n        max = max(max, numbers[i])\n        result.append(max)\n\
    \    }\n    return result", "    var max_so_far = numbers[0]\n    var result =\
    \ [Int]()\n    result.append(max_so_far)\n    for i in 1..<numbers.count {\n \
    \       if numbers[i] > max_so_far {\n            max_so_far = numbers[i]\n  \
    \      }\n        result.append(max_so_far)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var max = Int.min\n    for number in numbers {\n     \
    \   max = max(max, number)\n        result.append(max)\n    }\n    return result",
  "    var result = [Int]()\n    var max = Int.min\n    for number in numbers {\n\
    \        max = max(max, number)\n        result.append(max)\n    }\n    return\
    \ result", "    var max_so_far = numbers[0]\n    var result = [Int]()\n    result.append(max_so_far)\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] > max_so_far {\n    \
    \        max_so_far = numbers[i]\n        }\n        result.append(max_so_far)\n\
    \    }\n    return result"]
stop_tokens:
- "\n}"
