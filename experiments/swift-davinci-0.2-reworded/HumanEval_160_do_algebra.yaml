name: HumanEval_160_do_algebra
language: swift
prompt: "\n/// Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n/// the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n/// expression and return the evaluation of this\
  \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
  \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
  \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
  /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
  \ array is equal to the length of operand array minus one.\n/// Operand is an array\
  \ of of non-negative integers.\n/// Operator array has at least one operator, and\
  \ operand array has at least two operands.\nfunc do_algebra(operator: [String],\
  \ operand: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"\
  +\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\",\
  \ \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"\
  *\"], operand: [7, 3, 4]) == 8)"
completions: ["    var result = operand[0]\n    for i in 0..<operator.count {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i+1])))\n        default:\n            break\n        }\n   \
    \ }\n    return result", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ Int(pow(Double(result), Double(operand[i+1])))\n        default:\n         \
    \   break\n        }\n    }\n    return result", "    var result = operand[0]\n\
    \    for i in 0..<operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            break\n        }\n    }\n    return result", "    var\
    \ result = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var result = operand[0]\n    for i in 0..<operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i+1])))\n        default:\n            break\n        }\n   \
    \ }\n    return result", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ Int(pow(Double(result), Double(operand[i+1])))\n        default:\n         \
    \   break\n        }\n    }\n    return result", "    var result = operand[0]\n\
    \    for i in 0..<operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            break\n        }\n    }\n    return result", "    var\
    \ result = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var result = operand[0]\n    for i in 0..<operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i+1])))\n        default:\n            break\n        }\n   \
    \ }\n    return result", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ Int(pow(Double(result), Double(operand[i+1])))\n        default:\n         \
    \   break\n        }\n    }\n    return result", "    var result = operand[0]\n\
    \    for i in 0..<operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            break\n        }\n    }\n    return result", "    var\
    \ result = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var result = operand[0]\n    for i in 0..<operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i+1])))\n        default:\n            break\n        }\n   \
    \ }\n    return result", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ Int(pow(Double(result), Double(operand[i+1])))\n        default:\n         \
    \   break\n        }\n    }\n    return result", "    var result = operand[0]\n\
    \    for i in 0..<operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            break\n        }\n    }\n    return result", "    var\
    \ result = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i + 1]\n        case \"\
    -\":\n            result -= operand[i + 1]\n        case \"*\":\n            result\
    \ *= operand[i + 1]\n        case \"//\":\n            result /= operand[i + 1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result",
  "    var result = operand[0]\n    for i in 0..<operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i+1])))\n        default:\n            break\n        }\n   \
    \ }\n    return result", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ Int(pow(Double(result), Double(operand[i+1])))\n        default:\n         \
    \   break\n        }\n    }\n    return result", "    var result = operand[0]\n\
    \    for i in 0..<operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            break\n        }\n    }\n    return result", "    var\
    \ result = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            break\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
