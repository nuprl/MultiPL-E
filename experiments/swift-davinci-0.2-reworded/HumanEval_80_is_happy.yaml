name: HumanEval_80_is_happy
language: swift
prompt: "\n/// You are given a string s.\n/// Your task is to check if the string\
  \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
  \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
  \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
  /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n/// true\n\
  /// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
  \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"\
  aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
  ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\"\
  ) == false)"
completions: ["    guard s.count >= 3 else { return false }\n    var set = Set<Character>()\n\
    \    for c in s {\n        set.insert(c)\n    }\n    return set.count >= 3", " \
    \   if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count < 3 {\n            return false\n\
    \        }\n    }\n    return true", "    if s.count < 3 {\n        return false\n\
    \    }\n    var i = 0\n    while i < s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let sub = s[start..<end]\n        if Set(sub).count != 3 {\n           \
    \ return false\n        }\n        i += 1\n    }\n    return true", "    if s.count\
    \ < 3 {\n        return false\n    }\n    var prev = s.first!\n    var prevprev\
    \ = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n        if prev == s[i] || prevprev == s[i] {\n         \
    \   return false\n        }\n        prevprev = prev\n        prev = s[i]\n  \
    \  }\n    return true", "    if s.count < 3 {\n        return false\n    }\n \
    \   for i in 0..<s.count-2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        let sub\
    \ = s[start..<end]\n        if Set(sub).count < 3 {\n            return false\n\
    \        }\n    }\n    return true", "    if s.count < 3 {\n        return false\n\
    \    }\n    for i in 0..<s.count-2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n     \
    \   let range = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true", "    guard\
    \ s.count >= 3 else { return false }\n    let s = Array(s)\n    for i in 0..<s.count-2\
    \ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n     \
    \       return false\n        }\n    }\n    return true", "    if s.count < 3\
    \ {\n        return false\n    }\n    var result = true\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let subString = s[range]\n        if Set(subString).count != 3 {\n      \
    \      result = false\n            break\n        }\n    }\n    return result",
  "    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i <\
    \ s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n    \
    \    let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true", "    if s.count <\
    \ 3 {\n        return false\n    }\n    var previous = s.first!\n    var previous2\
    \ = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n        if previous == s[i] || previous2 == s[i] {\n    \
    \        return false\n        }\n        previous = previous2\n        previous2\
    \ = s[i]\n    }\n    return true", "    if s.count < 3 {\n        return false\n\
    \    }\n    var previous = s.first!\n    var previousPrevious = s[s.index(after:\
    \ s.startIndex)]\n    for character in s.dropFirst(2) {\n        if character\
    \ == previous || character == previousPrevious {\n            return false\n \
    \       }\n        previousPrevious = previous\n        previous = character\n\
    \    }\n    return true", "    if s.count < 3 {\n        return false\n    }\n\
    \    var i = 0\n    while i < s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let sub = s[range]\n        let set = Set(sub)\n\
    \        if set.count != 3 {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return true", "    if s.count < 3 {\n        return false\n  \
    \  }\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let sub = s[range]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n    }\n    return true", "    if\
    \ s.count < 3 {\n        return false\n    }\n    var i = 0\n    while i < s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true", "    if s.count < 3 {\n        return false\n\
    \    }\n    for i in 0..<s.count-2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n     \
    \   let sub = s[start..<end]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true", "    if s.count < 3 {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s.count - 2 {\n        let start\
    \ = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        let range = start..<end\n        let sub = s[range]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true", "    if s.count < 3 {\n        return false\n\
    \    }\n    var i = 0\n    while i < s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let sub = s[range]\n        if Set(sub).count\
    \ < 3 {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true", "    let s = Array(s)\n    if s.count < 3 {\n        return false\n \
    \   }\n    for i in 0...s.count - 3 {\n        if s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n  \
    \  }\n    return true", "    if s.count < 3 {\n        return false\n    }\n \
    \   for i in 0..<s.count-2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        let range\
    \ = start..<end\n        let sub = s[range]\n        if Set(sub).count < 3 {\n\
    \            return false\n        }\n    }\n    return true", "    if s.count\
    \ < 3 {\n        return false\n    }\n    var s = s\n    while s.count >= 3 {\n\
    \        let first = s.removeFirst()\n        let second = s.removeFirst()\n \
    \       let third = s.removeFirst()\n        if first == second || second == third\
    \ || first == third {\n            return false\n        }\n    }\n    return\
    \ true"]
stop_tokens:
- "\n}"
