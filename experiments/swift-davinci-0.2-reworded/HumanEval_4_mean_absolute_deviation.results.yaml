language: swift
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpa55mwszy.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8fwgf29o.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmp8fwgf29o.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_differences)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8fwgf29o.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmp8fwgf29o.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_differences)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8fwgf29o.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmp8fwgf29o.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_differences)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var sum =\
    \ 0.0\n    for number in numbers {\n        sum += abs(number - mean)\n    }\n\
    \    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw0as6nwg.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8fwgf29o.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmp8fwgf29o.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_differences)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let abs_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: abs_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4kd6fz54.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp4kd6fz54.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: abs_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpa55mwszy.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8fwgf29o.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmp8fwgf29o.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_differences)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_arithmetic(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpb3nsgmqi.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpb3nsgmqi.swift:12:12: error: cannot find 'mean_arithmetic' in scope\n\
    \    return mean_arithmetic(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let diffs = numbers.map\
    \ { abs($0 - mean) }\n    return average(numbers: diffs)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo_tt18r_.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpo_tt18r_.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: diffs)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n \
    \   let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var sum =\
    \ 0.0\n    for number in numbers {\n        sum += abs(number - mean)\n    }\n\
    \    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw0as6nwg.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var sum =\
    \ 0.0\n    for number in numbers {\n        sum += abs(number - mean)\n    }\n\
    \    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw0as6nwg.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8fwgf29o.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmp8fwgf29o.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_differences)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8fwgf29o.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmp8fwgf29o.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_differences)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum: Double\
    \ = 0.0\n    for number in numbers {\n        sum += abs(number - mean)\n    }\n\
    \    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw3sb7ha1.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum_of_absolute_differences\
    \ = 0.0\n    for number in numbers {\n        sum_of_absolute_differences += abs(number\
    \ - mean)\n    }\n    return sum_of_absolute_differences / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8n68x_or.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpa55mwszy.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var absolute_deviations\
    \ = [Double]()\n    for number in numbers {\n        absolute_deviations.append(abs(number\
    \ - mean))\n    }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpl2lxpd08.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpl2lxpd08.swift:15:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcifje3or.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpcifje3or.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let diffs =\
    \ numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: diffs)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptibvhumk.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmptibvhumk.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: diffs)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpa55mwszy.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var sum =\
    \ 0.0\n    for number in numbers {\n        sum += abs(number - mean)\n    }\n\
    \    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw0as6nwg.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let abs_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: abs_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4kd6fz54.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp4kd6fz54.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: abs_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n \
    \   let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpa55mwszy.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2k0fohk9.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp2k0fohk9.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var absolute_deviations\
    \ = [Double]()\n    for number in numbers {\n        absolute_deviations.append(abs(number\
    \ - mean))\n    }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpl2lxpd08.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpl2lxpd08.swift:15:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum: Double\
    \ = 0.0\n    for number in numbers {\n        sum += abs(number - mean)\n    }\n\
    \    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw3sb7ha1.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    var sum = 0.0\n \
    \   for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpgxhrjtim.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3u69dmwf.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3u69dmwf.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpa55mwszy.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpht_h4fwn.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpht_h4fwn.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6iw1z0m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpd6iw1z0m.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2w6vgrr7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2w6vgrr7.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp22hjs0wq.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp22hjs0wq.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824746
