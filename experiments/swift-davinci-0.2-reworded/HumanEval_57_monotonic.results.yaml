language: swift
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return true\n\
    \    }\n    var increasing = true\n    var decreasing = true\n    for i in 1..<n\
    \ {\n        if l[i] < l[i - 1] {\n            increasing = false\n        }\n\
    \        if l[i] > l[i - 1] {\n            decreasing = false\n        }\n   \
    \ }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ isIncreasing = l[1] > l[0]\n    for i in 2..<l.count {\n        if isIncreasing\
    \ && l[i] < l[i - 1] {\n            return false\n        }\n        if !isIncreasing\
    \ && l[i] > l[i - 1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ inc = true\n    var dec = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            inc = false\n        }\n        if l[i] > l[i - 1]\
    \ {\n            dec = false\n        }\n    }\n    return inc || dec\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ isIncreasing = l[1] > l[0]\n    for i in 2..<l.count {\n        if isIncreasing\
    \ && l[i] < l[i - 1] {\n            return false\n        }\n        if !isIncreasing\
    \ && l[i] > l[i - 1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<l.count {\n\
    \        if l[i] < l[i - 1] {\n            isIncreasing = false\n        }\n \
    \       if l[i] > l[i - 1] {\n            isDecreasing = false\n        }\n  \
    \  }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ isIncreasing = l[1] > l[0]\n    for i in 2..<l.count {\n        if isIncreasing\
    \ && l[i] < l[i - 1] {\n            return false\n        }\n        if !isIncreasing\
    \ && l[i] > l[i - 1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ increasing = l[1] > l[0]\n    for i in 1..<l.count {\n        if increasing\
    \ && l[i] < l[i - 1] {\n            return false\n        }\n        if !increasing\
    \ && l[i] > l[i - 1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ isIncreasing = l[1] > l[0]\n    for i in 1..<l.count {\n        if isIncreasing\
    \ && l[i] < l[i - 1] {\n            return false\n        }\n        if !isIncreasing\
    \ && l[i] > l[i - 1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    let\
    \ diffs = l.dropFirst().enumerated().map { (i, e) -> Int in\n        return e\
    \ - l[i]\n    }\n    let firstDiff = diffs[0]\n    return diffs.allSatisfy { (e)\
    \ -> Bool in\n        return e * firstDiff >= 0\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ isIncreasing = l[1] > l[0]\n    for i in 1..<l.count {\n        if isIncreasing\
    \ && l[i] < l[i - 1] {\n            return false\n        }\n        if !isIncreasing\
    \ && l[i] > l[i - 1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return l.sorted() == l || l.sorted().reversed() == l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var inc = true\n    var dec = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            inc = false\n        }\n        if\
    \ l[i] > l[i-1] {\n            dec = false\n        }\n    }\n    return inc ||\
    \ dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    return l.sorted() == l || l.sorted(by: >) == l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ > l[i - 1] {\n            decreasing = false\n        }\n        if l[i] < l[i\
    \ - 1] {\n            increasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n\
    \    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n   \
    \ for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing\
    \ = false\n        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
- exit_code: 0
  program: "\n/// Return true is array elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4,\
    \ 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l:\
    \ [Int]) -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820481
