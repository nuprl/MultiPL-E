language: swift
name: HumanEval_3_below_zero
results:
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    return operations.reduce(0,\
    \ +) < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpjzf8fe3v/tmpjzf8fe3v.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b40b68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b4085fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b4085f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b4085e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjzf8fe3v                        0x000055fcb2f584f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b7b40d54460 __libc_start_main +
    245

    6    tmpjzf8fe3v                        0x000055fcb2f57fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation\
    \ in operations {\n        balance += operation\n        if balance < 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
