language: swift
name: HumanEval_82_prime_length
results:
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 2 {\n        return true\n    }\n  \
    \  if length % 2 == 0 {\n        return false\n    }\n    for i in 3...length/2\
    \ {\n        if length % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b174ad22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b174aa19561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b174aa19286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b174aa1913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b174aa18bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_vps3lco                        0x0000559fd7ed3141 <unavailable> + 8513

    6    tmp_vps3lco                        0x0000559fd7ed23c6 <unavailable> + 5062

    7    libc.so.6                          0x00002b174af0e460 __libc_start_main +
    245

    8    tmp_vps3lco                        0x0000559fd7ed20c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 2 {\n        return true\n    }\n  \
    \  for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1aaa37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1aa72e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae1aa72e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae1aa72e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae1aa72dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0dbhho3q                        0x0000558d1a69afda <unavailable> + 8154

    6    tmp0dbhho3q                        0x0000558d1a69a920 <unavailable> + 6432

    7    libc.so.6                          0x00002ae1aac23460 __libc_start_main +
    245

    8    tmp0dbhho3q                        0x0000558d1a69a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length <= 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 2 {\n        return true\n    }\n  \
    \  if length % 2 == 0 {\n        return false\n    }\n    for i in 3...length\
    \ / 2 {\n        if length % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c925afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c922a6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5c922a6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5c922a613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5c922a5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz42g_5jl                        0x0000561bb68e1141 <unavailable> + 8513

    6    tmpz42g_5jl                        0x0000561bb68e03c6 <unavailable> + 5062

    7    libc.so.6                          0x00002b5c9279b460 __libc_start_main +
    245

    8    tmpz42g_5jl                        0x0000561bb68e00c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ string.count.isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnbg35uao.swift:14:25: error: value of type 'Int' has no member\
    \ 'isPrime'\n    return string.count.isPrime\n           ~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length < 2 {\n        return false\n    }\n  \
    \  for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ string.count.isPrime()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb3gir3en.swift:14:25: error: value of type 'Int' has no member\
    \ 'isPrime'\n    return string.count.isPrime()\n           ~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length < 2 {\n        return false\n    }\n  \
    \  for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    for i in 2..<length {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b32384e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32381da561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b32381da286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b32381da13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b32381d9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv5_ip56r                        0x00005646b2aedfca <unavailable> + 8138

    6    tmpv5_ip56r                        0x00005646b2aed920 <unavailable> + 6432

    7    libc.so.6                          0x00002b32386cf460 __libc_start_main +
    245

    8    tmpv5_ip56r                        0x00005646b2aed0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    var\
    \ count = 0\n    for _ in string {\n        count += 1\n    }\n    if count ==\
    \ 2 || count == 3 || count == 5 || count == 7 {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ is_prime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkhm9eb9r.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \    return is_prime(number: string.count)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length <= 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(n: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqpmo73d6.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(n: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length < 2 {\n        return false\n    }\n  \
    \  for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length < 2 {\n        return false\n    }\n  \
    \  for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length-1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a9981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a9678561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b85a9678286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b85a967813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b85a9677bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpku2dzl2x                        0x000055d8c38ed006 <unavailable> + 8198

    6    tmpku2dzl2x                        0x000055d8c38ec920 <unavailable> + 6432

    7    libc.so.6                          0x00002b85a9b6d460 __libc_start_main +
    245

    8    tmpku2dzl2x                        0x000055d8c38ec0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   if length == 2 {\n        return true\n    }\n    for i in 2..<length {\n\
    \        if length % i == 0 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d9490bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d94602561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8d94602286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8d9460213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8d94601bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_hggw6a3                        0x00005647f0c3cfee <unavailable> + 8174

    6    tmp_hggw6a3                        0x00005647f0c3c920 <unavailable> + 6432

    7    libc.so.6                          0x00002b8d94af7460 __libc_start_main +
    245

    8    tmp_hggw6a3                        0x00005647f0c3c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(num: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp770a_ao7.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(num: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length <= 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 2 {\n        return true\n    }\n  \
    \  if length % 2 == 0 {\n        return false\n    }\n    for i in 3...length/2\
    \ {\n        if length % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b174ad22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b174aa19561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b174aa19286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b174aa1913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b174aa18bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_vps3lco                        0x0000559fd7ed3141 <unavailable> + 8513

    6    tmp_vps3lco                        0x0000559fd7ed23c6 <unavailable> + 5062

    7    libc.so.6                          0x00002b174af0e460 __libc_start_main +
    245

    8    tmp_vps3lco                        0x0000559fd7ed20c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length < 2 {\n        return false\n    }\n  \
    \  for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 2 {\n        return true\n    }\n  \
    \  for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1aaa37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1aa72e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae1aa72e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae1aa72e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae1aa72dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0dbhho3q                        0x0000558d1a69afda <unavailable> + 8154

    6    tmp0dbhho3q                        0x0000558d1a69a920 <unavailable> + 6432

    7    libc.so.6                          0x00002ae1aac23460 __libc_start_main +
    245

    8    tmp0dbhho3q                        0x0000558d1a69a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    var\
    \ isPrime = true\n    let stringLength = string.count\n    for i in 2..<stringLength\
    \ {\n        if stringLength % i == 0 {\n            isPrime = false\n       \
    \ }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece6f58561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aece6f58286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aece6f5813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aece6f57bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_1k_rnph                        0x000055faab931fde <unavailable> + 8158

    6    tmp_1k_rnph                        0x000055faab931920 <unavailable> + 6432

    7    libc.so.6                          0x00002aece744d460 __libc_start_main +
    245

    8    tmp_1k_rnph                        0x000055faab9310c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(num: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp770a_ao7.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(num: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    var\
    \ isPrime = true\n    for i in 2..<string.count {\n        if string.count % i\
    \ == 0 {\n            isPrime = false\n        }\n    }\n    return isPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e43507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e431fe561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9e431fe286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9e431fe13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9e431fdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpgnebkm0f                        0x0000561a94554fca <unavailable> + 8138

    6    tmpgnebkm0f                        0x0000561a94554920 <unavailable> + 6432

    7    libc.so.6                          0x00002b9e436f3460 __libc_start_main +
    245

    8    tmpgnebkm0f                        0x0000561a945540c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length <= 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 2 {\n        return true\n    }\n  \
    \  for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1aaa37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1aa72e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae1aa72e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae1aa72e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae1aa72dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0dbhho3q                        0x0000558d1a69afda <unavailable> + 8154

    6    tmp0dbhho3q                        0x0000558d1a69a920 <unavailable> + 6432

    7    libc.so.6                          0x00002ae1aac23460 __libc_start_main +
    245

    8    tmp0dbhho3q                        0x0000558d1a69a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp3flbxo25/tmp3flbxo25.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6f8fa2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6f8c99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6f8c99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6f8c987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3flbxo25                        0x000055c630c7f43d <unavailable> + 5181

    5    libc.so.6                          0x00002ae6f918e460 __libc_start_main +
    245

    6    tmp3flbxo25                        0x000055c630c7eee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length-1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a9981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a9678561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b85a9678286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b85a967813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b85a9677bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpku2dzl2x                        0x000055d8c38ed006 <unavailable> + 8198

    6    tmpku2dzl2x                        0x000055d8c38ec920 <unavailable> + 6432

    7    libc.so.6                          0x00002b85a9b6d460 __libc_start_main +
    245

    8    tmpku2dzl2x                        0x000055d8c38ec0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ is_prime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkhm9eb9r.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \    return is_prime(number: string.count)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ is_prime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkhm9eb9r.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \    return is_prime(number: string.count)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length-1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a9981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a9678561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b85a9678286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b85a967813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b85a9677bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpku2dzl2x                        0x000055d8c38ed006 <unavailable> + 8198

    6    tmpku2dzl2x                        0x000055d8c38ec920 <unavailable> + 6432

    7    libc.so.6                          0x00002b85a9b6d460 __libc_start_main +
    245

    8    tmpku2dzl2x                        0x000055d8c38ec0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length-1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b85a9981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85a9678561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b85a9678286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b85a967813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b85a9677bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpku2dzl2x                        0x000055d8c38ed006 <unavailable> + 8198

    6    tmpku2dzl2x                        0x000055d8c38ec920 <unavailable> + 6432

    7    libc.so.6                          0x00002b85a9b6d460 __libc_start_main +
    245

    8    tmpku2dzl2x                        0x000055d8c38ec0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 2 {\n        return true\n    }\n  \
    \  if length % 2 == 0 {\n        return false\n    }\n    for i in 3...length/2\
    \ {\n        if length % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b174ad22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b174aa19561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b174aa19286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b174aa1913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b174aa18bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_vps3lco                        0x0000559fd7ed3141 <unavailable> + 8513

    6    tmp_vps3lco                        0x0000559fd7ed23c6 <unavailable> + 5062

    7    libc.so.6                          0x00002b174af0e460 __libc_start_main +
    245

    8    tmp_vps3lco                        0x0000559fd7ed20c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ isPrime(number: string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_length(string:\
    \ \"Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpij1vu1br.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \   return isPrime(number: string.count)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824495
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    var\
    \ isPrime = true\n    for i in 2..<string.count {\n        if string.count % i\
    \ == 0 {\n            isPrime = false\n        }\n    }\n    return isPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e43507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e431fe561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9e431fe286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9e431fe13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9e431fdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpgnebkm0f                        0x0000561a94554fca <unavailable> + 8138

    6    tmpgnebkm0f                        0x0000561a94554920 <unavailable> + 6432

    7    libc.so.6                          0x00002b9e436f3460 __libc_start_main +
    245

    8    tmpgnebkm0f                        0x0000561a945540c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_length(string: \"\
    Hello\") == true)\nassert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string:\
    \ \"kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
    \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
    \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
    \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
    \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
    \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
    assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
    ) == false)"
  status: Exception
  stderr: 'tmp07teweki/tmp07teweki.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bead9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2beaa91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2beaa91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2beaa907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07teweki                        0x0000564b7a67425b <unavailable> + 4699

    5    libc.so.6                          0x00002b2beaf86460 __libc_start_main +
    245

    6    tmp07teweki                        0x0000564b7a673ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2..<length {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string: \"\
    abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c7b65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c785c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b33c785c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b33c785c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b33c785bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxqmv4set                        0x000055b80e4a5fda <unavailable> + 8154

    6    tmpxqmv4set                        0x000055b80e4a5920 <unavailable> + 6432

    7    libc.so.6                          0x00002b33c7d51460 __libc_start_main +
    245

    8    tmpxqmv4set                        0x000055b80e4a50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns true if the string\n\
    /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string:\
    \ \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n\
    /// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string:\
    \ \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let\
    \ length = string.count\n    if length == 1 {\n        return false\n    }\n \
    \   for i in 2...length - 1 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_length(string: \"Hello\") == true)\nassert(prime_length(string:\
    \ \"abcdcba\") == true)\nassert(prime_length(string: \"kittens\") == true)\nassert(prime_length(string:\
    \ \"orange\") == false)\nassert(prime_length(string: \"wow\") == true)\nassert(prime_length(string:\
    \ \"world\") == true)\nassert(prime_length(string: \"MadaM\") == true)\nassert(prime_length(string:\
    \ \"Wow\") == true)\nassert(prime_length(string: \"\") == false)\nassert(prime_length(string:\
    \ \"HI\") == true)\nassert(prime_length(string: \"go\") == true)\nassert(prime_length(string:\
    \ \"gogo\") == false)\nassert(prime_length(string: \"aaaaaaaaaaaaaaa\") == false)\n\
    assert(prime_length(string: \"Madam\") == true)\nassert(prime_length(string: \"\
    M\") == false)\nassert(prime_length(string: \"0\") == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3100f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3100c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3100c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3100c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3100c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpr016gtoq                        0x00005599a1aa4006 <unavailable> + 8198

    6    tmpr016gtoq                        0x00005599a1aa3920 <unavailable> + 6432

    7    libc.so.6                          0x00002b3101125460 __libc_start_main +
    245

    8    tmpr016gtoq                        0x00005599a1aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824496
