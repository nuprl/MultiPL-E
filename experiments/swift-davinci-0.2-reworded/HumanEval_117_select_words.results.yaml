language: swift
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt93ko_kb.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count == n {\n            result.append(word)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5741_es6.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String]\
    \ = []\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words =\
    \ s.components(separatedBy: \" \")\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmplxymmj8v.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { $0.count == n }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpjinje2hl/tmpjinje2hl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4a6ebac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4a6bb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4a6bb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4a6bb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjinje2hl                        0x00005584a3869904 <unavailable> + 6404

    5    libc.so.6                          0x00002ab4a70a6460 __libc_start_main +
    245

    6    tmpjinje2hl                        0x00005584a3869509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiou\")\n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfhjbxgby.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr9us1pn3.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result: [String] =\
    \ []\n    for word in words {\n        var count = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                count += 1\n   \
    \         }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe1o86jtp.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    words = words.filter { $0.count == n }\n    return words\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkkuza6mu.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count == n {\n            result.append(word)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5741_es6.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       var count = 0\n        for letter in word {\n            if letter !=\
    \ \"a\" && letter != \"e\" && letter != \"i\" && letter != \"o\" && letter !=\
    \ \"u\" {\n                count += 1\n            }\n        }\n        if count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpllbh06bm.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for char in s {\n        if\
    \ char == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            if !isVowel(char: char) {\n                consonants +=\
    \ 1\n            }\n            word.append(char)\n        }\n    }\n    if consonants\
    \ == n {\n        words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvsj4sma2.swift:30:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjna9qe_j.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result: [String] =\
    \ []\n    for word in words {\n        var count = 0\n        for letter in word\
    \ {\n            if !vowels.contains(letter) {\n                count += 1\n \
    \           }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx_w0n0o_.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let arr = s.lowercased().components(separatedBy: \" \")\n    for word in\
    \ arr {\n        var count = 0\n        for char in word {\n            if consonants.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            words.append(word)\n        }\n    }\n    return words\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hnvd8lb.swift:22:30: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.lowercased().components(separatedBy: \" \")\n\
    \              ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\" {\n      \
    \          consonants += 1\n            }\n        }\n        if consonants ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnmi2f540.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu_zbe2r1.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var consonants = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter)) {\n             \
    \   consonants += 1\n            }\n        }\n        if consonants == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpoxzrb3jk/tmpoxzrb3jk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3464455c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b346414cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b346414c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b346414b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoxzrb3jk                        0x000055c25345af2b <unavailable> + 7979

    5    libc.so.6                          0x00002b3464641460 __libc_start_main +
    245

    6    tmpoxzrb3jk                        0x000055c25345a619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for letter in word\
    \ {\n            if !vowels.contains(letter) {\n                consonants +=\
    \ 1\n            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7f6pettf.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter {\n        $0.filter {\n            ![\"a\", \"e\", \"i\", \"\
    o\", \"u\"].contains($0.lowercased())\n        }.count == n\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcvjl0l3m.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter {\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if !isVowel(letter: letter) {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmde2srd7.swift:24:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(letter: letter) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if count_consonants(s: word) == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgxhc3e90.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for char in word {\n            if char != \"a\" && char != \"\
    e\" && char != \"i\" && char != \"o\" && char != \"u\" {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp207aqmh3/tmp207aqmh3.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac864c12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac864909b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac864909988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8649087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp207aqmh3                        0x00005610c3f85ecb <unavailable> + 7883

    5    libc.so.6                          0x00002ac864dfe460 __libc_start_main +
    245

    6    tmp207aqmh3                        0x00005610c3f855b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        var\
    \ count = 0\n        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3xpc8u6u.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            let char = String(char)\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7b4pqu75.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr9us1pn3.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for char in s {\n        if\
    \ char == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(char)\n            if !isVowel(char: char)\
    \ {\n                consonants += 1\n            }\n        }\n    }\n    if\
    \ consonants == n {\n        words.append(word)\n    }\n    return words\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvu8enwya.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\"]\n    var result = [String]()\n    for word in words {\n      \
    \  var count = 0\n        for letter in word {\n            if consonants.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmzxk6ghd.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var\
    \ words = s.components(separatedBy: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if consonants.contains(char) {\n                count += 1\n           \
    \ }\n        }\n        if count == n {\n            result.append(word)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk6ax0hdf.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5r3d48xs.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result: [String] = []\n \
    \   for word in words {\n        var count = 0\n        for char in word {\n \
    \           if !vowels.contains(char) {\n                count += 1\n        \
    \    }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpo6lezthf/tmpo6lezthf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af78560ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af785301b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af785301988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7853007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6lezthf                        0x0000560c7399debb <unavailable> + 7867

    5    libc.so.6                          0x00002af7857f6460 __libc_start_main +
    245

    6    tmpo6lezthf                        0x0000560c7399d5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr9us1pn3.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu_zbe2r1.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for char in s {\n        if\
    \ char == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(char)\n            if !isVowel(char: char)\
    \ {\n                consonants += 1\n            }\n        }\n    }\n    if\
    \ consonants == n {\n        words.append(word)\n    }\n    return words\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvu8enwya.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcjr83nj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            if !vowels.contains(String(char)) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp5zflidr_/tmp5zflidr_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19da5aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19da2a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19da2a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19da2a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5zflidr_                        0x000055d2ec761b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b19da79a460 __libc_start_main +
    245

    6    tmp5zflidr_                        0x000055d2ec761619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            if !vowels.contains(String(char)) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp5zflidr_/tmp5zflidr_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19da5aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19da2a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19da2a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19da2a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5zflidr_                        0x000055d2ec761b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b19da79a460 __libc_start_main +
    245

    6    tmp5zflidr_                        0x000055d2ec761619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiouAEIOU\")\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpefrgkjs1.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmps36n3jfx/tmps36n3jfx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2411f4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2411c43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2411c43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2411c427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps36n3jfx                        0x000055c1a3b7cb69 <unavailable> + 7017

    5    libc.so.6                          0x00002b2412138460 __libc_start_main +
    245

    6    tmps36n3jfx                        0x000055c1a3b7c619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for character in s {\n     \
    \   if character == \" \" {\n            if consonants == n {\n              \
    \  words.append(word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n        } else {\n            word += String(character)\n            if\
    \ !isVowel(character: character) {\n                consonants += 1\n        \
    \    }\n        }\n    }\n    if consonants == n {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvkl2xtm8.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(character: character) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var consonants = 0\n        for letter in word\
    \ {\n            if !vowels.contains(letter) {\n                consonants +=\
    \ 1\n            }\n        }\n        if consonants == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp5j_dgs22/tmp5j_dgs22.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5d6491c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5d6188b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5d6188988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5d61877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5j_dgs22                        0x0000557aaf9e0f1b <unavailable> + 7963

    5    libc.so.6                          0x00002af5d667d460 __libc_start_main +
    245

    6    tmp5j_dgs22                        0x0000557aaf9e0609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       var consonants = 0\n        for char in word {\n            if !isVowel(char:\
    \ char) {\n                consonants += 1\n            }\n        }\n       \
    \ if consonants == n {\n            result.append(word)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcn8k3bkr.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5r3d48xs.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjna9qe_j.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !isVowel(char: char) {\n   \
    \             count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp00fhp0dr.swift:24:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(String(char)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpn5eas9xj/tmpn5eas9xj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b335cd80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b335ca77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b335ca77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b335ca767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn5eas9xj                        0x0000557d23e4af2b <unavailable> + 7979

    5    libc.so.6                          0x00002b335cf6c460 __libc_start_main +
    245

    6    tmpn5eas9xj                        0x0000557d23e4a619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf0iuyub3.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr9us1pn3.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr9us1pn3.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu_zbe2r1.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \" \")\n   \
    \ var result = [String]()\n    for word in words {\n        var consonants = 0\n\
    \        for char in word {\n            if !vowels.contains(String(char)) {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmps3tykdeb/tmps3tykdeb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9250de6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9250addb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9250add988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9250adc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3tykdeb                        0x000055e10ee65f2b <unavailable> + 7979

    5    libc.so.6                          0x00002b9250fd2460 __libc_start_main +
    245

    6    tmps3tykdeb                        0x000055e10ee65619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt93ko_kb.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjna9qe_j.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let s_array\
    \ = s.lowercased().split(separator: \" \")\n    for word in s_array {\n      \
    \  var count = 0\n        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            words.append(String(word))\n        }\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpg05du9s9/tmpg05du9s9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b778d81ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b778d511b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b778d511988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b778d5107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg05du9s9                        0x0000559f9cd07bb9 <unavailable> + 7097

    5    libc.so.6                          0x00002b778da06460 __libc_start_main +
    245

    6    tmpg05du9s9                        0x0000559f9cd07669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt93ko_kb.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwzqn3kv8.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt93ko_kb.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\" {\n      \
    \          consonants += 1\n            }\n        }\n        if consonants ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnmi2f540.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2ro96wtj/tmp2ro96wtj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c80f33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c80c2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c80c2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c80c297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ro96wtj                        0x00005613aaf75f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7c8111f460 __libc_start_main +
    245

    6    tmp2ro96wtj                        0x00005613aaf75609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator: \" \")\n   \
    \ var result = [String]()\n    for word in words {\n        var count = 0\n  \
    \      for char in word {\n            if !vowels.contains(String(char)) {\n \
    \               count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpscrlrvh9/tmpscrlrvh9.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b483501dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4834d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4834d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4834d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpscrlrvh9                        0x000055b082f5af2b <unavailable> + 7979

    5    libc.so.6                          0x00002b4835209460 __libc_start_main +
    245

    6    tmpscrlrvh9                        0x000055b082f5a619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwzqn3kv8.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5r3d48xs.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf0iuyub3.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result: [String] =\
    \ []\n    for word in words {\n        var consonants = 0\n        for letter\
    \ in word {\n            if !vowels.contains(letter) {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpabn34etx.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt93ko_kb.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpszdk81_5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5r3d48xs.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmps_y2pv7d.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count == n {\n            result.append(word)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5741_es6.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4smyw__s.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr9us1pn3.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter).lowercased()) {\n   \
    \             count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmplnxeyslx.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    for char in s {\n        if char == \" \" {\n      \
    \      if count_consonants(word) == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n        } else {\n            word +=\
    \ String(char)\n        }\n    }\n    if count_consonants(word) == n {\n     \
    \   words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfihi5kac.swift:23:16: error: cannot find 'count_consonants' in\
    \ scope\n            if count_consonants(word) == n {\n               ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpfihi5kac.swift:31:8: error: cannot find 'count_consonants' in scope\n\
    \    if count_consonants(word) == n {\n       ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if !isVowel(letter: letter) {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmde2srd7.swift:24:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(letter: letter) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if consonants.contains(char) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpfr48u5nq/tmpfr48u5nq.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adecd1eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adeccee5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adeccee5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adeccee47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfr48u5nq                        0x0000560f96334b59 <unavailable> + 7001

    5    libc.so.6                          0x00002adecd3da460 __libc_start_main +
    245

    6    tmpfr48u5nq                        0x0000560f96334609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        var\
    \ count = 0\n        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3xpc8u6u.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter).lowercased()) {\n   \
    \             count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmplnxeyslx.swift:21:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = s.lowercased().split(separator:\
    \ \" \")\n    for letter in letters {\n        var count = 0\n        for char\
    \ in letter {\n            if !vowels.contains(String(char)) {\n             \
    \   count += 1\n            }\n        }\n        if count == n {\n          \
    \  words.append(String(letter))\n        }\n    }\n    return words\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpkb_atwdw/tmpkb_atwdw.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d5b865c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5b55cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d5b55c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d5b55b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkb_atwdw                        0x000055d046b77bb9 <unavailable> + 7097

    5    libc.so.6                          0x00002b2d5ba51460 __libc_start_main +
    245

    6    tmpkb_atwdw                        0x000055d046b77669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr9us1pn3.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let stringArray\
    \ = s.lowercased().components(separatedBy: \" \")\n    for word in stringArray\
    \ {\n        var consonantCount = 0\n        for char in word {\n            if\
    \ consonants.contains(String(char)) {\n                consonantCount += 1\n \
    \           }\n        }\n        if consonantCount == n {\n            words.append(word)\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6l3x869t.swift:22:38: error: value of type 'String' has no member\
    \ 'components'\n    let stringArray = s.lowercased().components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.split(separator:\
    \ \" \")\n    var consonants = 0\n    var result = [String]()\n    for word in\
    \ words {\n        for letter in word {\n            if letter == \"a\" || letter\
    \ == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\" {\n      \
    \          continue\n            } else {\n                consonants += 1\n \
    \           }\n        }\n        if consonants == n {\n            result.append(String(word))\n\
    \        }\n        consonants = 0\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2onfv_1k/tmp2onfv_1k.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9d95efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9d92e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9d92e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9d92e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2onfv_1k                        0x0000559ead3efecb <unavailable> + 7883

    5    libc.so.6                          0x00002ab9d97db460 __libc_start_main +
    245

    6    tmp2onfv_1k                        0x0000559ead3ef5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcjr83nj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpb0byxez7/tmpb0byxez7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c8b6e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c8b3dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c8b3da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c8b3d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0byxez7                        0x000055a03493d4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b9c8b8cf460 __libc_start_main +
    245

    6    tmpb0byxez7                        0x000055a03493d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiouAEIOU\")\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpefrgkjs1.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for char in s {\n        if\
    \ char == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(char)\n            if !isVowel(char: char)\
    \ {\n                consonants += 1\n            }\n        }\n    }\n    if\
    \ consonants == n {\n        words.append(word)\n    }\n    return words\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvu8enwya.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       var consonants = 0\n        for char in word {\n            if !isVowel(char:\
    \ char) {\n                consonants += 1\n            }\n        }\n       \
    \ if consonants == n {\n            result.append(word)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcn8k3bkr.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let word = s.split(separator: \" \")\n    for i in word {\n        var count\
    \ = 0\n        for j in i {\n            if !vowels.contains(j) {\n          \
    \      count += 1\n            }\n        }\n        if count == n {\n       \
    \     words.append(String(i))\n        }\n    }\n    return words\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpq39_v_3a/tmpq39_v_3a.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79374adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79371a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79371a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79371a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq39_v_3a                        0x000056162c308f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b7937699460 __libc_start_main +
    245

    6    tmpq39_v_3a                        0x000056162c308609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    // your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpwl8fpa5q/tmpwl8fpa5q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98d1af2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98d17e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98d17e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98d17e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwl8fpa5q                        0x000055d0af6a94c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b98d1cde460 __libc_start_main +
    245

    6    tmpwl8fpa5q                        0x000055d0af6a90c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        var\
    \ count = 0\n        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3xpc8u6u.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5r3d48xs.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiouAEIOU\")\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var consonants = 0\n        for\
    \ char in word {\n            if !vowels.contains(char) {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp65ers3zu.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for char in s {\n        if\
    \ char.isLetter {\n            word.append(char)\n            if !char.isVowel\
    \ {\n                consonants += 1\n            }\n        } else {\n      \
    \      if consonants == n {\n                words.append(word)\n            }\n\
    \            word = \"\"\n            consonants = 0\n        }\n    }\n    if\
    \ consonants == n {\n        words.append(word)\n    }\n    return words\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmprp5o3qou.swift:25:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n            if !char.isVowel {\n                ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for char in s {\n        if\
    \ char == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(char)\n            if !isVowel(char: char)\
    \ {\n                consonants += 1\n            }\n        }\n    }\n    if\
    \ consonants == n {\n        words.append(word)\n    }\n    return words\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvu8enwya.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmphvf5kcca.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count == n {\n            result.append(word)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5741_es6.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiouAEIOU\")\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpefrgkjs1.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for letter in s {\n        if\
    \ letter == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(letter)\n            if !isVowel(letter:\
    \ letter) {\n                consonants += 1\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words.append(word)\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_s2xr9nm.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(letter: letter) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter {\n        $0.filter {\n            ![\"a\", \"e\", \"i\", \"\
    o\", \"u\"].contains($0.lowercased())\n        }.count == n\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcvjl0l3m.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter {\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator: \" \"\
    )\n    var result: [String] = []\n    for word in words {\n        var count =\
    \ 0\n        for char in word {\n            if !vowels.contains(String(char))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmppmgsuaha/tmppmgsuaha.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89f25d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89f22ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89f22cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89f22cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmgsuaha                        0x00005591530efb09 <unavailable> + 6921

    5    libc.so.6                          0x00002b89f27c1460 __libc_start_main +
    245

    6    tmppmgsuaha                        0x00005591530ef5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for letter in word {\n \
    \           if !vowels.contains(letter) {\n                count += 1\n      \
    \      }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpcvjd4s14/tmpcvjd4s14.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3368c14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b336890bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b336890b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b336890a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcvjd4s14                        0x000055c10cce9f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b3368e00460 __libc_start_main +
    245

    6    tmpcvjd4s14                        0x000055c10cce9609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpszdk81_5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if word.count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr9us1pn3.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiou\")\n    let words = s.split(separator: \" \")\n    return words.filter {\
    \ word in\n        word.filter { !vowels.contains($0) }.count == n\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzl89ekd5.swift:21:18: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return words.filter { word in\n                 ^\n/tmp/tmpzl89ekd5.swift:21:18:\
    \ note: arguments to generic parameter 'Element' ('String.SubSequence' (aka 'Substring')\
    \ and 'String') are expected to be equal\n    return words.filter { word in\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpszdk81_5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let arr = s.components(separatedBy: \" \")\n    for word in arr {\n     \
    \   var count = 0\n        for char in word {\n            if consonants.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            words.append(word)\n        }\n    }\n    return words\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfz9zb4nr.swift:22:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcjr83nj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            if !vowels.contains(String(char)) {\n\
    \                count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp5zflidr_/tmp5zflidr_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19da5aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19da2a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19da2a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19da2a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5zflidr_                        0x000055d2ec761b69 <unavailable> + 7017

    5    libc.so.6                          0x00002b19da79a460 __libc_start_main +
    245

    6    tmp5zflidr_                        0x000055d2ec761619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiou\")\n    let words = s.components(separatedBy: \" \")\n    return words.filter\
    \ { word in\n        word.filter { !vowels.contains($0) }.count == n\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpddhpeav9.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4smyw__s.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmps36n3jfx/tmps36n3jfx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2411f4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2411c43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2411c43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2411c427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps36n3jfx                        0x000055c1a3b7cb69 <unavailable> + 7017

    5    libc.so.6                          0x00002b2412138460 __libc_start_main +
    245

    6    tmps36n3jfx                        0x000055c1a3b7c619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcjr83nj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var consonants = 0\n        for letter\
    \ in word {\n            if !vowels.contains(String(letter)) {\n             \
    \   consonants += 1\n            }\n        }\n        if consonants == n {\n\
    \            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpoxzrb3jk/tmpoxzrb3jk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3464455c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b346414cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b346414c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b346414b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoxzrb3jk                        0x000055c25345af2b <unavailable> + 7979

    5    libc.so.6                          0x00002b3464641460 __libc_start_main +
    245

    6    tmpoxzrb3jk                        0x000055c25345a619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp06hoksx0.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for char in s {\n        if\
    \ char == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(char)\n            if !isVowel(char: char)\
    \ {\n                consonants += 1\n            }\n        }\n    }\n    if\
    \ consonants == n {\n        words.append(word)\n    }\n    return words\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvu8enwya.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiou\")\n    return s.split(separator: \" \").filter { word in\n        word.filter\
    \ { !vowels.contains($0) }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp47ig_0oz.swift:20:36: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \    return s.split(separator: \" \").filter { word in\n                     \
    \              ^\n/tmp/tmp47ig_0oz.swift:20:36: note: arguments to generic parameter\
    \ 'Element' ('String.SubSequence' (aka 'Substring') and 'String') are expected\
    \ to be equal\n    return s.split(separator: \" \").filter { word in\n       \
    \                            ^\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if !isVowel(letter: letter) {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp728uoazl.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { $0.count == n }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpjinje2hl/tmpjinje2hl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4a6ebac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4a6bb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4a6bb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4a6bb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjinje2hl                        0x00005584a3869904 <unavailable> + 6404

    5    libc.so.6                          0x00002ab4a70a6460 __libc_start_main +
    245

    6    tmpjinje2hl                        0x00005584a3869509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcjr83nj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count == n {\n            result.append(word)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5741_es6.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmps36n3jfx/tmps36n3jfx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2411f4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2411c43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2411c43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2411c427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps36n3jfx                        0x000055c1a3b7cb69 <unavailable> + 7017

    5    libc.so.6                          0x00002b2412138460 __libc_start_main +
    245

    6    tmps36n3jfx                        0x000055c1a3b7c619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    return words.filter {\
    \ (word) -> Bool in\n        word.filter { (char) -> Bool in\n            !vowels.contains(char)\n\
    \        }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa4kwx5rs.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(String(char)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpn5eas9xj/tmpn5eas9xj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b335cd80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b335ca77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b335ca77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b335ca767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn5eas9xj                        0x0000557d23e4af2b <unavailable> + 7979

    5    libc.so.6                          0x00002b335cf6c460 __libc_start_main +
    245

    6    tmpn5eas9xj                        0x0000557d23e4a619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcjr83nj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result: [String] = []\n \
    \   for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpfef76jlt/tmpfef76jlt.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afccb58cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afccb283b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afccb283988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afccb2827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfef76jlt                        0x000056066173debb <unavailable> + 7867

    5    libc.so.6                          0x00002afccb778460 __libc_start_main +
    245

    6    tmpfef76jlt                        0x000056066173d5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiou\")\n    let words = s.split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp1rswmqu9/tmp1rswmqu9.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4c1232c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4c0f29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4c0f29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4c0f287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1rswmqu9                        0x00005629dab0cfeb <unavailable> + 8171

    5    libc.so.6                          0x00002ab4c141e460 __libc_start_main +
    245

    6    tmp1rswmqu9                        0x00005629dab0c6d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    for char in s {\n        if char == \" \" {\n      \
    \      if count_consonants(word) == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n        } else {\n            word +=\
    \ String(char)\n        }\n    }\n    if count_consonants(word) == n {\n     \
    \   words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfihi5kac.swift:23:16: error: cannot find 'count_consonants' in\
    \ scope\n            if count_consonants(word) == n {\n               ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpfihi5kac.swift:31:8: error: cannot find 'count_consonants' in scope\n\
    \    if count_consonants(word) == n {\n       ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let split = s.split(separator: \" \")\n    for word in split {\n        var\
    \ count = 0\n        for char in word {\n            if consonants.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            words.append(String(word))\n        }\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpfqi2heim/tmpfqi2heim.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb9777ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb97475b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb97475988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb974747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfqi2heim                        0x0000559b382e0b59 <unavailable> + 7001

    5    libc.so.6                          0x00002aeb9796a460 __libc_start_main +
    245

    6    tmpfqi2heim                        0x0000559b382e0609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcjr83nj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu_zbe2r1.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5r3d48xs.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp06hoksx0.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if letter == \"a\" || letter\
    \ == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\" {\n      \
    \          count += 1\n            }\n        }\n        if count == n {\n   \
    \         result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb9o0cy1z.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String]\
    \ = []\n    let words = s.split(separator: \" \")\n    for word in words {\n \
    \       var consonants = 0\n        for char in word {\n            if char !=\
    \ \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char != \"u\" {\n\
    \                consonants += 1\n            }\n        }\n        if consonants\
    \ == n {\n            result.append(String(word))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpf5jrtjxk/tmpf5jrtjxk.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dcd285c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dccf7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dccf7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dccf7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5jrtjxk                        0x000055a12a0b0e7b <unavailable> + 7803

    5    libc.so.6                          0x00002b1dcd471460 __libc_start_main +
    245

    6    tmpf5jrtjxk                        0x000055a12a0b0569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu_zbe2r1.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count == n {\n            result.append(word)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5741_es6.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    for word in s.components(separatedBy: \" \") {\n        if word.count ==\
    \ n {\n            words.append(word)\n        }\n    }\n    return words\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx0_mfwwm.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    let words\
    \ = s.components(separatedBy: \" \")\n    var result = [String]()\n    for word\
    \ in words {\n        var count = 0\n        for char in word {\n            if\
    \ !vowels.contains(String(char)) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(word)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0znn6lsj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for c in s {\n        if c ==\
    \ \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(c)\n            if !isVowel(c: c) {\n   \
    \             consonants += 1\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq6o1z_vr.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(c: c) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for letter in word\
    \ {\n            if !vowels.contains(letter) {\n                consonants +=\
    \ 1\n            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7f6pettf.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcjr83nj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    var words = s.split(separator: \" \"\
    )\n    var result: [String] = []\n    for word in words {\n        var count =\
    \ 0\n        for char in word {\n            if !vowels.contains(String(char))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpodn0w78_/tmpodn0w78_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2dabfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2d7b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2d7b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2d7b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodn0w78_                        0x000055da870d5b09 <unavailable> + 6921

    5    libc.so.6                          0x00002b7a2dcab460 __libc_start_main +
    245

    6    tmpodn0w78_                        0x000055da870d55b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.split(separator:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ String(word)) == n {\n            result.append(String(word))\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd_tdi9nz.swift:22:12: error: cannot find 'count_consonants' in\
    \ scope\n        if count_consonants(s: String(word)) == n {\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5r3d48xs.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt93ko_kb.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter)) {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp0gr8p75w/tmp0gr8p75w.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ab9c81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ab9978b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ab9978988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ab99777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gr8p75w                        0x000055ef6f7eaf2b <unavailable> + 7979

    5    libc.so.6                          0x00002b4ab9e6d460 __libc_start_main +
    245

    6    tmp0gr8p75w                        0x000055ef6f7ea619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpszdk81_5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result: [String] = []\n    for word in words {\n        var\
    \ count = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6xia3wx_.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if countConsonants(word:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5t621t7x.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count == n {\n            result.append(word)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5741_es6.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var count = 0\n        for char in word {\n   \
    \         if !vowels.contains(char) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpumib35y_/tmpumib35y_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dedd56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5deda4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5deda4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5deda4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumib35y_                        0x00005621b2641f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5dedf42460 __libc_start_main +
    245

    6    tmpumib35y_                        0x00005621b2641609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count == n {\n            result.append(word)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5741_es6.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcjr83nj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc5i5rgoc.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if char != \"a\" && char != \"\
    e\" && char != \"i\" && char != \"o\" && char != \"u\" {\n                count\
    \ += 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd1j4qyos.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       var consonants = 0\n        for char in word {\n            if !isVowel(char:\
    \ char) {\n                consonants += 1\n            }\n        }\n       \
    \ if consonants == n {\n            result.append(word)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcn8k3bkr.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcjr83nj.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var consonants\
    \ = 0\n        for letter in word {\n            if letter != \"a\" && letter\
    \ != \"e\" && letter != \"i\" && letter != \"o\" && letter != \"u\" {\n      \
    \          consonants += 1\n            }\n        }\n        if consonants ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnmi2f540.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        if count_consonants(s:\
    \ word) == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5r3d48xs.swift:19:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"\
    aeiouAEIOU\")\n    let words = s.components(separatedBy: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        var count = 0\n        for char\
    \ in word {\n            if !vowels.contains(char) {\n                count +=\
    \ 1\n            }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpefrgkjs1.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpszdk81_5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt93ko_kb.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.split(separator: \" \")\n    for word in words {\n        var\
    \ count = 0\n        for letter in word {\n            if !isVowel(letter: letter)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_beuxl4r.swift:24:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(letter: letter) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt93ko_kb.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpie6vdib5.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjna9qe_j.swift:20:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc5i5rgoc.swift:19:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014106
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"]\n    let words = s.split(separator: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter))\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmps36n3jfx/tmps36n3jfx.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2411f4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2411c43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2411c43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2411c427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps36n3jfx                        0x000055c1a3b7cb69 <unavailable> + 7017

    5    libc.so.6                          0x00002b2412138460 __libc_start_main +
    245

    6    tmps36n3jfx                        0x000055c1a3b7c619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014105
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns an array of all words from string s\
    \ that contain exactly \n/// n consonants, in order these words appear in the\
    \ string s.\n/// If the string s is empty then the function should return an empty\
    \ array.\n/// Note: you may assume the input string contains only letters and\
    \ spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\",\
    \ n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\"\
    , n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\"\
    , n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n\
    /// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"\
    ]\nfunc select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for char in s {\n        if\
    \ char == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += String(char)\n            if !isVowel(char: char)\
    \ {\n                consonants += 1\n            }\n        }\n    }\n    if\
    \ consonants == n {\n        words.append(word)\n    }\n    return words\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvu8enwya.swift:31:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(char: char) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014105
