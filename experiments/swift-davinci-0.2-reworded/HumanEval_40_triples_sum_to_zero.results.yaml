language: swift
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n\
    \            for k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0...l.count - 3 {\n        for j in i + 1...l.count\
    \ - 2 {\n            for k in j + 1...l.count - 1 {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for\
    \ k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n\
    \            for k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count - 2 {\n        var j = i + 1\n        var k = l.count\
    \ - 1\n        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n     \
    \           return true\n            } else if l[i] + l[j] + l[k] < 0 {\n    \
    \            j += 1\n            } else {\n                k -= 1\n          \
    \  }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b527f3ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b527f0f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b527f0f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b527f0f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b527f0f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppk2c4q74                        0x0000556454846f10 <unavailable> + 7952

    6    tmppk2c4q74                        0x0000556454846aee <unavailable> + 6894

    7    libc.so.6                          0x00002b527f5eb460 __libc_start_main +
    245

    8    tmppk2c4q74                        0x00005564548462c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 2\
    \ {\n        let a = sorted[i]\n        var j = i + 1\n        var k = sorted.count\
    \ - 1\n        while j < k {\n            let b = sorted[j]\n            let c\
    \ = sorted[k]\n            if a + b + c == 0 {\n                return true\n\
    \            } else if a + b + c < 0 {\n                j += 1\n            }\
    \ else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n\
    \            for k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n\
    \            for k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpcicnle5h/tmpcicnle5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0573df8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0573aefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0573aef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0573aee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcicnle5h                        0x000056042b23c490 <unavailable> + 5264

    5    libc.so.6                          0x00002b0573fe4460 __libc_start_main +
    245

    6    tmpcicnle5h                        0x000056042b23bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in i+1..<l.count {\n            let sum\
    \ = l[i] + l[j]\n            let target = -sum\n            if binary_search(l:\
    \ l, target: target, start: j+1, end: l.count-1) {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeeq67bzo.swift:22:16: error: cannot find 'binary_search' in scope\n\
    \            if binary_search(l: l, target: target, start: j+1, end: l.count-1)\
    \ {\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpu4l5w2bv/tmpu4l5w2bv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b121fedfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121fbd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121fbd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121fbd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4l5w2bv                        0x000055a8cab7e490 <unavailable> + 5264

    5    libc.so.6                          0x00002b12200cb460 __libc_start_main +
    245

    6    tmpu4l5w2bv                        0x000055a8cab7df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n\
    \            for k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var l = l\n    l.sort()\n    for i in 0..<l.count-2 {\n  \
    \      var j = i+1\n        var k = l.count-1\n        while j < k {\n       \
    \     if l[i] + l[j] + l[k] == 0 {\n                return true\n            }\
    \ else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n            } else\
    \ {\n                k -= 1\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function!\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp_t6b0a3_/tmp_t6b0a3_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b47f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b44eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5b44ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5b44ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_t6b0a3_                        0x00005588ceba9490 <unavailable> + 5264

    5    libc.so.6                          0x00002ae5b49e3460 __libc_start_main +
    245

    6    tmp_t6b0a3_                        0x00005588ceba8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var set = Set<Int>()\n    for\
    \ i in l {\n        if set.contains(-i) {\n            return true\n        }\n\
    \        set.insert(i)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpd0kmgkrc/tmpd0kmgkrc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0540ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0540ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0540ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0540ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0kmgkrc                        0x000055e49e80668b <unavailable> + 5771

    5    libc.so.6                          0x00002b0540fcb460 __libc_start_main +
    245

    6    tmpd0kmgkrc                        0x000055e49e806229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count {\n   \
    \     for j in i+1..<l.count {\n            for k in j+1..<l.count {\n       \
    \         if l[i] + l[j] + l[k] == 0 {\n                    return true\n    \
    \            }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbhae163b/tmpbhae163b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721b229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721af20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721af20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721af1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhae163b                        0x0000556b4db49490 <unavailable> + 5264

    5    libc.so.6                          0x00002b721b415460 __libc_start_main +
    245

    6    tmpbhae163b                        0x0000556b4db48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbgafhrty/tmpbgafhrty.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b476867ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4768371b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4768371988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47683707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgafhrty                        0x00005568d24d0490 <unavailable> + 5264

    5    libc.so.6                          0x00002b4768866460 __libc_start_main +
    245

    6    tmpbgafhrty                        0x00005568d24cff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbhae163b/tmpbhae163b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721b229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721af20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721af20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721af1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhae163b                        0x0000556b4db49490 <unavailable> + 5264

    5    libc.so.6                          0x00002b721b415460 __libc_start_main +
    245

    6    tmpbhae163b                        0x0000556b4db48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count {\n   \
    \     for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n   \
    \             if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for\
    \ k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for\
    \ k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count {\n   \
    \     for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n   \
    \             if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpu4l5w2bv/tmpu4l5w2bv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b121fedfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121fbd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121fbd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121fbd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4l5w2bv                        0x000055a8cab7e490 <unavailable> + 5264

    5    libc.so.6                          0x00002b12200cb460 __libc_start_main +
    245

    6    tmpu4l5w2bv                        0x000055a8cab7df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var set = Set<Int>()\n    for i in 0..<l.count {\n       \
    \ for j in (i+1)..<l.count {\n            if set.contains(-(l[i] + l[j])) {\n\
    \                return true\n            }\n        }\n        set.insert(l[i])\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpt5bb15ht/tmpt5bb15ht.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae042a3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae042733b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae042733988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0427327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5bb15ht                        0x000055fdfddc3490 <unavailable> + 5264

    5    libc.so.6                          0x00002ae042c28460 __libc_start_main +
    245

    6    tmpt5bb15ht                        0x000055fdfddc2f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2 {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var set = Set<Int>()\n    for i in 0..<l.count {\n       \
    \ for j in i+1..<l.count {\n            if set.contains(-(l[i] + l[j])) {\n  \
    \              return true\n            }\n        }\n        set.insert(l[i])\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbhae163b/tmpbhae163b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721b229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721af20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721af20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721af1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhae163b                        0x0000556b4db49490 <unavailable> + 5264

    5    libc.so.6                          0x00002b721b415460 __libc_start_main +
    245

    6    tmpbhae163b                        0x0000556b4db48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpu4l5w2bv/tmpu4l5w2bv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b121fedfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121fbd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121fbd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121fbd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4l5w2bv                        0x000055a8cab7e490 <unavailable> + 5264

    5    libc.so.6                          0x00002b12200cb460 __libc_start_main +
    245

    6    tmpu4l5w2bv                        0x000055a8cab7df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var set = Set<Int>()\n    for\
    \ i in l {\n        if set.contains(-i) {\n            return true\n        }\n\
    \        set.insert(i)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpd0kmgkrc/tmpd0kmgkrc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0540ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0540ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0540ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0540ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0kmgkrc                        0x000055e49e80668b <unavailable> + 5771

    5    libc.so.6                          0x00002b0540fcb460 __libc_start_main +
    245

    6    tmpd0kmgkrc                        0x000055e49e806229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    let n = l.count\n    if n <\
    \ 3 {\n        return false\n    }\n    for i in 0..<n {\n        for j in (i+1)..<n\
    \ {\n            for k in (j+1)..<n {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 2\
    \ {\n        let a = sorted[i]\n        var j = i + 1\n        var k = sorted.count\
    \ - 1\n        while j < k {\n            let b = sorted[j]\n            let c\
    \ = sorted[k]\n            if a + b + c == 0 {\n                return true\n\
    \            } else if a + b + c < 0 {\n                j += 1\n            }\
    \ else {\n                k -= 1\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count {\n   \
    \     for j in i+1..<l.count {\n            for k in j+1..<l.count {\n       \
    \         if l[i] + l[j] + l[k] == 0 {\n                    return true\n    \
    \            }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count {\n   \
    \     for j in i+1..<l.count {\n            for k in j+1..<l.count {\n       \
    \         if l[i] + l[j] + l[k] == 0 {\n                    return true\n    \
    \            }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var set = Set<Int>()\n    for\
    \ num in l {\n        if set.contains(-num) {\n            return true\n     \
    \   }\n        set.insert(num)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmptpw170cg/tmptpw170cg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f216f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f213eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f213ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f213ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptpw170cg                        0x000056430f4b568b <unavailable> + 5771

    5    libc.so.6                          0x00002b5f218e3460 __libc_start_main +
    245

    6    tmptpw170cg                        0x000056430f4b5229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpu4l5w2bv/tmpu4l5w2bv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b121fedfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121fbd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121fbd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121fbd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4l5w2bv                        0x000055a8cab7e490 <unavailable> + 5264

    5    libc.so.6                          0x00002b12200cb460 __libc_start_main +
    245

    6    tmpu4l5w2bv                        0x000055a8cab7df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var l = l\n    l.sort()\n    for i in 0..<l.count-2 {\n  \
    \      if l[i] == l[i+1] {\n            continue\n        }\n        var j = i+1\n\
    \        var k = l.count-1\n        while j < k {\n            if l[i] + l[j]\
    \ + l[k] == 0 {\n                return true\n            } else if l[i] + l[j]\
    \ + l[k] < 0 {\n                j += 1\n            } else {\n               \
    \ k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var l = l\n    l.sort()\n    for i in 0..<l.count-2 {\n  \
    \      var j = i+1\n        var k = l.count-1\n        while j < k {\n       \
    \     if l[i] + l[j] + l[k] == 0 {\n                return true\n            }\
    \ else if l[i] + l[j] + l[k] < 0 {\n                j += 1\n            } else\
    \ {\n                k -= 1\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for\
    \ k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k\
    \ in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n         \
    \           return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count {\n   \
    \     for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n   \
    \             if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function.\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp97tvk8u2/tmp97tvk8u2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5b66bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5b63b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5b63b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5b63b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp97tvk8u2                        0x000055594fd04490 <unavailable> + 5264

    5    libc.so.6                          0x00002ad5b68a8460 __libc_start_main +
    245

    6    tmp97tvk8u2                        0x000055594fd03f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for\
    \ k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function.\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp97tvk8u2/tmp97tvk8u2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5b66bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5b63b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5b63b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5b63b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp97tvk8u2                        0x000055594fd04490 <unavailable> + 5264

    5    libc.so.6                          0x00002ad5b68a8460 __libc_start_main +
    245

    6    tmp97tvk8u2                        0x000055594fd03f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function.\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp97tvk8u2/tmp97tvk8u2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5b66bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5b63b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5b63b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5b63b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp97tvk8u2                        0x000055594fd04490 <unavailable> + 5264

    5    libc.so.6                          0x00002ad5b68a8460 __libc_start_main +
    245

    6    tmp97tvk8u2                        0x000055594fd03f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count {\n   \
    \     for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n   \
    \             if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            let\
    \ target = -(l[i] + l[j])\n            if binary_search(l: l, target: target,\
    \ start: j+1, end: l.count-1) {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8y49tjgs.swift:21:16: error: cannot find 'binary_search' in scope\n\
    \            if binary_search(l: l, target: target, start: j+1, end: l.count-1)\
    \ {\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for\
    \ k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count - 2 {\n        var j = i + 1\n        var k = l.count\
    \ - 1\n        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n     \
    \           return true\n            } else if l[i] + l[j] + l[k] < 0 {\n    \
    \            j += 1\n            } else {\n                k -= 1\n          \
    \  }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b527f3ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b527f0f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b527f0f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b527f0f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b527f0f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppk2c4q74                        0x0000556454846f10 <unavailable> + 7952

    6    tmppk2c4q74                        0x0000556454846aee <unavailable> + 6894

    7    libc.so.6                          0x00002b527f5eb460 __libc_start_main +
    245

    8    tmppk2c4q74                        0x00005564548462c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpcicnle5h/tmpcicnle5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0573df8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0573aefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0573aef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0573aee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcicnle5h                        0x000056042b23c490 <unavailable> + 5264

    5    libc.so.6                          0x00002b0573fe4460 __libc_start_main +
    245

    6    tmpcicnle5h                        0x000056042b23bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpcicnle5h/tmpcicnle5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0573df8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0573aefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0573aef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0573aee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcicnle5h                        0x000056042b23c490 <unavailable> + 5264

    5    libc.so.6                          0x00002b0573fe4460 __libc_start_main +
    245

    6    tmpcicnle5h                        0x000056042b23bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpcicnle5h/tmpcicnle5h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0573df8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0573aefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0573aef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0573aee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcicnle5h                        0x000056042b23c490 <unavailable> + 5264

    5    libc.so.6                          0x00002b0573fe4460 __libc_start_main +
    245

    6    tmpcicnle5h                        0x000056042b23bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count - 2 {\n        var j = i + 1\n        var k = l.count\
    \ - 1\n        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n     \
    \           return true\n            } else if l[i] + l[j] + l[k] < 0 {\n    \
    \            j += 1\n            } else {\n                k -= 1\n          \
    \  }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b527f3ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b527f0f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b527f0f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b527f0f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b527f0f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppk2c4q74                        0x0000556454846f10 <unavailable> + 7952

    6    tmppk2c4q74                        0x0000556454846aee <unavailable> + 6894

    7    libc.so.6                          0x00002b527f5eb460 __libc_start_main +
    245

    8    tmppk2c4q74                        0x00005564548462c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var set = Set<Int>()\n    for i in 0..<l.count {\n       \
    \ for j in (i+1)..<l.count {\n            if set.contains(-l[i]-l[j]) {\n    \
    \            return true\n            }\n        }\n        set.insert(l[i])\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function!\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp_t6b0a3_/tmp_t6b0a3_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b47f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b44eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5b44ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5b44ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_t6b0a3_                        0x00005588ceba9490 <unavailable> + 5264

    5    libc.so.6                          0x00002ae5b49e3460 __libc_start_main +
    245

    6    tmp_t6b0a3_                        0x00005588ceba8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            let\
    \ sum = l[i] + l[j]\n            if binary_search(l: l, x: -sum) {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdj2vja74.swift:21:16: error: cannot find 'binary_search' in scope\n\
    \            if binary_search(l: l, x: -sum) {\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var set = Set<Int>()\n    for\
    \ i in l {\n        if set.contains(-i) {\n            return true\n        }\n\
    \        set.insert(i)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpd0kmgkrc/tmpd0kmgkrc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0540ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0540ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0540ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0540ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0kmgkrc                        0x000055e49e80668b <unavailable> + 5771

    5    libc.so.6                          0x00002b0540fcb460 __libc_start_main +
    245

    6    tmpd0kmgkrc                        0x000055e49e806229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count - 2 {\n        var j = i + 1\n        var k = l.count\
    \ - 1\n        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n     \
    \           return true\n            } else if l[i] + l[j] + l[k] < 0 {\n    \
    \            j += 1\n            } else {\n                k -= 1\n          \
    \  }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b527f3ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b527f0f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b527f0f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b527f0f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b527f0f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppk2c4q74                        0x0000556454846f10 <unavailable> + 7952

    6    tmppk2c4q74                        0x0000556454846aee <unavailable> + 6894

    7    libc.so.6                          0x00002b527f5eb460 __libc_start_main +
    245

    8    tmppk2c4q74                        0x00005564548462c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpu4l5w2bv/tmpu4l5w2bv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b121fedfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121fbd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121fbd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121fbd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4l5w2bv                        0x000055a8cab7e490 <unavailable> + 5264

    5    libc.so.6                          0x00002b12200cb460 __libc_start_main +
    245

    6    tmpu4l5w2bv                        0x000055a8cab7df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count - 2 {\n        if two_sum_to_zero(l: l[i + 1..<l.count],\
    \ target: -l[i]) {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8rx18ob4.swift:19:12: error: cannot find 'two_sum_to_zero' in scope\n\
    \        if two_sum_to_zero(l: l[i + 1..<l.count], target: -l[i]) {\n        \
    \   ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbhae163b/tmpbhae163b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721b229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721af20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721af20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721af1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhae163b                        0x0000556b4db49490 <unavailable> + 5264

    5    libc.so.6                          0x00002b721b415460 __libc_start_main +
    245

    6    tmpbhae163b                        0x0000556b4db48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n\
    \            for k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    guard l.count >= 3 else { return\
    \ false }\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n  \
    \          for k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var set = Set<Int>()\n    for\
    \ i in l {\n        if set.contains(-i) {\n            return true\n        }\n\
    \        set.insert(i)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpd0kmgkrc/tmpd0kmgkrc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0540ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0540ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0540ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0540ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0kmgkrc                        0x000055e49e80668b <unavailable> + 5771

    5    libc.so.6                          0x00002b0540fcb460 __libc_start_main +
    245

    6    tmpd0kmgkrc                        0x000055e49e806229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n\
    \            for k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k\
    \ in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n         \
    \           return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var set = Set<Int>()\n    for\
    \ i in l {\n        if set.contains(-i) {\n            return true\n        }\n\
    \        set.insert(i)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpd0kmgkrc/tmpd0kmgkrc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0540ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0540ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0540ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0540ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0kmgkrc                        0x000055e49e80668b <unavailable> + 5771

    5    libc.so.6                          0x00002b0540fcb460 __libc_start_main +
    245

    6    tmpd0kmgkrc                        0x000055e49e806229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var set = Set<Int>()\n    for\
    \ i in l {\n        if set.contains(-i) {\n            return true\n        }\n\
    \        set.insert(i)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpd0kmgkrc/tmpd0kmgkrc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0540ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0540ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0540ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0540ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0kmgkrc                        0x000055e49e80668b <unavailable> + 5771

    5    libc.so.6                          0x00002b0540fcb460 __libc_start_main +
    245

    6    tmpd0kmgkrc                        0x000055e49e806229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpu4l5w2bv/tmpu4l5w2bv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b121fedfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121fbd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121fbd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121fbd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4l5w2bv                        0x000055a8cab7e490 <unavailable> + 5264

    5    libc.so.6                          0x00002b12200cb460 __libc_start_main +
    245

    6    tmpu4l5w2bv                        0x000055a8cab7df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var set = Set<Int>()\n    for i in 0..<l.count {\n       \
    \ for j in i+1..<l.count {\n            let sum = l[i] + l[j]\n            if\
    \ set.contains(-sum) {\n                return true\n            }\n         \
    \   set.insert(l[j])\n        }\n        set.removeAll()\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var dict = [Int: Int]()\n  \
    \  for i in l {\n        if dict[i] == nil {\n            dict[i] = 1\n      \
    \  } else {\n            dict[i]! += 1\n        }\n    }\n    for i in l {\n \
    \       for j in l {\n            if dict[-i-j] != nil {\n                if i\
    \ == j && dict[i]! < 2 {\n                    continue\n                }\n  \
    \              if i == -i-j && dict[i]! < 3 {\n                    continue\n\
    \                }\n                return true\n            }\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2 {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n\
    \            for k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function!\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmp_t6b0a3_/tmp_t6b0a3_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b47f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b44eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5b44ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5b44ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_t6b0a3_                        0x00005588ceba9490 <unavailable> + 5264

    5    libc.so.6                          0x00002ae5b49e3460 __libc_start_main +
    245

    6    tmp_t6b0a3_                        0x00005588ceba8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k\
    \ in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n         \
    \           return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count {\n   \
    \     for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n   \
    \             if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k\
    \ in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n         \
    \           return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var set = Set<Int>()\n    for i in 0..<l.count {\n       \
    \ for j in i+1..<l.count {\n            if set.contains(-(l[i] + l[j])) {\n  \
    \              return true\n            }\n        }\n        set.insert(l[i])\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbhae163b/tmpbhae163b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721b229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721af20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721af20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721af1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhae163b                        0x0000556b4db49490 <unavailable> + 5264

    5    libc.so.6                          0x00002b721b415460 __libc_start_main +
    245

    6    tmpbhae163b                        0x0000556b4db48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for\
    \ k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count - 2 {\n        var j = i + 1\n        var k = l.count\
    \ - 1\n        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n     \
    \           return true\n            } else if l[i] + l[j] + l[k] < 0 {\n    \
    \            j += 1\n            } else {\n                k -= 1\n          \
    \  }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b527f3ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b527f0f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b527f0f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b527f0f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b527f0f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppk2c4q74                        0x0000556454846f10 <unavailable> + 7952

    6    tmppk2c4q74                        0x0000556454846aee <unavailable> + 6894

    7    libc.so.6                          0x00002b527f5eb460 __libc_start_main +
    245

    8    tmppk2c4q74                        0x00005564548462c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k\
    \ in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n         \
    \           return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var set = Set<Int>()\n    for\
    \ i in l {\n        if set.contains(-i) {\n            return true\n        }\n\
    \        set.insert(i)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpd0kmgkrc/tmpd0kmgkrc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0540ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0540ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0540ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0540ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0kmgkrc                        0x000055e49e80668b <unavailable> + 5771

    5    libc.so.6                          0x00002b0540fcb460 __libc_start_main +
    245

    6    tmpd0kmgkrc                        0x000055e49e806229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpu4l5w2bv/tmpu4l5w2bv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b121fedfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121fbd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121fbd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121fbd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4l5w2bv                        0x000055a8cab7e490 <unavailable> + 5264

    5    libc.so.6                          0x00002b12200cb460 __libc_start_main +
    245

    6    tmpu4l5w2bv                        0x000055a8cab7df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for\
    \ k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var set = Set<Int>()\n    for\
    \ i in l {\n        if set.contains(-i) {\n            return true\n        }\n\
    \        set.insert(i)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpd0kmgkrc/tmpd0kmgkrc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0540ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0540ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0540ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0540ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0kmgkrc                        0x000055e49e80668b <unavailable> + 5771

    5    libc.so.6                          0x00002b0540fcb460 __libc_start_main +
    245

    6    tmpd0kmgkrc                        0x000055e49e806229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbhae163b/tmpbhae163b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721b229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721af20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721af20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721af1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhae163b                        0x0000556b4db49490 <unavailable> + 5264

    5    libc.so.6                          0x00002b721b415460 __libc_start_main +
    245

    6    tmpbhae163b                        0x0000556b4db48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count - 2 {\n        var j = i + 1\n        var k = l.count\
    \ - 1\n        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n     \
    \           return true\n            } else if l[i] + l[j] + l[k] < 0 {\n    \
    \            j += 1\n            } else {\n                k -= 1\n          \
    \  }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b527f3ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b527f0f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b527f0f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b527f0f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b527f0f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppk2c4q74                        0x0000556454846f10 <unavailable> + 7952

    6    tmppk2c4q74                        0x0000556454846aee <unavailable> + 6894

    7    libc.so.6                          0x00002b527f5eb460 __libc_start_main +
    245

    8    tmppk2c4q74                        0x00005564548462c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for\
    \ k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement me!\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpjfg6p21c/tmpjfg6p21c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8065727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806541eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806541e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806541d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfg6p21c                        0x000055f8cb5ca490 <unavailable> + 5264

    5    libc.so.6                          0x00002b8065913460 __libc_start_main +
    245

    6    tmpjfg6p21c                        0x000055f8cb5c9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbhae163b/tmpbhae163b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721b229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721af20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721af20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721af1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhae163b                        0x0000556b4db49490 <unavailable> + 5264

    5    libc.so.6                          0x00002b721b415460 __libc_start_main +
    245

    6    tmpbhae163b                        0x0000556b4db48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count - 2 {\n        if two_sum_to_zero(l: l, i: i + 1) {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj4nmdkjq.swift:19:12: error: cannot find 'two_sum_to_zero' in scope\n\
    \        if two_sum_to_zero(l: l, i: i + 1) {\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count {\n   \
    \     for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n   \
    \             if l[i] + l[j] + l[k] == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var result = false\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            for k in j+1..<l.count\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    result\
    \ = true\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        let a = l[i]\n        var j = i + 1\n     \
    \   var k = l.count - 1\n        while j < k {\n            let b = l[j]\n   \
    \         let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        var j = i + 1\n        var k = l.count - 1\n\
    \        while j < k {\n            if l[i] + l[j] + l[k] == 0 {\n           \
    \     return true\n            } else if l[i] + l[j] + l[k] < 0 {\n          \
    \      j += 1\n            } else {\n                k -= 1\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count - 2 {\n        if two_sum_to_zero(l: l, i: i + 1) {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj4nmdkjq.swift:19:12: error: cannot find 'two_sum_to_zero' in scope\n\
    \        if two_sum_to_zero(l: l, i: i + 1) {\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for\
    \ k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpu4l5w2bv/tmpu4l5w2bv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b121fedfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121fbd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121fbd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121fbd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4l5w2bv                        0x000055a8cab7e490 <unavailable> + 5264

    5    libc.so.6                          0x00002b12200cb460 __libc_start_main +
    245

    6    tmpu4l5w2bv                        0x000055a8cab7df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var set = Set<Int>()\n    for i in 0..<l.count {\n       \
    \ for j in i+1..<l.count {\n            if set.contains(-(l[i] + l[j])) {\n  \
    \              return true\n            }\n        }\n        set.insert(l[i])\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var set = Set<Int>()\n    for i in 0..<l.count {\n       \
    \ for j in (i+1)..<l.count {\n            let sum = l[i] + l[j]\n            if\
    \ set.contains(-sum) {\n                return true\n            }\n        }\n\
    \        set.insert(l[i])\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbhae163b/tmpbhae163b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721b229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721af20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721af20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721af1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhae163b                        0x0000556b4db49490 <unavailable> + 5264

    5    libc.so.6                          0x00002b721b415460 __libc_start_main +
    245

    6    tmpbhae163b                        0x0000556b4db48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpns0zju9k/tmpns0zju9k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11cf1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ceea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ceea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ceea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0zju9k                        0x0000565491f93490 <unavailable> + 5264

    5    libc.so.6                          0x00002b11cf39c460 __libc_start_main +
    245

    6    tmpns0zju9k                        0x0000565491f92f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2 {\n\
    \        let a = l[i]\n        var j = i + 1\n        var k = l.count - 1\n  \
    \      while j < k {\n            let b = l[j]\n            let c = l[k]\n   \
    \         if a + b + c == 0 {\n                return true\n            } else\
    \ if a + b + c < 0 {\n                j += 1\n            } else {\n         \
    \       k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpbhae163b/tmpbhae163b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721b229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721af20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721af20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721af1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhae163b                        0x0000556b4db49490 <unavailable> + 5264

    5    libc.so.6                          0x00002b721b415460 __libc_start_main +
    245

    6    tmpbhae163b                        0x0000556b4db48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n\
    \            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'tmpraiabrcy/tmpraiabrcy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a29f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a26efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a26ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a26ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraiabrcy                        0x0000557dd5fd1490 <unavailable> + 5264

    5    libc.so.6                          0x00002b22a2be4460 __libc_start_main +
    245

    6    tmpraiabrcy                        0x0000557dd5fd0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n  \
    \  for i in 0..<l.count - 2 {\n        let a = l[i]\n        var j = i + 1\n \
    \       var k = l.count - 1\n        while j < k {\n            let b = l[j]\n\
    \            let c = l[k]\n            if a + b + c == 0 {\n                return\
    \ true\n            } else if a + b + c < 0 {\n                j += 1\n      \
    \      } else {\n                k -= 1\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002acebb390c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acebb087561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acebb087286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acebb08713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acebb086bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp80iao322                        0x0000555d148d8f46 <unavailable> + 8006

    6    tmp80iao322                        0x0000555d148d8aee <unavailable> + 6894

    7    libc.so.6                          0x00002acebb57c460 __libc_start_main +
    245

    8    tmp80iao322                        0x0000555d148d82c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659820738
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes an array of integers as an input.\n///\
    \ it returns true if there are three distinct elements in the array that\n///\
    \ sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5,\
    \ 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n///\
    \ >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\n\
    func triples_sum_to_zero(l: [Int]) -> Bool {\n    if l.count < 3 {\n        return\
    \ false\n    }\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 2 {\n\
    \        if l[i] == l[i + 1] {\n            continue\n        }\n        var j\
    \ = i + 1\n        var k = l.count - 1\n        while j < k {\n            if\
    \ l[i] + l[j] + l[k] == 0 {\n                return true\n            } else if\
    \ l[i] + l[j] + l[k] < 0 {\n                j += 1\n            } else {\n   \
    \             k -= 1\n            }\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820738
