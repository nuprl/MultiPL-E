language: swift
name: HumanEval_80_is_happy
results:
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var set = Set<Character>()\n\
    \    for c in s {\n        set.insert(c)\n    }\n    return set.count >= 3\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpo_zm61lr/tmpo_zm61lr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79686b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79683aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79683ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79683ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo_zm61lr                        0x00005649c53ef9b8 <unavailable> + 6584

    5    libc.so.6                          0x00002b79688a3460 __libc_start_main +
    245

    6    tmpo_zm61lr                        0x00005649c53ef179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count < 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n\
    \    var prevprev = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if prev == s[i] || prevprev == s[i] {\n\
    \            return false\n        }\n        prevprev = prev\n        prev =\
    \ s[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprmsuec4v.swift:24:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmprmsuec4v.swift:24:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count < 3 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let subString = s[range]\n        if Set(subString).count != 3 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let s = Array(s)\n    for\
    \ i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var result = true\n\
    \    for i in 0..<s.count-2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        let range\
    \ = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            result = false\n            break\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count != 3 {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var previous = s.first!\n\
    \    var previous2 = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if previous == s[i] || previous2 == s[i]\
    \ {\n            return false\n        }\n        previous = previous2\n     \
    \   previous2 = s[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpja5sf2l4.swift:24:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpja5sf2l4.swift:24:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var previous = s.first!\n\
    \    var previousPrevious = s[s.index(after: s.startIndex)]\n    for character\
    \ in s.dropFirst(2) {\n        if character == previous || character == previousPrevious\
    \ {\n            return false\n        }\n        previousPrevious = previous\n\
    \        previous = character\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        let set = Set(sub)\n      \
    \  if set.count != 3 {\n            return false\n        }\n        i += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count < 3 {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count < 3 {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = Array(s)\n    if s.count < 3 {\n        return false\n    }\n\
    \    for i in 0...s.count - 3 {\n        if s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count < 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var s = s\n    while\
    \ s.count >= 3 {\n        let first = s.removeFirst()\n        let second = s.removeFirst()\n\
    \        let third = s.removeFirst()\n        if first == second || second ==\
    \ third || first == third {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp_s34yar_/tmp_s34yar_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba697896c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba69758db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba69758d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba69758c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s34yar_                        0x000055dced3c58a8 <unavailable> + 6312

    5    libc.so.6                          0x00002ba697a82460 __libc_start_main +
    245

    6    tmp_s34yar_                        0x000055dced3c5069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var set = Set<Character>()\n\
    \    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        let char = s[index]\n        if set.contains(char) {\n         \
    \   return false\n        }\n        set.insert(char)\n        if i >= 2 {\n \
    \           set.remove(s[s.index(s.startIndex, offsetBy: i - 2)])\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var s = s\n    while\
    \ s.count >= 3 {\n        if s[s.startIndex] == s[s.index(s.startIndex, offsetBy:\
    \ 1)] ||\n            s[s.startIndex] == s[s.index(s.startIndex, offsetBy: 2)]\
    \ ||\n            s[s.index(s.startIndex, offsetBy: 1)] == s[s.index(s.startIndex,\
    \ offsetBy: 2)] {\n            return false\n        }\n        s.removeFirst()\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var s = s\n    while\
    \ s.count >= 3 {\n        if s[s.startIndex] == s[s.index(s.startIndex, offsetBy:\
    \ 1)] ||\n            s[s.startIndex] == s[s.index(s.startIndex, offsetBy: 2)]\
    \ ||\n            s[s.index(s.startIndex, offsetBy: 1)] == s[s.index(s.startIndex,\
    \ offsetBy: 2)] {\n            return false\n        }\n        s.removeFirst()\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if sub.count != Set(sub).count {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var index = s.startIndex\n\
    \    var nextIndex = s.index(after: index)\n    var nextNextIndex = s.index(after:\
    \ nextIndex)\n    while nextNextIndex < s.endIndex {\n        if s[index] == s[nextIndex]\
    \ || s[index] == s[nextNextIndex] || s[nextIndex] == s[nextNextIndex] {\n    \
    \        return false\n        }\n        index = nextIndex\n        nextIndex\
    \ = nextNextIndex\n        nextNextIndex = s.index(after: nextNextIndex)\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        let set = Set(sub)\n        if set.count != 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var s = s\n    while s.count\
    \ >= 3 {\n        let first = s.removeFirst()\n        let second = s.removeFirst()\n\
    \        let third = s.removeFirst()\n        if first == second || second ==\
    \ third || first == third {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpryf3nic9/tmpryf3nic9.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afff9098c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afff8d8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afff8d8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afff8d8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpryf3nic9                        0x0000559b776468a8 <unavailable> + 6312

    5    libc.so.6                          0x00002afff9284460 __libc_start_main +
    245

    6    tmpryf3nic9                        0x0000559b77646069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var prev = s.first!\n \
    \   var prev2 = s[s.index(after: s.startIndex)]\n    for char in s.dropFirst(2)\
    \ {\n        if char == prev || char == prev2 {\n            return false\n  \
    \      }\n        prev2 = prev\n        prev = char\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let subString = s[start..<end]\n\
    \        let set = Set(subString)\n        if set.count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count < 3 {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var i = 0\n    while i\
    \ < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n  \
    \      let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var s = s\n    while\
    \ s.count >= 3 {\n        let first = s.removeFirst()\n        let second = s.removeFirst()\n\
    \        let third = s.removeFirst()\n        if first == second || second ==\
    \ third || first == third {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp_s34yar_/tmp_s34yar_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba697896c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba69758db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba69758d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba69758c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s34yar_                        0x000055dced3c58a8 <unavailable> + 6312

    5    libc.so.6                          0x00002ba697a82460 __libc_start_main +
    245

    6    tmp_s34yar_                        0x000055dced3c5069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count < 3 {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var set = Set<Character>()\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let subString = s[range]\n        for char in subString\
    \ {\n            set.insert(char)\n        }\n        if set.count != 3 {\n  \
    \          return false\n        }\n        set.removeAll()\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var result = true\n    if s.count < 3 {\n        result = false\n   \
    \ } else {\n        for i in 0..<s.count - 2 {\n            let start = s.index(s.startIndex,\
    \ offsetBy: i)\n            let end = s.index(s.startIndex, offsetBy: i + 3)\n\
    \            let subString = s[start..<end]\n            if Set(subString).count\
    \ != 3 {\n                result = false\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var s = s\n    while\
    \ s.count >= 3 {\n        let first = s.removeFirst()\n        let second = s.removeFirst()\n\
    \        let third = s.removeFirst()\n        if first == second || second ==\
    \ third || first == third {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp_s34yar_/tmp_s34yar_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba697896c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba69758db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba69758d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba69758c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s34yar_                        0x000055dced3c58a8 <unavailable> + 6312

    5    libc.so.6                          0x00002ba697a82460 __libc_start_main +
    245

    6    tmp_s34yar_                        0x000055dced3c5069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count -\
    \ 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var set = Set<String>()\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = String(s[start..<end])\n        if set.contains(sub) {\n            return\
    \ false\n        }\n        set.insert(sub)\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpibrn8zgl/tmpibrn8zgl.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe4290dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe42604b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe42604988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe426037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibrn8zgl                        0x0000560a05b4b921 <unavailable> + 6433

    5    libc.so.6                          0x00002afe42af9460 __libc_start_main +
    245

    6    tmpibrn8zgl                        0x0000560a05b4b3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        let set = Set(sub)\n        if set.count != 3 {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let index1\
    \ = s.index(s.startIndex, offsetBy: i+1)\n        let index2 = s.index(s.startIndex,\
    \ offsetBy: i+2)\n        if s[index] == s[index1] || s[index] == s[index2] ||\
    \ s[index1] == s[index2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count -\
    \ 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count < 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count < 3 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count < 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let subString = s[start..<end]\n\
    \        let set = Set(subString)\n        if set.count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count < 3 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count < 3 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count -\
    \ 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var previous = [Character]()\n\
    \    for c in s {\n        if previous.count == 3 {\n            if previous[0]\
    \ == previous[1] || previous[0] == previous[2] || previous[1] == previous[2] {\n\
    \                return false\n            }\n            previous.removeFirst()\n\
    \        }\n        previous.append(c)\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpeu_1ghls/tmpeu_1ghls.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d07c59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d07950b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d07950988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d0794f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeu_1ghls                        0x0000559029bca95f <unavailable> + 6495

    5    libc.so.6                          0x00002b1d07e45460 __libc_start_main +
    245

    6    tmpeu_1ghls                        0x0000559029bca299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var index = s.startIndex\n\
    \    var nextIndex = s.index(after: index)\n    var nextNextIndex = s.index(after:\
    \ nextIndex)\n    while nextNextIndex < s.endIndex {\n        if s[index] == s[nextIndex]\
    \ || s[index] == s[nextNextIndex] || s[nextIndex] == s[nextNextIndex] {\n    \
    \        return false\n        }\n        index = nextIndex\n        nextIndex\
    \ = nextNextIndex\n        nextNextIndex = s.index(after: nextNextIndex)\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n\
    \    var prev2 = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if prev == s[i] || prev2 == s[i] {\n  \
    \          return false\n        }\n        prev = prev2\n        prev2 = s[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk6rinf8l.swift:24:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpk6rinf8l.swift:24:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count < 3 {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var s = s\n    while\
    \ s.count >= 3 {\n        if s[s.startIndex] == s[s.index(s.startIndex, offsetBy:\
    \ 1)] ||\n            s[s.startIndex] == s[s.index(s.startIndex, offsetBy: 2)]\
    \ ||\n            s[s.index(s.startIndex, offsetBy: 1)] == s[s.index(s.startIndex,\
    \ offsetBy: 2)] {\n            return false\n        }\n        s.removeFirst()\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var previous = s.first!\n\
    \    var current = s[s.index(after: s.startIndex)]\n    var next = s[s.index(s.startIndex,\
    \ offsetBy: 2)]\n    for i in 3..<s.count {\n        if previous == current ||\
    \ current == next || previous == next {\n            return false\n        }\n\
    \        previous = current\n        current = next\n        next = s[s.index(s.startIndex,\
    \ offsetBy: i)]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp3ma66cbx/tmp3ma66cbx.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386e9fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b386e6f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b386e6f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b386e6f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ma66cbx                        0x0000563225f3ca2f <unavailable> + 6703

    5    libc.so.6                          0x00002b386ebea460 __libc_start_main +
    245

    6    tmp3ma66cbx                        0x0000563225f3c369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    for i in\
    \ 0..<s.count-2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n  \
    \      let end = s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        let set = Set(sub)\n        if set.count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = Array(s)\n    if s.count < 3 {\n        return false\n    }\n\
    \    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var index = s.startIndex\n\
    \    var nextIndex = s.index(after: index)\n    var nextNextIndex = s.index(after:\
    \ nextIndex)\n    while nextNextIndex < s.endIndex {\n        if s[index] == s[nextIndex]\
    \ || s[index] == s[nextNextIndex] || s[nextIndex] == s[nextNextIndex] {\n    \
    \        return false\n        }\n        index = nextIndex\n        nextIndex\
    \ = nextNextIndex\n        nextNextIndex = s.index(after: nextNextIndex)\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var last = s.index(s.startIndex,\
    \ offsetBy: 2)\n    for i in s.indices {\n        if i > last {\n            last\
    \ = s.index(last, offsetBy: 3)\n        }\n        if s[i] == s[last] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpmdcppadx/tmpmdcppadx.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf46256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf45f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf45f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf45f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmdcppadx                        0x0000555b5112f87b <unavailable> + 6267

    5    libc.so.6                          0x00002adf46442460 __libc_start_main +
    245

    6    tmpmdcppadx                        0x0000555b5112f3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var s = s\n    while\
    \ s.count >= 3 {\n        let first = s.removeFirst()\n        let second = s.removeFirst()\n\
    \        let third = s.removeFirst()\n        if first == second || second ==\
    \ third || first == third {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp_s34yar_/tmp_s34yar_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba697896c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba69758db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba69758d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba69758c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s34yar_                        0x000055dced3c58a8 <unavailable> + 6312

    5    libc.so.6                          0x00002ba697a82460 __libc_start_main +
    245

    6    tmp_s34yar_                        0x000055dced3c5069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var last = s.first!\n\
    \    var last2 = s[s.index(after: s.startIndex)]\n    for c in s.dropFirst(2)\
    \ {\n        if last == last2 && last2 == c {\n            return false\n    \
    \    }\n        last = last2\n        last2 = c\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpcqln_15s/tmpcqln_15s.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4679a5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4679753b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4679753988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46797527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcqln_15s                        0x000055aa7c5d3971 <unavailable> + 6513

    5    libc.so.6                          0x00002b4679c48460 __libc_start_main +
    245

    6    tmpcqln_15s                        0x000055aa7c5d3419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var result = true\n    var i = 0\n    while i < s.count - 2 {\n     \
    \   let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n        if Set(s[start..<end]).count != 3 {\n            result\
    \ = false\n            break\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpib6ramqf/tmpib6ramqf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a577eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a574e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a574e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a574e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpib6ramqf                        0x00005590b357f60d <unavailable> + 5645

    5    libc.so.6                          0x00002b7a579d6460 __libc_start_main +
    245

    6    tmpib6ramqf                        0x00005590b357f299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let subString = s[range]\n        if Set(subString).count != 3 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count < 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count < 3 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count != 3 {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count != 3 {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = Array(s)\n    if s.count < 3 {\n        return false\n    }\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     let set = Set(sub)\n        if set.count != 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var result = true\n\
    \    var i = 0\n    while i < s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let subString = s[range]\n        let set\
    \ = Set(subString)\n        if set.count != 3 {\n            result = false\n\
    \            break\n        }\n        i += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count < 3 {\n \
    \           return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        let char1 = s[index1]\n        let char2 = s[index2]\n\
    \        let char3 = s[index3]\n        if char1 == char2 || char1 == char3 ||\
    \ char2 == char3 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let substring = s[range]\n        if Set(substring).count != 3 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = Array(s)\n    if s.count < 3 {\n        return false\n    }\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let substring = s[range]\n        if substring.contains(substring.first!)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp6vvsqlnt/tmp6vvsqlnt.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a9af73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a9ac6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a9ac6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a9ac697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vvsqlnt                        0x0000564ad610184b <unavailable> + 6219

    5    libc.so.6                          0x00002b3a9b15f460 __libc_start_main +
    245

    6    tmp6vvsqlnt                        0x0000564ad6101399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var index = s.startIndex\n\
    \    while index < s.endIndex {\n        let nextIndex = s.index(index, offsetBy:\
    \ 3)\n        if nextIndex > s.endIndex {\n            break\n        }\n    \
    \    let subString = s[index..<nextIndex]\n        if Set(subString).count !=\
    \ 3 {\n            return false\n        }\n        index = nextIndex\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bf3c0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bf3901561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4bf3901286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4bf390113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4bf3900bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b4bf3a34b0d <unavailable> + 2693901

    6    tmp6pm9ou3c                        0x00005573f5e5cd43 <unavailable> + 7491

    7    tmp6pm9ou3c                        0x00005573f5e5c856 <unavailable> + 6230

    8    libc.so.6                          0x00002b4bf3df6460 __libc_start_main +
    245

    9    tmp6pm9ou3c                        0x00005573f5e5c419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let chars = Array(s)\n\
    \    for i in 0..<chars.count - 2 {\n        if chars[i] == chars[i + 1] || chars[i]\
    \ == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count < 3 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var last = s.first!\n\
    \    var second = s[s.index(after: s.startIndex)]\n    for char in s[s.index(s.startIndex,\
    \ offsetBy: 2)...] {\n        if char == last || char == second {\n          \
    \  return false\n        }\n        last = second\n        second = char\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n\
    \    var prev2 = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if prev == s[i] || prev2 == s[i] {\n  \
    \          return false\n        }\n        prev = prev2\n        prev2 = s[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk6rinf8l.swift:24:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpk6rinf8l.swift:24:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var s = s\n    while\
    \ s.count >= 3 {\n        let first = s.removeFirst()\n        let second = s.removeFirst()\n\
    \        let third = s.removeFirst()\n        if first == second || second ==\
    \ third || first == third {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp_s34yar_/tmp_s34yar_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba697896c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba69758db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba69758d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba69758c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s34yar_                        0x000055dced3c58a8 <unavailable> + 6312

    5    libc.so.6                          0x00002ba697a82460 __libc_start_main +
    245

    6    tmp_s34yar_                        0x000055dced3c5069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n\
    \    var prev2 = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if prev == s[i] || prev2 == s[i] {\n  \
    \          return false\n        }\n        prev = prev2\n        prev2 = s[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk6rinf8l.swift:24:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpk6rinf8l.swift:24:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if sub.count == Set(sub).count {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpft8x8fgw/tmpft8x8fgw.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b092c897c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b092c58eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b092c58e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b092c58d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpft8x8fgw                        0x00005610d7e4ec58 <unavailable> + 7256

    5    libc.so.6                          0x00002b092ca83460 __libc_start_main +
    245

    6    tmpft8x8fgw                        0x00005610d7e4e419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count != 3 {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let subString = s[range]\n        if Set(subString).count != 3 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let subString = s[range]\n        let set = Set(subString)\n        if set.count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var set = Set<Character>()\n\
    \    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        let char = s[index]\n        if set.contains(char) {\n         \
    \   return false\n        }\n        set.insert(char)\n        if i >= 2 {\n \
    \           set.remove(s[s.index(s.startIndex, offsetBy: i - 2)])\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n\
    \    var prevprev = s[s.index(after: s.startIndex)]\n    for c in s.dropFirst(2)\
    \ {\n        if c == prev || c == prevprev {\n            return false\n     \
    \   }\n        prevprev = prev\n        prev = c\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var s = s\n    while\
    \ s.count >= 3 {\n        let first = s.removeFirst()\n        let second = s.removeFirst()\n\
    \        let third = s.removeFirst()\n        if first == second || second ==\
    \ third || first == third {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp_s34yar_/tmp_s34yar_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba697896c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba69758db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba69758d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba69758c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s34yar_                        0x000055dced3c58a8 <unavailable> + 6312

    5    libc.so.6                          0x00002ba697a82460 __libc_start_main +
    245

    6    tmp_s34yar_                        0x000055dced3c5069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count -\
    \ 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        let set = Set(sub)\n        if set.count != 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n\
    \    var prev2 = s[s.index(after: s.startIndex)]\n    for c in s.dropFirst(2)\
    \ {\n        if c == prev || c == prev2 {\n            return false\n        }\n\
    \        prev = prev2\n        prev2 = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n\
    \    var prev2 = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        let c = s[i]\n        if c == prev || c\
    \ == prev2 {\n            return false\n        }\n        prev = prev2\n    \
    \    prev2 = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphf6cshqv.swift:24:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmphf6cshqv.swift:24:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let subStr = s[range]\n        if Set(subStr).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var previous = s.first!\n\
    \    var current = s[s.index(after: s.startIndex)]\n    var next = s[s.index(s.startIndex,\
    \ offsetBy: 2)]\n    for i in 3..<s.count {\n        if previous == current ||\
    \ current == next || previous == next {\n            return false\n        }\n\
    \        previous = current\n        current = next\n        next = s[s.index(s.startIndex,\
    \ offsetBy: i)]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpbjpas2t9/tmpbjpas2t9.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad3110fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad30e06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad30e06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad30e057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjpas2t9                        0x0000564aa009fa2f <unavailable> + 6703

    5    libc.so.6                          0x00002aad312fb460 __libc_start_main +
    245

    6    tmpbjpas2t9                        0x0000564aa009f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var previous = s.first!\n\
    \    var current = s[s.index(after: s.startIndex)]\n    var next = s[s.index(s.startIndex,\
    \ offsetBy: 2)]\n    for i in 3..<s.count {\n        if previous == current ||\
    \ current == next || previous == next {\n            return false\n        }\n\
    \        previous = current\n        current = next\n        next = s[s.index(s.startIndex,\
    \ offsetBy: i)]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp3ma66cbx/tmp3ma66cbx.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386e9fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b386e6f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b386e6f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b386e6f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ma66cbx                        0x0000563225f3ca2f <unavailable> + 6703

    5    libc.so.6                          0x00002b386ebea460 __libc_start_main +
    245

    6    tmp3ma66cbx                        0x0000563225f3c369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var chars = Array(s)\n\
    \    for i in 0..<chars.count - 2 {\n        if chars[i] == chars[i + 1] || chars[i]\
    \ == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var result = true\n    if s.count < 3 {\n        result = false\n   \
    \ } else {\n        for i in 0..<s.count - 2 {\n            let start = s.index(s.startIndex,\
    \ offsetBy: i)\n            let end = s.index(s.startIndex, offsetBy: i + 3)\n\
    \            let sub = s[start..<end]\n            if Set(sub).count != 3 {\n\
    \                result = false\n                break\n            }\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var chars = [Character](s)\n\
    \    for i in 0..<chars.count-2 {\n        if chars[i] == chars[i+1] || chars[i]\
    \ == chars[i+2] || chars[i+1] == chars[i+2] {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count < 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count -\
    \ 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var last_three = s.prefix(3)\n\
    \    var index = s.index(s.startIndex, offsetBy: 3)\n    while index < s.endIndex\
    \ {\n        if last_three.count == 3 && Set(last_three).count != 3 {\n      \
    \      return false\n        }\n        last_three.removeFirst()\n        last_three.append(s[index])\n\
    \        index = s.index(after: index)\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp0rmwi7yp/tmp0rmwi7yp.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c1177ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c11471b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c11471988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c114707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0rmwi7yp                        0x0000556adac71c4f <unavailable> + 7247

    5    libc.so.6                          0x00002b8c11966460 __libc_start_main +
    245

    6    tmp0rmwi7yp                        0x0000556adac71589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let index1\
    \ = s.index(s.startIndex, offsetBy: i + 1)\n        let index2 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index] == s[index1] || s[index] == s[index2]\
    \ || s[index1] == s[index2] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var prev = s.first!\n\
    \    var prev2 = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if prev == s[i] || prev2 == s[i] {\n  \
    \          return false\n        }\n        prev = prev2\n        prev2 = s[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk6rinf8l.swift:24:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpk6rinf8l.swift:24:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count != 3 {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    var\
    \ j = i + 1\n    var k = j + 1\n    while k < s.count {\n        let indexI =\
    \ s.index(s.startIndex, offsetBy: i)\n        let indexJ = s.index(s.startIndex,\
    \ offsetBy: j)\n        let indexK = s.index(s.startIndex, offsetBy: k)\n    \
    \    let charI = s[indexI]\n        let charJ = s[indexJ]\n        let charK =\
    \ s[indexK]\n        if charI == charJ || charI == charK || charJ == charK {\n\
    \            return false\n        }\n        i += 1\n        j += 1\n       \
    \ k += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let subStr\
    \ = s[start..<end]\n        let set = Set(subStr)\n        if set.count != 3 {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var lastThree = s.prefix(3)\n\
    \    for letter in s.dropFirst(3) {\n        if lastThree.contains(letter) {\n\
    \            return false\n        }\n        lastThree.removeFirst()\n      \
    \  lastThree.append(letter)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpqvjou2rb/tmpqvjou2rb.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38a68a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38a65a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38a65a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38a659f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqvjou2rb                        0x0000558d7c7c5acf <unavailable> + 6863

    5    libc.so.6                          0x00002b38a6a95460 __libc_start_main +
    245

    6    tmpqvjou2rb                        0x0000558d7c7c5409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var prev = s.first!\n \
    \   var prevPrev = s[s.index(after: s.startIndex)]\n    for i in s.indices.dropFirst(2)\
    \ {\n        if prev == s[i] || prevPrev == s[i] {\n            return false\n\
    \        }\n        prevPrev = prev\n        prev = s[i]\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count < 3 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count != 3 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var set = Set<Character>()\n\
    \    for c in s {\n        set.insert(c)\n    }\n    return set.count == s.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpwxwn7src/tmpwxwn7src.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5dcc0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5dc905b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5dc905988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5dc9047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxwn7src                        0x000055d151c308f5 <unavailable> + 6389

    5    libc.so.6                          0x00002ac5dcdfa460 __libc_start_main +
    245

    6    tmpwxwn7src                        0x000055d151c30179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let sub = s[start..<end]\n   \
    \     if Set(sub).count < 3 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        if Set(sub).count != 3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013698
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var index = s.startIndex\n\
    \    while index < s.endIndex {\n        let start = s.index(index, offsetBy:\
    \ 0)\n        let end = s.index(index, offsetBy: 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n        index = s.index(index, offsetBy: 3)\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0232fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac022ff5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac022ff5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac022ff513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac022ff4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac023128b0d <unavailable> + 2693901

    6    tmppunz3mpc                        0x000055ced253ccb4 <unavailable> + 7348

    7    tmppunz3mpc                        0x000055ced253c786 <unavailable> + 6022

    8    libc.so.6                          0x00002ac0234ea460 __libc_start_main +
    245

    9    tmppunz3mpc                        0x000055ced253c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var s = s\n    while\
    \ s.count >= 3 {\n        if s[s.startIndex] == s[s.index(s.startIndex, offsetBy:\
    \ 1)] ||\n            s[s.startIndex] == s[s.index(s.startIndex, offsetBy: 2)]\
    \ ||\n            s[s.index(s.startIndex, offsetBy: 1)] == s[s.index(s.startIndex,\
    \ offsetBy: 2)] {\n            return false\n        }\n        s.removeFirst()\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n\
    \        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range =\
    \ start..<end\n        let sub = s[range]\n        if Set(sub).count != 3 {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var previous = s.first!\n\
    \    var current = s[s.index(after: s.startIndex)]\n    var next = s[s.index(s.startIndex,\
    \ offsetBy: 2)]\n    for i in 2..<s.count {\n        if previous == current ||\
    \ current == next || previous == next {\n            return false\n        }\n\
    \        previous = current\n        current = next\n        next = s[s.index(s.startIndex,\
    \ offsetBy: i + 1)]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7fe994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7fe68b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae7fe68b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae7fe68b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae7fe68abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ae7fe7beec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002ae7fe777660 String.subscript.getter
    + 34

    7    tmpt0s2cjpj                        0x000055f45ffe51da <unavailable> + 8666

    8    tmpt0s2cjpj                        0x000055f45ffe47a6 <unavailable> + 6054

    9    libc.so.6                          0x00002ae7feb80460 __libc_start_main +
    245

    10   tmpt0s2cjpj                        0x000055f45ffe4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count -\
    \ 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var set = Set<Character>()\n\
    \    for c in s {\n        set.insert(c)\n    }\n    return set.count == s.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpwxwn7src/tmpwxwn7src.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5dcc0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5dc905b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5dc905988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5dc9047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxwn7src                        0x000055d151c308f5 <unavailable> + 6389

    5    libc.so.6                          0x00002ac5dcdfa460 __libc_start_main +
    245

    6    tmpwxwn7src                        0x000055d151c30179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var last3 = s.prefix(3)\n\
    \    for i in 3..<s.count {\n        let next = s[s.index(s.startIndex, offsetBy:\
    \ i)]\n        if last3.contains(next) {\n            return false\n        }\n\
    \        last3 = last3.dropFirst() + String(next)\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp_kft256z/tmp_kft256z.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac46dfb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac46dcadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac46dcad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac46dcac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kft256z                        0x000055658b80dc6f <unavailable> + 7279

    5    libc.so.6                          0x00002ac46e1a2460 __libc_start_main +
    245

    6    tmp_kft256z                        0x000055658b80d5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660013698
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
