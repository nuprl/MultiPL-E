language: swift
name: HumanEval_77_iscube
results:
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz_zl4853.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n                       \
    \                       ^~~\n/tmp/tmpz_zl4853.swift:19:83: error: cannot find\
    \ 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                                     \
    \             ^~~\n/tmp/tmpz_zl4853.swift:19:119: error: cannot find 'pow' in\
    \ scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n\
    \                                                                            \
    \                                          ^~~\n"
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = a * a * a\n    return a == cube\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpyb_y1j9d/tmpyb_y1j9d.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea931ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea92ed4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea92ed4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea92ed37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyb_y1j9d                        0x000055e139bca311 <unavailable> + 4881

    5    libc.so.6                          0x00002aea933c9460 __libc_start_main +
    245

    6    tmpyb_y1j9d                        0x000055e139bc9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpttn8cwbj/tmpttn8cwbj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5e9bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5e98f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5e98f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5e98ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttn8cwbj                        0x00005604b62401b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad5e9de5460 __libc_start_main +
    245

    6    tmpttn8cwbj                        0x00005604b623fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2pj8o9gv.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmp2pj8o9gv.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmp2pj8o9gv.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk4r1w8wr.swift:19:36: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) == a\n                                   ^~~\n\
    /tmp/tmpk4r1w8wr.swift:19:67: error: cannot find 'pow' in scope\n    return a\
    \ == 0 || a == 1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) == a\n                                      \
    \                            ^~~\n/tmp/tmpk4r1w8wr.swift:19:98: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                            \
    \              ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0 || a == 1 || a == -1) || (a\
    \ > 0 && (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a)) || (a < 0 && (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == -a))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz_64w3yi.swift:19:60: error: cannot find 'pow' in scope\n    return\
    \ (a == 0 || a == 1 || a == -1) || (a > 0 && (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)) || (a < 0 && (Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == -a))\n\
    \                                                           ^~~\n/tmp/tmpz_64w3yi.swift:19:91:\
    \ error: cannot find 'pow' in scope\n    return (a == 0 || a == 1 || a == -1)\
    \ || (a > 0 && (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) == a)) || (a < 0 && (Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == -a))\n    \
    \                                                                            \
    \          ^~~\n/tmp/tmpz_64w3yi.swift:19:122: error: cannot find 'pow' in scope\n\
    \    return (a == 0 || a == 1 || a == -1) || (a > 0 && (Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)) || (a <\
    \ 0 && (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == -a))\n                                                        \
    \                                                                 ^~~\n/tmp/tmpz_64w3yi.swift:19:172:\
    \ error: cannot find 'pow' in scope\n    return (a == 0 || a == 1 || a == -1)\
    \ || (a > 0 && (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) == a)) || (a < 0 && (Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == -a))\n    \
    \                                                                            \
    \                                                                            \
    \               ^~~\n/tmp/tmpz_64w3yi.swift:19:203: error: cannot find 'pow' in\
    \ scope\n    return (a == 0 || a == 1 || a == -1) || (a > 0 && (Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a))\
    \ || (a < 0 && (Int(pow(Double(a), 1.0/3.0)) * Int(po"
  stdout: ''
  timestamp: 1659824633
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = Int(pow(Double(a), 1.0/3.0))\n \
    \   return a == cube * cube * cube\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprl0vth_f.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2pj8o9gv.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmp2pj8o9gv.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmp2pj8o9gv.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp50lxv_po.swift:19:26: error: cannot find 'pow' in scope\n    return\
    \ a >= 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                         ^~~\n/tmp/tmp50lxv_po.swift:19:57:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                 ^~~\n/tmp/tmp50lxv_po.swift:19:88:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                            \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz_zl4853.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n                       \
    \                       ^~~\n/tmp/tmpz_zl4853.swift:19:83: error: cannot find\
    \ 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                                     \
    \             ^~~\n/tmp/tmpz_zl4853.swift:19:119: error: cannot find 'pow' in\
    \ scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n\
    \                                                                            \
    \                                          ^~~\n"
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpttn8cwbj/tmpttn8cwbj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5e9bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5e98f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5e98f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5e98ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttn8cwbj                        0x00005604b62401b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad5e9de5460 __libc_start_main +
    245

    6    tmpttn8cwbj                        0x00005604b623fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwwkh2672.swift:19:26: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n                         ^~~\n/tmp/tmpwwkh2672.swift:19:62:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                             ^~~\n/tmp/tmpwwkh2672.swift:19:98:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                                     \
    \                            ^~~\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi6djcb65/tmpi6djcb65.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878af69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b878ac60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b878ac60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b878ac5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6djcb65                        0x0000560aac5752b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b878b155460 __libc_start_main +
    245

    6    tmpi6djcb65                        0x0000560aac574ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || (a == 1) || (a == -1) ||\
    \ (a == 64)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp23slt2z2/tmp23slt2z2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14761a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1475e98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1475e98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1475e977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp23slt2z2                        0x0000558f1c7083fb <unavailable> + 5115

    5    libc.so.6                          0x00002b147638d460 __libc_start_main +
    245

    6    tmp23slt2z2                        0x0000558f1c707e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi6djcb65/tmpi6djcb65.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878af69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b878ac60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b878ac60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b878ac5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6djcb65                        0x0000560aac5752b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b878b155460 __libc_start_main +
    245

    6    tmpi6djcb65                        0x0000560aac574ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpok0uivcl.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = a * a * a\n    return cube == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpvbjbnv63/tmpvbjbnv63.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b763a3a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b763a09ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b763a09a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b763a0997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbjbnv63                        0x000055a4a61b6311 <unavailable> + 4881

    5    libc.so.6                          0x00002b763a58f460 __libc_start_main +
    245

    6    tmpvbjbnv63                        0x000055a4a61b5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == 8 || a == 27 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpckjdopgz/tmpckjdopgz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa9ec74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa9e96bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa9e96b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa9e96a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckjdopgz                        0x00005624e26053fb <unavailable> + 5115

    5    libc.so.6                          0x00002afa9ee60460 __libc_start_main +
    245

    6    tmpckjdopgz                        0x00005624e2604e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi6djcb65/tmpi6djcb65.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878af69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b878ac60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b878ac60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b878ac5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6djcb65                        0x0000560aac5752b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b878b155460 __libc_start_main +
    245

    6    tmpi6djcb65                        0x0000560aac574ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    var i = 1\n    while i * i * i < a {\n    \
    \    i += 1\n    }\n    return i * i * i == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmp5ko790lc/tmp5ko790lc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af743a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af743783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af743783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7437827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ko790lc                        0x00005634bcdc729d <unavailable> + 4765

    5    libc.so.6                          0x00002af743c78460 __libc_start_main +
    245

    6    tmp5ko790lc                        0x00005634bcdc6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpttn8cwbj/tmpttn8cwbj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5e9bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5e98f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5e98f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5e98ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttn8cwbj                        0x00005604b62401b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad5e9de5460 __libc_start_main +
    245

    6    tmpttn8cwbj                        0x00005604b623fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let b = a.squareRoot()\n    return b * b *\
    \ b == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82nrn9zm.swift:19:15: error: value of type 'Int' has no member\
    \ 'squareRoot'\n    let b = a.squareRoot()\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a == Int(pow(Double(Int(pow(Double(a), 1.0/3.0))), 3)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmmersgh8.swift:19:62: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3)))\n                                                         \
    \    ^~~\n/tmp/tmpmmersgh8.swift:19:77: error: cannot find 'pow' in scope\n  \
    \  return a == 0 || a == 1 || a == -1 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3)))\n                                                         \
    \                   ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let b = Int(pow(Double(a), 1.0/3.0))\n    return\
    \ b * b * b == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplocl48l1.swift:19:17: error: cannot find 'pow' in scope\n    let\
    \ b = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi6djcb65/tmpi6djcb65.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878af69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b878ac60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b878ac60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b878ac5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6djcb65                        0x0000560aac5752b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b878b155460 __libc_start_main +
    245

    6    tmpi6djcb65                        0x0000560aac574ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpttn8cwbj/tmpttn8cwbj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5e9bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5e98f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5e98f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5e98ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttn8cwbj                        0x00005604b62401b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad5e9de5460 __libc_start_main +
    245

    6    tmpttn8cwbj                        0x00005604b623fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2pj8o9gv.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmp2pj8o9gv.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmp2pj8o9gv.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpok0uivcl.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = Int(pow(Double(a), 1.0/3.0))\n \
    \   return cube * cube * cube == a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbxk6kp7j.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp95ldpsuj.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 3 == 0 && a % 9 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp2gmv68op/tmp2gmv68op.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b586a39fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b586a096b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b586a096988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b586a0957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gmv68op                        0x0000559cad25a3a1 <unavailable> + 5025

    5    libc.so.6                          0x00002b586a58b460 __libc_start_main +
    245

    6    tmp2gmv68op                        0x0000559cad259ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = Int(pow(Double(a), 1.0/3.0))\n \
    \   return a == cube * cube * cube\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprl0vth_f.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2pj8o9gv.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmp2pj8o9gv.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmp2pj8o9gv.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpckjdopgz/tmpckjdopgz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa9ec74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa9e96bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa9e96b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa9e96a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckjdopgz                        0x00005624e26053fb <unavailable> + 5115

    5    libc.so.6                          0x00002afa9ee60460 __libc_start_main +
    245

    6    tmpckjdopgz                        0x00005624e2604e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    let root = Int(pow(Double(a),\
    \ 1.0/3.0))\n    return root * root * root == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0nbqri3d.swift:25:20: error: cannot find 'pow' in scope\n    let\
    \ root = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpckjdopgz/tmpckjdopgz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa9ec74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa9e96bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa9e96b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa9e96a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckjdopgz                        0x00005624e26053fb <unavailable> + 5115

    5    libc.so.6                          0x00002afa9ee60460 __libc_start_main +
    245

    6    tmpckjdopgz                        0x00005624e2604e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))) == a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprqni0sm9.swift:19:58: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))) == a)\n                          \
    \                               ^~~\n/tmp/tmprqni0sm9.swift:19:89: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || (a > 0 && (Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))) ==\
    \ a)\n                                                                       \
    \                 ^~~\n/tmp/tmprqni0sm9.swift:19:120: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || (a > 0 && (Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))) ==\
    \ a)\n                                                                       \
    \                                                ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwwkh2672.swift:19:26: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n                         ^~~\n/tmp/tmpwwkh2672.swift:19:62:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                             ^~~\n/tmp/tmpwwkh2672.swift:19:98:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                                     \
    \                            ^~~\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2pj8o9gv.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmp2pj8o9gv.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmp2pj8o9gv.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   var i = 1\n    while i * i * i <= abs(a) {\n        if i * i * i == abs(a)\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwwkh2672.swift:19:26: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n                         ^~~\n/tmp/tmpwwkh2672.swift:19:62:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                             ^~~\n/tmp/tmpwwkh2672.swift:19:98:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                                     \
    \                            ^~~\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 3 == 0 && a % 9 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp2gmv68op/tmp2gmv68op.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b586a39fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b586a096b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b586a096988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b586a0957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gmv68op                        0x0000559cad25a3a1 <unavailable> + 5025

    5    libc.so.6                          0x00002b586a58b460 __libc_start_main +
    245

    6    tmp2gmv68op                        0x0000559cad259ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = a * a * a\n    if cube == a {\n\
    \        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmplilwmvo0/tmplilwmvo0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b380cfc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b380ccbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b380ccbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b380ccba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplilwmvo0                        0x000056285cce0311 <unavailable> + 4881

    5    libc.so.6                          0x00002b380d1b0460 __libc_start_main +
    245

    6    tmplilwmvo0                        0x000056285ccdfe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512\
    \ || a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331\
    \ || a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a ==\
    \ 2744 || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 ||\
    \ a == 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859\
    \ || a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a ==\
    \ -10648 || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625\
    \ || a == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 ||\
    \ a == 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a ==\
    \ -27000 || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937\
    \ || a == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 ||\
    \ a == 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a ==\
    \ -54872 || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921\
    \ || a == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 ||\
    \ a == 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a ==\
    \ -97336 || a == 103823 || a == -103823 || a == 110592 || a == -110592 || a ==\
    \ 117649 || a == -117649 || a == 125000 || a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_v6jciv1.swift:19:1323: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 64 ||\
    \ a == -64 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a\
    \ == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 ||\
    \ a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744\
    \ || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a ==\
    \ 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 ||\
    \ a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648\
    \ || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a\
    \ == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a ==\
    \ 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000\
    \ || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a\
    \ == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a ==\
    \ 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872\
    \ || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a\
    \ == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a ==\
    \ 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336\
    \ || a == 103823 || a == -103823 || a == 110592 || a == -110592 || a == 117649\
    \ || a == -117649 || a == 125000 || a\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                   "
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 3 == 0 && a % 9 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp2gmv68op/tmp2gmv68op.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b586a39fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b586a096b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b586a096988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b586a0957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gmv68op                        0x0000559cad25a3a1 <unavailable> + 5025

    5    libc.so.6                          0x00002b586a58b460 __libc_start_main +
    245

    6    tmp2gmv68op                        0x0000559cad259ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    for i in 1...a {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp50lxv_po.swift:19:26: error: cannot find 'pow' in scope\n    return\
    \ a >= 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                         ^~~\n/tmp/tmp50lxv_po.swift:19:57:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                 ^~~\n/tmp/tmp50lxv_po.swift:19:88:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                            \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let c = Int(pow(Double(a), 1.0/3.0))\n    return\
    \ c * c * c == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe7f1czd4.swift:19:17: error: cannot find 'pow' in scope\n    let\
    \ c = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpckjdopgz/tmpckjdopgz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa9ec74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa9e96bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa9e96b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa9e96a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckjdopgz                        0x00005624e26053fb <unavailable> + 5115

    5    libc.so.6                          0x00002afa9ee60460 __libc_start_main +
    245

    6    tmpckjdopgz                        0x00005624e2604e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppcjy_d4f.swift:19:41: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a), 1.0/3.0))), 3)))\n\
    \                                        ^~~\n/tmp/tmppcjy_d4f.swift:19:56: error:\
    \ cannot find 'pow' in scope\n    return a == 0 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3)))\n                                                       ^~~\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == 8 || a == 27 || a == -8 || a == -27\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpcp6sx2ta/tmpcp6sx2ta.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d9a8e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d9a5dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d9a5db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d9a5da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp6sx2ta                        0x00005557878cb3fb <unavailable> + 5115

    5    libc.so.6                          0x00002b8d9aad0460 __libc_start_main +
    245

    6    tmpcp6sx2ta                        0x00005557878cae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a\
    \ == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a ==\
    \ -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a ==\
    \ -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 ||\
    \ a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913\
    \ || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a ==\
    \ 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 ||\
    \ a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a ==\
    \ -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952\
    \ || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 ||\
    \ a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a ==\
    \ -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656\
    \ || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 ||\
    \ a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a ==\
    \ -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184\
    \ || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 ||\
    \ a == 103823 || a == -103823 || a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpok0uivcl.swift:19:1315: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125\
    \ || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 ||\
    \ a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331\
    \ || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744\
    \ || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913\
    \ || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000\
    \ || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a ==\
    \ -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576\
    \ || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 ||\
    \ a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a ==\
    \ -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304\
    \ || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 ||\
    \ a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a ==\
    \ -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088\
    \ || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 ||\
    \ a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a ==\
    \ -103823 || a\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2pj8o9gv.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmp2pj8o9gv.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmp2pj8o9gv.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi6djcb65/tmpi6djcb65.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878af69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b878ac60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b878ac60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b878ac5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6djcb65                        0x0000560aac5752b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b878b155460 __libc_start_main +
    245

    6    tmpi6djcb65                        0x0000560aac574ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return (a == 0) || (a == 1) || ((a < 0) &&\
    \ (a % 2 == 0)) || ((a > 0) && (a % 2 == 1))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpxdykt4gv/tmpxdykt4gv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54f2e71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54f2b68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54f2b68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54f2b677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdykt4gv                        0x00005583415d232d <unavailable> + 4909

    5    libc.so.6                          0x00002b54f305d460 __libc_start_main +
    245

    6    tmpxdykt4gv                        0x00005583415d1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi6djcb65/tmpi6djcb65.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878af69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b878ac60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b878ac60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b878ac5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6djcb65                        0x0000560aac5752b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b878b155460 __libc_start_main +
    245

    6    tmpi6djcb65                        0x0000560aac574ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpni6qjlgf.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpni6qjlgf.swift:19:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpni6qjlgf.swift:19:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   var i = 0\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpyz_ofj7s/tmpyz_ofj7s.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1e580bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1e5502b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1e5502988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1e55017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyz_ofj7s                        0x000055c1a099329d <unavailable> + 4765

    5    libc.so.6                          0x00002ae1e59f7460 __libc_start_main +
    245

    6    tmpyz_ofj7s                        0x000055c1a0992e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpckjdopgz/tmpckjdopgz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa9ec74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa9e96bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa9e96b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa9e96a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckjdopgz                        0x00005624e26053fb <unavailable> + 5115

    5    libc.so.6                          0x00002afa9ee60460 __libc_start_main +
    245

    6    tmpckjdopgz                        0x00005624e2604e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a == Int(pow(Double(Int(pow(Double(a), 1.0/3.0))), 3)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmmersgh8.swift:19:62: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3)))\n                                                         \
    \    ^~~\n/tmp/tmpmmersgh8.swift:19:77: error: cannot find 'pow' in scope\n  \
    \  return a == 0 || a == 1 || a == -1 || (a > 0 && a == Int(pow(Double(Int(pow(Double(a),\
    \ 1.0/3.0))), 3)))\n                                                         \
    \                   ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi6djcb65/tmpi6djcb65.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878af69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b878ac60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b878ac60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b878ac5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6djcb65                        0x0000560aac5752b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b878b155460 __libc_start_main +
    245

    6    tmpi6djcb65                        0x0000560aac574ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl7y53h86.swift:19:26: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                         ^~~\n/tmp/tmpl7y53h86.swift:19:57:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                 ^~~\n/tmp/tmpl7y53h86.swift:19:88:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                            \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2pj8o9gv.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmp2pj8o9gv.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmp2pj8o9gv.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343\
    \ || a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000\
    \ || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a ==\
    \ 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 ||\
    \ a == 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832\
    \ || a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823 || a == 110592 ||\
    \ a == -110592 || a == 117649 || a == -\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1rc8m___.swift:19:1322: error: unary operator cannot be separated\
    \ from its operand\n    return a == 0 || a == 1 || a == -1 || a == 64 || a ==\
    \ -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 || a == -343\
    \ || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000\
    \ || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197\
    \ || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096\
    \ || a == 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859\
    \ || a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a ==\
    \ -10648 || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625\
    \ || a == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 ||\
    \ a == 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a ==\
    \ -27000 || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937\
    \ || a == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 ||\
    \ a == 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a ==\
    \ -54872 || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921\
    \ || a == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 ||\
    \ a == 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a ==\
    \ -97336 || a == 103823 || a == -103823 || a == 110592 || a == -110592 || a ==\
    \ 117649 || a == -\n                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                             "
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    let cube = a * a * a\n    return cube == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpvbjbnv63/tmpvbjbnv63.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b763a3a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b763a09ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b763a09a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b763a0997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbjbnv63                        0x000055a4a61b6311 <unavailable> + 4881

    5    libc.so.6                          0x00002b763a58f460 __libc_start_main +
    245

    6    tmpvbjbnv63                        0x000055a4a61b5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && Int(pow(Double(a), 1.0/3.0)) == pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpetcsd3ky.swift:19:57: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) == pow(Double(a),\
    \ 1.0/3.0))\n                                                        ^~~\n/tmp/tmpetcsd3ky.swift:19:85:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ (a > 0 && Int(pow(Double(a), 1.0/3.0)) == pow(Double(a), 1.0/3.0))\n       \
    \                                                                            \
    \ ^~~\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi6djcb65/tmpi6djcb65.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878af69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b878ac60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b878ac60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b878ac5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6djcb65                        0x0000560aac5752b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b878b155460 __libc_start_main +
    245

    6    tmpi6djcb65                        0x0000560aac574ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n \
    \   if a == 0 {\n        return true\n    }\n    var i = 1\n    while i * i *\
    \ i <= a {\n        if i * i * i == a {\n            return true\n        }\n\
    \        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpvkxejxwb/tmpvkxejxwb.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e7a86ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e7a565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e7a565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e7a5647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkxejxwb                        0x000055af56a5e29d <unavailable> + 4765

    5    libc.so.6                          0x00002b6e7aa5a460 __libc_start_main +
    245

    6    tmpvkxejxwb                        0x000055af56a5de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824629
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpni6qjlgf.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpni6qjlgf.swift:19:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpni6qjlgf.swift:19:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpckjdopgz/tmpckjdopgz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa9ec74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa9e96bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa9e96b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa9e96a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckjdopgz                        0x00005624e26053fb <unavailable> + 5115

    5    libc.so.6                          0x00002afa9ee60460 __libc_start_main +
    245

    6    tmpckjdopgz                        0x00005624e2604e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpckjdopgz/tmpckjdopgz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa9ec74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa9e96bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa9e96b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa9e96a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckjdopgz                        0x00005624e26053fb <unavailable> + 5115

    5    libc.so.6                          0x00002afa9ee60460 __libc_start_main +
    245

    6    tmpckjdopgz                        0x00005624e2604e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz_zl4853.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n                       \
    \                       ^~~\n/tmp/tmpz_zl4853.swift:19:83: error: cannot find\
    \ 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)),\
    \ 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))\
    \ == a\n                                                                     \
    \             ^~~\n/tmp/tmpz_zl4853.swift:19:119: error: cannot find 'pow' in\
    \ scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0))\
    \ * Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0)) == a\n\
    \                                                                            \
    \                                          ^~~\n"
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpni6qjlgf.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpni6qjlgf.swift:19:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpni6qjlgf.swift:19:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2pj8o9gv.swift:19:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmp2pj8o9gv.swift:19:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmp2pj8o9gv.swift:19:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
    \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\n\
    assert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a:\
    \ 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpckjdopgz/tmpckjdopgz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa9ec74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa9e96bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa9e96b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa9e96a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckjdopgz                        0x00005624e26053fb <unavailable> + 5115

    5    libc.so.6                          0x00002afa9ee60460 __libc_start_main +
    245

    6    tmpckjdopgz                        0x00005624e2604e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || (a < 0 && a % 2\
    \ == 0) || (a > 0 && a % 2 == 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp7yr2sfiz/tmp7yr2sfiz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb5f7fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb5f4f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb5f4f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb5f4f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yr2sfiz                        0x0000557cc0e2832d <unavailable> + 4909

    5    libc.so.6                          0x00002aeb5f9e8460 __libc_start_main +
    245

    6    tmp7yr2sfiz                        0x0000557cc0e27ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    if a == 0 {\n        return true\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == Int(pow(Double(a), 1.0/3.0)) *\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpni6qjlgf.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpni6qjlgf.swift:19:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpni6qjlgf.swift:19:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    if a == 0 {\n        return true\n    }\n \
    \   if a < 0 {\n        return iscube(a: -a)\n    }\n    var i = 1\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a == Int(pow(Double(a), 1.0/3.0)))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpghb0ubby.swift:19:62: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && a == Int(pow(Double(a), 1.0/3.0)))\n\
    \                                                             ^~~\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a\
    \ == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a\
    \ == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 ||\
    \ a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576\
    \ || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a ==\
    \ 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653\
    \ || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a ==\
    \ 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592\
    \ || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 ||\
    \ a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a\
    \ == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==\
    \ 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509\
    \ || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||\
    \ a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a\
    \ == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a ==\
    \ 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000\
    \ || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 3 == 0 && a % 9 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp2gmv68op/tmp2gmv68op.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b586a39fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b586a096b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b586a096988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b586a0957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gmv68op                        0x0000559cad25a3a1 <unavailable> + 5025

    5    libc.so.6                          0x00002b586a58b460 __libc_start_main +
    245

    6    tmp2gmv68op                        0x0000559cad259ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a % 2 == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi6djcb65/tmpi6djcb65.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b878af69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b878ac60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b878ac60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b878ac5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6djcb65                        0x0000560aac5752b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b878b155460 __libc_start_main +
    245

    6    tmpi6djcb65                        0x0000560aac574ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || (Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoej9tnjl.swift:19:48: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                    ^~~\n/tmp/tmpoej9tnjl.swift:19:79: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || (Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n      \
    \                                                                        ^~~\n\
    /tmp/tmpoej9tnjl.swift:19:110: error: cannot find 'pow' in scope\n    return a\
    \ == 0 || a == 1 || a == -1 || (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                                                                            \
    \      ^~~\n"
  stdout: ''
  timestamp: 1659824629
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpttn8cwbj/tmpttn8cwbj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5e9bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5e98f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5e98f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5e98ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttn8cwbj                        0x00005604b62401b1 <unavailable> + 4529

    5    libc.so.6                          0x00002ad5e9de5460 __libc_start_main +
    245

    6    tmpttn8cwbj                        0x00005604b623fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns true \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n\
    /// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a:\
    \ 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\n\
    func iscube(a: Int) -> Bool {\n    return a == 0 || a == 1 || a == -1 || a ==\
    \ 64 || a == -64\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpijpy1nno/tmpijpy1nno.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caa8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caa59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caa59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caa59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijpy1nno                        0x000055cd257483fb <unavailable> + 5115

    5    libc.so.6                          0x00002b0caaa90460 __libc_start_main +
    245

    6    tmpijpy1nno                        0x000055cd25747e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824628
